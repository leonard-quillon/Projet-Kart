
Kart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000ec4  00000f58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ec4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e5  00800112  00800112  00000f6a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f6a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d0  00000000  00000000  00000fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007ede  00000000  00000000  000012ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000195a  00000000  00000000  0000918a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c51  00000000  00000000  0000aae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000984  00000000  00000000  0000c738  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002244  00000000  00000000  0000d0bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000036f9  00000000  00000000  0000f300  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  000129f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__ctors_end>
   4:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <__vector_1>
   8:	0c 94 89 01 	jmp	0x312	; 0x312 <__vector_2>
   c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__vector_3>
  10:	0c 94 13 02 	jmp	0x426	; 0x426 <__vector_4>
  14:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__vector_5>
  18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  40:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__vector_16>
  44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  48:	0c 94 a2 05 	jmp	0xb44	; 0xb44 <__vector_18>
  4c:	0c 94 d4 05 	jmp	0xba8	; 0xba8 <__vector_19>
  50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 01       	movw	r0, r0
  6a:	02 03       	mulsu	r16, r18
  6c:	04 05       	cpc	r16, r4
  6e:	06 07       	cpc	r16, r22
  70:	00 01       	movw	r0, r0
  72:	02 03       	mulsu	r16, r18
  74:	04 05       	cpc	r16, r4
  76:	00 01       	movw	r0, r0
  78:	02 03       	mulsu	r16, r18
  7a:	04 05       	cpc	r16, r4

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
  a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
  ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
  b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
  c2:	04 06       	cpc	r0, r20

000000c4 <__ctors_end>:
  c4:	11 24       	eor	r1, r1
  c6:	1f be       	out	0x3f, r1	; 63
  c8:	cf ef       	ldi	r28, 0xFF	; 255
  ca:	d8 e0       	ldi	r29, 0x08	; 8
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
  d0:	11 e0       	ldi	r17, 0x01	; 1
  d2:	a0 e0       	ldi	r26, 0x00	; 0
  d4:	b1 e0       	ldi	r27, 0x01	; 1
  d6:	e4 ec       	ldi	r30, 0xC4	; 196
  d8:	fe e0       	ldi	r31, 0x0E	; 14
  da:	02 c0       	rjmp	.+4      	; 0xe0 <__do_copy_data+0x10>
  dc:	05 90       	lpm	r0, Z+
  de:	0d 92       	st	X+, r0
  e0:	a2 31       	cpi	r26, 0x12	; 18
  e2:	b1 07       	cpc	r27, r17
  e4:	d9 f7       	brne	.-10     	; 0xdc <__do_copy_data+0xc>

000000e6 <__do_clear_bss>:
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	a2 e1       	ldi	r26, 0x12	; 18
  ea:	b1 e0       	ldi	r27, 0x01	; 1
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
  ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
  f0:	a7 3f       	cpi	r26, 0xF7	; 247
  f2:	b2 07       	cpc	r27, r18
  f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>

000000f6 <__do_global_ctors>:
  f6:	10 e0       	ldi	r17, 0x00	; 0
  f8:	c2 e6       	ldi	r28, 0x62	; 98
  fa:	d0 e0       	ldi	r29, 0x00	; 0
  fc:	04 c0       	rjmp	.+8      	; 0x106 <__do_global_ctors+0x10>
  fe:	21 97       	sbiw	r28, 0x01	; 1
 100:	fe 01       	movw	r30, r28
 102:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <__tablejump2__>
 106:	c1 36       	cpi	r28, 0x61	; 97
 108:	d1 07       	cpc	r29, r17
 10a:	c9 f7       	brne	.-14     	; 0xfe <__do_global_ctors+0x8>
 10c:	0e 94 32 06 	call	0xc64	; 0xc64 <main>
 110:	0c 94 60 07 	jmp	0xec0	; 0xec0 <_exit>

00000114 <__bad_interrupt>:
 114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <_Z11CAPTEUR_INTv>:
#endif
#ifndef EI_NOTINT1
if (arduinoPin == 3) {
  EIMSK &= ~_BV(1);
  EICRA &= (~_BV(2) & ~_BV(3));
  EIFR  |= _BV(1); // using a clue from the ATmega2560 datasheet.
 118:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <CountDemiTour>
 11c:	8f 5f       	subi	r24, 0xFF	; 255
 11e:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <CountDemiTour>
 122:	08 95       	ret

00000124 <_Z15enableInterrupthPFvvEh>:
 124:	e8 2f       	mov	r30, r24
 126:	ef 77       	andi	r30, 0x7F	; 127
 128:	87 fd       	sbrc	r24, 7
 12a:	05 c0       	rjmp	.+10     	; 0x136 <_Z15enableInterrupthPFvvEh+0x12>
 12c:	8e ef       	ldi	r24, 0xFE	; 254
 12e:	8e 0f       	add	r24, r30
 130:	82 30       	cpi	r24, 0x02	; 2
 132:	08 f4       	brcc	.+2      	; 0x136 <_Z15enableInterrupthPFvvEh+0x12>
 134:	9a c0       	rjmp	.+308    	; 0x26a <_Z15enableInterrupthPFvvEh+0x146>
 136:	8e 2f       	mov	r24, r30
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	fc 01       	movw	r30, r24
 13c:	e4 58       	subi	r30, 0x84	; 132
 13e:	ff 4f       	sbci	r31, 0xFF	; 255
 140:	24 91       	lpm	r18, Z
 142:	fc 01       	movw	r30, r24
 144:	e0 57       	subi	r30, 0x70	; 112
 146:	ff 4f       	sbci	r31, 0xFF	; 255
 148:	34 91       	lpm	r19, Z
 14a:	54 2f       	mov	r21, r20
 14c:	5d 7f       	andi	r21, 0xFD	; 253
 14e:	51 30       	cpi	r21, 0x01	; 1
 150:	b9 f4       	brne	.+46     	; 0x180 <_Z15enableInterrupthPFvvEh+0x5c>
 152:	32 30       	cpi	r19, 0x02	; 2
 154:	31 f4       	brne	.+12     	; 0x162 <_Z15enableInterrupthPFvvEh+0x3e>
 156:	50 91 22 01 	lds	r21, 0x0122	; 0x800122 <risingPinsPORTB>
 15a:	52 2b       	or	r21, r18
 15c:	50 93 22 01 	sts	0x0122, r21	; 0x800122 <risingPinsPORTB>
 160:	0f c0       	rjmp	.+30     	; 0x180 <_Z15enableInterrupthPFvvEh+0x5c>
 162:	33 30       	cpi	r19, 0x03	; 3
 164:	31 f4       	brne	.+12     	; 0x172 <_Z15enableInterrupthPFvvEh+0x4e>
 166:	50 91 1f 01 	lds	r21, 0x011F	; 0x80011f <risingPinsPORTC>
 16a:	52 2b       	or	r21, r18
 16c:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <risingPinsPORTC>
 170:	07 c0       	rjmp	.+14     	; 0x180 <_Z15enableInterrupthPFvvEh+0x5c>
 172:	34 30       	cpi	r19, 0x04	; 4
 174:	29 f4       	brne	.+10     	; 0x180 <_Z15enableInterrupthPFvvEh+0x5c>
 176:	50 91 1c 01 	lds	r21, 0x011C	; 0x80011c <risingPinsPORTD>
 17a:	52 2b       	or	r21, r18
 17c:	50 93 1c 01 	sts	0x011C, r21	; 0x80011c <risingPinsPORTD>
 180:	41 50       	subi	r20, 0x01	; 1
 182:	42 30       	cpi	r20, 0x02	; 2
 184:	b8 f4       	brcc	.+46     	; 0x1b4 <_Z15enableInterrupthPFvvEh+0x90>
 186:	32 30       	cpi	r19, 0x02	; 2
 188:	31 f4       	brne	.+12     	; 0x196 <_Z15enableInterrupthPFvvEh+0x72>
 18a:	40 91 21 01 	lds	r20, 0x0121	; 0x800121 <fallingPinsPORTB>
 18e:	42 2b       	or	r20, r18
 190:	40 93 21 01 	sts	0x0121, r20	; 0x800121 <fallingPinsPORTB>
 194:	0f c0       	rjmp	.+30     	; 0x1b4 <_Z15enableInterrupthPFvvEh+0x90>
 196:	33 30       	cpi	r19, 0x03	; 3
 198:	31 f4       	brne	.+12     	; 0x1a6 <_Z15enableInterrupthPFvvEh+0x82>
 19a:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <fallingPinsPORTC>
 19e:	42 2b       	or	r20, r18
 1a0:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <fallingPinsPORTC>
 1a4:	07 c0       	rjmp	.+14     	; 0x1b4 <_Z15enableInterrupthPFvvEh+0x90>
 1a6:	34 30       	cpi	r19, 0x04	; 4
 1a8:	29 f4       	brne	.+10     	; 0x1b4 <_Z15enableInterrupthPFvvEh+0x90>
 1aa:	40 91 1b 01 	lds	r20, 0x011B	; 0x80011b <fallingPinsPORTD>
 1ae:	42 2b       	or	r20, r18
 1b0:	40 93 1b 01 	sts	0x011B, r20	; 0x80011b <fallingPinsPORTD>
 1b4:	fc 01       	movw	r30, r24
 1b6:	e8 59       	subi	r30, 0x98	; 152
 1b8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ba:	a4 91       	lpm	r26, Z
 1bc:	32 30       	cpi	r19, 0x02	; 2
 1be:	c1 f4       	brne	.+48     	; 0x1f0 <_Z15enableInterrupthPFvvEh+0xcc>
 1c0:	b0 e0       	ldi	r27, 0x00	; 0
 1c2:	aa 0f       	add	r26, r26
 1c4:	bb 1f       	adc	r27, r27
 1c6:	a1 5c       	subi	r26, 0xC1	; 193
 1c8:	be 4f       	sbci	r27, 0xFE	; 254
 1ca:	6d 93       	st	X+, r22
 1cc:	7c 93       	st	X, r23
 1ce:	e8 ea       	ldi	r30, 0xA8	; 168
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	a5 91       	lpm	r26, Z+
 1d4:	b4 91       	lpm	r27, Z
 1d6:	8c 91       	ld	r24, X
 1d8:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <_ZL13portSnapshotB>
 1dc:	8b e6       	ldi	r24, 0x6B	; 107
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <pcmsk+0x1>
 1e4:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <pcmsk>
 1e8:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
 1ec:	81 60       	ori	r24, 0x01	; 1
 1ee:	33 c0       	rjmp	.+102    	; 0x256 <_Z15enableInterrupthPFvvEh+0x132>
 1f0:	33 30       	cpi	r19, 0x03	; 3
 1f2:	c1 f4       	brne	.+48     	; 0x224 <_Z15enableInterrupthPFvvEh+0x100>
 1f4:	b0 e0       	ldi	r27, 0x00	; 0
 1f6:	aa 0f       	add	r26, r26
 1f8:	bb 1f       	adc	r27, r27
 1fa:	ad 5c       	subi	r26, 0xCD	; 205
 1fc:	be 4f       	sbci	r27, 0xFE	; 254
 1fe:	6d 93       	st	X+, r22
 200:	7c 93       	st	X, r23
 202:	ea ea       	ldi	r30, 0xAA	; 170
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	a5 91       	lpm	r26, Z+
 208:	b4 91       	lpm	r27, Z
 20a:	8c 91       	ld	r24, X
 20c:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <_ZL13portSnapshotC>
 210:	8c e6       	ldi	r24, 0x6C	; 108
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <pcmsk+0x1>
 218:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <pcmsk>
 21c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
 220:	82 60       	ori	r24, 0x02	; 2
 222:	19 c0       	rjmp	.+50     	; 0x256 <_Z15enableInterrupthPFvvEh+0x132>
 224:	34 30       	cpi	r19, 0x04	; 4
 226:	c9 f4       	brne	.+50     	; 0x25a <_Z15enableInterrupthPFvvEh+0x136>
 228:	b0 e0       	ldi	r27, 0x00	; 0
 22a:	aa 0f       	add	r26, r26
 22c:	bb 1f       	adc	r27, r27
 22e:	ad 5d       	subi	r26, 0xDD	; 221
 230:	be 4f       	sbci	r27, 0xFE	; 254
 232:	6d 93       	st	X+, r22
 234:	7c 93       	st	X, r23
 236:	ec ea       	ldi	r30, 0xAC	; 172
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	a5 91       	lpm	r26, Z+
 23c:	b4 91       	lpm	r27, Z
 23e:	8c 91       	ld	r24, X
 240:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <_ZL13portSnapshotD>
 244:	8d e6       	ldi	r24, 0x6D	; 109
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <pcmsk+0x1>
 24c:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <pcmsk>
 250:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
 254:	84 60       	ori	r24, 0x04	; 4
 256:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
 25a:	a0 91 4f 01 	lds	r26, 0x014F	; 0x80014f <pcmsk>
 25e:	b0 91 50 01 	lds	r27, 0x0150	; 0x800150 <pcmsk+0x1>
 262:	ec 91       	ld	r30, X
 264:	2e 2b       	or	r18, r30
 266:	2c 93       	st	X, r18
 268:	08 95       	ret
 26a:	9f b7       	in	r25, 0x3f	; 63
 26c:	f8 94       	cli
 26e:	e2 30       	cpi	r30, 0x02	; 2
 270:	99 f4       	brne	.+38     	; 0x298 <_Z15enableInterrupthPFvvEh+0x174>
 272:	70 93 4c 01 	sts	0x014C, r23	; 0x80014c <functionPointerArrayEXTERNAL+0x1>
 276:	60 93 4b 01 	sts	0x014B, r22	; 0x80014b <functionPointerArrayEXTERNAL>
 27a:	e8 98       	cbi	0x1d, 0	; 29
 27c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 280:	8c 7f       	andi	r24, 0xFC	; 252
 282:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 286:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 28a:	48 2b       	or	r20, r24
 28c:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 290:	e0 9a       	sbi	0x1c, 0	; 28
 292:	e8 9a       	sbi	0x1d, 0	; 29
 294:	9f bf       	out	0x3f, r25	; 63
 296:	08 95       	ret
 298:	70 93 4e 01 	sts	0x014E, r23	; 0x80014e <functionPointerArrayEXTERNAL+0x3>
 29c:	60 93 4d 01 	sts	0x014D, r22	; 0x80014d <functionPointerArrayEXTERNAL+0x2>
 2a0:	e9 98       	cbi	0x1d, 1	; 29
 2a2:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 2a6:	83 7f       	andi	r24, 0xF3	; 243
 2a8:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 2ac:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 2b0:	24 e0       	ldi	r18, 0x04	; 4
 2b2:	42 9f       	mul	r20, r18
 2b4:	a0 01       	movw	r20, r0
 2b6:	11 24       	eor	r1, r1
 2b8:	48 2b       	or	r20, r24
 2ba:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 2be:	e1 9a       	sbi	0x1c, 1	; 28
 2c0:	e9 9a       	sbi	0x1d, 1	; 29
 2c2:	e8 cf       	rjmp	.-48     	; 0x294 <_Z15enableInterrupthPFvvEh+0x170>

000002c4 <__vector_1>:
// *************************************************************************************
// External Interrupts
// *************************************************************************************
#ifndef EI_NOTEXTERNAL
#ifndef EI_NOTINT0
ISR(INT0_vect) {/*{{{*/
 2c4:	1f 92       	push	r1
 2c6:	0f 92       	push	r0
 2c8:	0f b6       	in	r0, 0x3f	; 63
 2ca:	0f 92       	push	r0
 2cc:	11 24       	eor	r1, r1
 2ce:	2f 93       	push	r18
 2d0:	3f 93       	push	r19
 2d2:	4f 93       	push	r20
 2d4:	5f 93       	push	r21
 2d6:	6f 93       	push	r22
 2d8:	7f 93       	push	r23
 2da:	8f 93       	push	r24
 2dc:	9f 93       	push	r25
 2de:	af 93       	push	r26
 2e0:	bf 93       	push	r27
 2e2:	ef 93       	push	r30
 2e4:	ff 93       	push	r31
#elif defined EI_ATTINY25
  arduinoInterruptedPin=ARDUINO_PIN_B0; arduinoPinState=PINB & _BV(0);
#endif
#endif // EI_ARDUINO_INTERRUPTED_PIN
#if ! defined EI_ATTINY25 && ! defined EI_ATTINY24
  (*functionPointerArrayEXTERNAL[0])();
 2e6:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <functionPointerArrayEXTERNAL>
 2ea:	f0 91 4c 01 	lds	r31, 0x014C	; 0x80014c <functionPointerArrayEXTERNAL+0x1>
 2ee:	09 95       	icall
  INTERRUPT_FLAG_PIN2++;
#endif
#endif

#endif // NEEDFORSPEED
}/*}}}*/
 2f0:	ff 91       	pop	r31
 2f2:	ef 91       	pop	r30
 2f4:	bf 91       	pop	r27
 2f6:	af 91       	pop	r26
 2f8:	9f 91       	pop	r25
 2fa:	8f 91       	pop	r24
 2fc:	7f 91       	pop	r23
 2fe:	6f 91       	pop	r22
 300:	5f 91       	pop	r21
 302:	4f 91       	pop	r20
 304:	3f 91       	pop	r19
 306:	2f 91       	pop	r18
 308:	0f 90       	pop	r0
 30a:	0f be       	out	0x3f, r0	; 63
 30c:	0f 90       	pop	r0
 30e:	1f 90       	pop	r1
 310:	18 95       	reti

00000312 <__vector_2>:
#endif // EI_NOTINT0

#if ! defined(EI_ATTINY24) && ! defined(EI_ATTINY25)
#ifndef EI_NOTINT1
ISR(INT1_vect) {/*{{{*/
 312:	1f 92       	push	r1
 314:	0f 92       	push	r0
 316:	0f b6       	in	r0, 0x3f	; 63
 318:	0f 92       	push	r0
 31a:	11 24       	eor	r1, r1
 31c:	2f 93       	push	r18
 31e:	3f 93       	push	r19
 320:	4f 93       	push	r20
 322:	5f 93       	push	r21
 324:	6f 93       	push	r22
 326:	7f 93       	push	r23
 328:	8f 93       	push	r24
 32a:	9f 93       	push	r25
 32c:	af 93       	push	r26
 32e:	bf 93       	push	r27
 330:	ef 93       	push	r30
 332:	ff 93       	push	r31
  arduinoInterruptedPin=ARDUINO_PIN_D1; arduinoPinState=PIND & _BV(1);
#elif defined ARDUINO_328
  arduinoInterruptedPin=ARDUINO_PIN_D3; arduinoPinState=PIND & _BV(3);
#endif
#endif // EI_ARDUINO_INTERRUPTED_PIN
  (*functionPointerArrayEXTERNAL[1])();
 334:	e0 91 4d 01 	lds	r30, 0x014D	; 0x80014d <functionPointerArrayEXTERNAL+0x2>
 338:	f0 91 4e 01 	lds	r31, 0x014E	; 0x80014e <functionPointerArrayEXTERNAL+0x3>
 33c:	09 95       	icall
#ifdef INTERRUPT_FLAG_PIN3
  INTERRUPT_FLAG_PIN3++;
#endif
#endif
#endif // NEEDFORSPEED
}/*}}}*/
 33e:	ff 91       	pop	r31
 340:	ef 91       	pop	r30
 342:	bf 91       	pop	r27
 344:	af 91       	pop	r26
 346:	9f 91       	pop	r25
 348:	8f 91       	pop	r24
 34a:	7f 91       	pop	r23
 34c:	6f 91       	pop	r22
 34e:	5f 91       	pop	r21
 350:	4f 91       	pop	r20
 352:	3f 91       	pop	r19
 354:	2f 91       	pop	r18
 356:	0f 90       	pop	r0
 358:	0f be       	out	0x3f, r0	; 63
 35a:	0f 90       	pop	r0
 35c:	1f 90       	pop	r1
 35e:	18 95       	reti

00000360 <__vector_3>:
  // exitPORTBISR: PORTC &= ~(1 << PC5); // SIGNAL THAT WE ARE LEAVING THE INTERRUPT
}/*}}}*/
#endif // EI_NOTPORTA

#ifndef EI_NOTPORTB
ISR(PORTB_VECT) {/*{{{*/
 360:	1f 92       	push	r1
 362:	0f 92       	push	r0
 364:	0f b6       	in	r0, 0x3f	; 63
 366:	0f 92       	push	r0
 368:	11 24       	eor	r1, r1
 36a:	2f 93       	push	r18
 36c:	3f 93       	push	r19
 36e:	4f 93       	push	r20
 370:	5f 93       	push	r21
 372:	6f 93       	push	r22
 374:	7f 93       	push	r23
 376:	8f 93       	push	r24
 378:	9f 93       	push	r25
 37a:	af 93       	push	r26
 37c:	bf 93       	push	r27
 37e:	cf 93       	push	r28
 380:	ef 93       	push	r30
 382:	ff 93       	push	r31
  uint8_t current;
  uint8_t interruptMask;
  uint8_t changedPins;
  uint8_t tmp;

  current=PINB;
 384:	23 b1       	in	r18, 0x03	; 3
// If we trust the compiler to do this, it will use an extra register...
//  changedPins=(portSnapshotB ^ current) &
//                                       ((risingPinsPORTB & current) | (fallingPinsPORTB & ~current));
// ...so we do it ourselves:
  changedPins   = portSnapshotB ^ current;
 386:	c0 91 20 01 	lds	r28, 0x0120	; 0x800120 <_ZL13portSnapshotB>
  tmp           = risingPinsPORTB & current;
 38a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <risingPinsPORTB>
  interruptMask = fallingPinsPORTB & ~current;
 38e:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <fallingPinsPORTB>
 392:	32 2f       	mov	r19, r18
 394:	30 95       	com	r19
 396:	93 23       	and	r25, r19
  interruptMask = interruptMask | tmp;
 398:	82 23       	and	r24, r18
 39a:	89 2b       	or	r24, r25
  interruptMask = PCMSK1 & interruptMask;
#else
#ifdef EI_ATTINY25
  interruptMask = PCMSK & interruptMask;
#else
  interruptMask = PCMSK0 & interruptMask;
 39c:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
 3a0:	c2 27       	eor	r28, r18
 3a2:	c9 23       	and	r28, r25
 3a4:	c8 23       	and	r28, r24
#endif
#endif

  portSnapshotB = current;
 3a6:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <_ZL13portSnapshotB>
#ifdef NEEDFORSPEED
#include "utility/ei_portb_speed.h"
#else
  if (interruptMask == 0) goto exitPORTBISR; // get out quickly if not interested.
 3aa:	cc 23       	and	r28, r28
 3ac:	51 f1       	breq	.+84     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
#if ! (defined ARDUINO_328) && ! (defined EI_ATTINY24) && ! (defined EI_ATTINY25)
  if (interruptMask & _BV(6)) { arduinoInterruptedPin=ARDUINO_PIN_B6; arduinoPinState=current & _BV(6); portBFunctions.pinSix(); }
  if (interruptMask & _BV(7)) { arduinoInterruptedPin=ARDUINO_PIN_B7; arduinoPinState=current & _BV(7); portBFunctions.pinSeven(); }
#endif
#else // EI_ARDUINO_INTERRUPTED_PIN
  if (interruptMask & _BV(0)) portBFunctions.pinZero();
 3ae:	c0 ff       	sbrs	r28, 0
 3b0:	05 c0       	rjmp	.+10     	; 0x3bc <__vector_3+0x5c>
 3b2:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <portBFunctions>
 3b6:	f0 91 40 01 	lds	r31, 0x0140	; 0x800140 <portBFunctions+0x1>
 3ba:	09 95       	icall
  if (interruptMask & _BV(1)) portBFunctions.pinOne();
 3bc:	c1 ff       	sbrs	r28, 1
 3be:	05 c0       	rjmp	.+10     	; 0x3ca <__vector_3+0x6a>
 3c0:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <portBFunctions+0x2>
 3c4:	f0 91 42 01 	lds	r31, 0x0142	; 0x800142 <portBFunctions+0x3>
 3c8:	09 95       	icall
  if (interruptMask & _BV(2)) portBFunctions.pinTwo();
 3ca:	c2 ff       	sbrs	r28, 2
 3cc:	05 c0       	rjmp	.+10     	; 0x3d8 <__vector_3+0x78>
 3ce:	e0 91 43 01 	lds	r30, 0x0143	; 0x800143 <portBFunctions+0x4>
 3d2:	f0 91 44 01 	lds	r31, 0x0144	; 0x800144 <portBFunctions+0x5>
 3d6:	09 95       	icall
  if (interruptMask & _BV(3)) portBFunctions.pinThree();
 3d8:	c3 ff       	sbrs	r28, 3
 3da:	05 c0       	rjmp	.+10     	; 0x3e6 <__vector_3+0x86>
 3dc:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <portBFunctions+0x6>
 3e0:	f0 91 46 01 	lds	r31, 0x0146	; 0x800146 <portBFunctions+0x7>
 3e4:	09 95       	icall
#if ! (defined EI_ATTINY24)
  if (interruptMask & _BV(4)) portBFunctions.pinFour();
 3e6:	c4 ff       	sbrs	r28, 4
 3e8:	05 c0       	rjmp	.+10     	; 0x3f4 <__vector_3+0x94>
 3ea:	e0 91 47 01 	lds	r30, 0x0147	; 0x800147 <portBFunctions+0x8>
 3ee:	f0 91 48 01 	lds	r31, 0x0148	; 0x800148 <portBFunctions+0x9>
 3f2:	09 95       	icall
  if (interruptMask & _BV(5)) portBFunctions.pinFive();
 3f4:	c5 ff       	sbrs	r28, 5
 3f6:	05 c0       	rjmp	.+10     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3f8:	e0 91 49 01 	lds	r30, 0x0149	; 0x800149 <portBFunctions+0xa>
 3fc:	f0 91 4a 01 	lds	r31, 0x014A	; 0x80014a <portBFunctions+0xb>
 400:	09 95       	icall
#endif // EI_ARDUINO_INTERRUPTED_PIN
  exitPORTBISR: return;
  // FOR MEASUREMENT ONLY
  // exitPORTBISR: PORTC &= ~(1 << PC5); // SIGNAL THAT WE ARE LEAVING THE INTERRUPT
#endif // NEEDFORSPEED
}/*}}}*/
 402:	ff 91       	pop	r31
 404:	ef 91       	pop	r30
 406:	cf 91       	pop	r28
 408:	bf 91       	pop	r27
 40a:	af 91       	pop	r26
 40c:	9f 91       	pop	r25
 40e:	8f 91       	pop	r24
 410:	7f 91       	pop	r23
 412:	6f 91       	pop	r22
 414:	5f 91       	pop	r21
 416:	4f 91       	pop	r20
 418:	3f 91       	pop	r19
 41a:	2f 91       	pop	r18
 41c:	0f 90       	pop	r0
 41e:	0f be       	out	0x3f, r0	; 63
 420:	0f 90       	pop	r0
 422:	1f 90       	pop	r1
 424:	18 95       	reti

00000426 <__vector_4>:
#endif // EI_NOTPORTB

#ifndef EI_NOTPORTC
ISR(PORTC_VECT) {/*{{{*/
 426:	1f 92       	push	r1
 428:	0f 92       	push	r0
 42a:	0f b6       	in	r0, 0x3f	; 63
 42c:	0f 92       	push	r0
 42e:	11 24       	eor	r1, r1
 430:	2f 93       	push	r18
 432:	3f 93       	push	r19
 434:	4f 93       	push	r20
 436:	5f 93       	push	r21
 438:	6f 93       	push	r22
 43a:	7f 93       	push	r23
 43c:	8f 93       	push	r24
 43e:	9f 93       	push	r25
 440:	af 93       	push	r26
 442:	bf 93       	push	r27
 444:	cf 93       	push	r28
 446:	ef 93       	push	r30
 448:	ff 93       	push	r31
  uint8_t current;
  uint8_t interruptMask;
  uint8_t changedPins;
  uint8_t tmp;

  current=PINC;
 44a:	26 b1       	in	r18, 0x06	; 6
// If we trust the compiler to do this, it will use an extra register...
//  changedPins=(portSnapshotB ^ current) &
//                                       ((risingPinsPORTB & current) | (fallingPinsPORTB & ~current));
// ...so we do it ourselves:
  changedPins   = portSnapshotC ^ current;
 44c:	c0 91 1d 01 	lds	r28, 0x011D	; 0x80011d <_ZL13portSnapshotC>
  tmp           = risingPinsPORTC & current;
 450:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <risingPinsPORTC>
  interruptMask = fallingPinsPORTC & ~current;
 454:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <fallingPinsPORTC>
 458:	32 2f       	mov	r19, r18
 45a:	30 95       	com	r19
 45c:	93 23       	and	r25, r19
  interruptMask = interruptMask | tmp;
 45e:	82 23       	and	r24, r18
 460:	89 2b       	or	r24, r25
  interruptMask = changedPins & interruptMask;
#if (defined MIGHTY1284)
  interruptMask = PCMSK2 & interruptMask;
#else
  interruptMask = PCMSK1 & interruptMask;
 462:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
 466:	c2 27       	eor	r28, r18
 468:	c9 23       	and	r28, r25
 46a:	c8 23       	and	r28, r24
#endif

  portSnapshotC = current;
 46c:	20 93 1d 01 	sts	0x011D, r18	; 0x80011d <_ZL13portSnapshotC>
#ifdef NEEDFORSPEED
#include "utility/ei_portc_speed.h"
#else
  if (interruptMask == 0) goto exitPORTCISR; // get out quickly if not interested.
 470:	cc 23       	and	r28, r28
 472:	51 f1       	breq	.+84     	; 0x4c8 <__vector_4+0xa2>
#ifdef MIGHTY1284
  if (interruptMask & _BV(6)) { arduinoInterruptedPin=ARDUINO_PIN_C6; arduinoPinState=current & _BV(6); portCFunctions.pinSix(); }
  if (interruptMask & _BV(7)) { arduinoInterruptedPin=ARDUINO_PIN_C7; arduinoPinState=current & _BV(7); portCFunctions.pinSeven(); }
#endif
#else
  if (interruptMask & _BV(0)) portCFunctions.pinZero();
 474:	c0 ff       	sbrs	r28, 0
 476:	05 c0       	rjmp	.+10     	; 0x482 <__vector_4+0x5c>
 478:	e0 91 33 01 	lds	r30, 0x0133	; 0x800133 <portCFunctions>
 47c:	f0 91 34 01 	lds	r31, 0x0134	; 0x800134 <portCFunctions+0x1>
 480:	09 95       	icall
  if (interruptMask & _BV(1)) portCFunctions.pinOne();
 482:	c1 ff       	sbrs	r28, 1
 484:	05 c0       	rjmp	.+10     	; 0x490 <__vector_4+0x6a>
 486:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <portCFunctions+0x2>
 48a:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <portCFunctions+0x3>
 48e:	09 95       	icall
  if (interruptMask & _BV(2)) portCFunctions.pinTwo();
 490:	c2 ff       	sbrs	r28, 2
 492:	05 c0       	rjmp	.+10     	; 0x49e <__vector_4+0x78>
 494:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <portCFunctions+0x4>
 498:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <portCFunctions+0x5>
 49c:	09 95       	icall
  if (interruptMask & _BV(3)) portCFunctions.pinThree();
 49e:	c3 ff       	sbrs	r28, 3
 4a0:	05 c0       	rjmp	.+10     	; 0x4ac <__vector_4+0x86>
 4a2:	e0 91 39 01 	lds	r30, 0x0139	; 0x800139 <portCFunctions+0x6>
 4a6:	f0 91 3a 01 	lds	r31, 0x013A	; 0x80013a <portCFunctions+0x7>
 4aa:	09 95       	icall
  if (interruptMask & _BV(4)) portCFunctions.pinFour();
 4ac:	c4 ff       	sbrs	r28, 4
 4ae:	05 c0       	rjmp	.+10     	; 0x4ba <__vector_4+0x94>
 4b0:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <portCFunctions+0x8>
 4b4:	f0 91 3c 01 	lds	r31, 0x013C	; 0x80013c <portCFunctions+0x9>
 4b8:	09 95       	icall
  if (interruptMask & _BV(5)) portCFunctions.pinFive();
 4ba:	c5 ff       	sbrs	r28, 5
 4bc:	05 c0       	rjmp	.+10     	; 0x4c8 <__vector_4+0xa2>
 4be:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <portCFunctions+0xa>
 4c2:	f0 91 3e 01 	lds	r31, 0x013E	; 0x80013e <portCFunctions+0xb>
 4c6:	09 95       	icall
  if (interruptMask & _BV(7)) portCFunctions.pinSeven();
#endif
#endif // EI_ARDUINO_INTERRUPTED_PIN
  exitPORTCISR: return;
#endif // NEEDFORSPEED
}/*}}}*/
 4c8:	ff 91       	pop	r31
 4ca:	ef 91       	pop	r30
 4cc:	cf 91       	pop	r28
 4ce:	bf 91       	pop	r27
 4d0:	af 91       	pop	r26
 4d2:	9f 91       	pop	r25
 4d4:	8f 91       	pop	r24
 4d6:	7f 91       	pop	r23
 4d8:	6f 91       	pop	r22
 4da:	5f 91       	pop	r21
 4dc:	4f 91       	pop	r20
 4de:	3f 91       	pop	r19
 4e0:	2f 91       	pop	r18
 4e2:	0f 90       	pop	r0
 4e4:	0f be       	out	0x3f, r0	; 63
 4e6:	0f 90       	pop	r0
 4e8:	1f 90       	pop	r1
 4ea:	18 95       	reti

000004ec <__vector_5>:
#endif // EI_NOTPORTC

#ifndef EI_NOTPORTD
ISR(PORTD_VECT) {/*{{{*/
 4ec:	1f 92       	push	r1
 4ee:	0f 92       	push	r0
 4f0:	0f b6       	in	r0, 0x3f	; 63
 4f2:	0f 92       	push	r0
 4f4:	11 24       	eor	r1, r1
 4f6:	2f 93       	push	r18
 4f8:	3f 93       	push	r19
 4fa:	4f 93       	push	r20
 4fc:	5f 93       	push	r21
 4fe:	6f 93       	push	r22
 500:	7f 93       	push	r23
 502:	8f 93       	push	r24
 504:	9f 93       	push	r25
 506:	af 93       	push	r26
 508:	bf 93       	push	r27
 50a:	cf 93       	push	r28
 50c:	ef 93       	push	r30
 50e:	ff 93       	push	r31
  uint8_t current;
  uint8_t interruptMask;
  uint8_t changedPins;
  uint8_t tmp;

  current=PIND;
 510:	29 b1       	in	r18, 0x09	; 9
// If we trust the compiler to do this, it will use an extra register...
//  changedPins=(portSnapshotB ^ current) &
//                                       ((risingPinsPORTB & current) | (fallingPinsPORTB & ~current));
// ...so we do it ourselves:
  changedPins   = portSnapshotD ^ current;
 512:	c0 91 1a 01 	lds	r28, 0x011A	; 0x80011a <_ZL13portSnapshotD>
  tmp           = risingPinsPORTD & current;
 516:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <risingPinsPORTD>
  interruptMask = fallingPinsPORTD & ~current;
 51a:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <fallingPinsPORTD>
 51e:	32 2f       	mov	r19, r18
 520:	30 95       	com	r19
 522:	93 23       	and	r25, r19
  interruptMask = interruptMask | tmp;
 524:	82 23       	and	r24, r18
 526:	89 2b       	or	r24, r25
  interruptMask = changedPins & interruptMask;
#if (defined MIGHTY1284)
  interruptMask = PCMSK3 & interruptMask;
#else
  interruptMask = PCMSK2 & interruptMask;
 528:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
 52c:	c2 27       	eor	r28, r18
 52e:	c9 23       	and	r28, r25
 530:	c8 23       	and	r28, r24
#endif

  portSnapshotD = current;
 532:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <_ZL13portSnapshotD>
#ifdef NEEDFORSPEED
#include "utility/ei_portd_speed.h"
#else
  if (interruptMask == 0) goto exitPORTDISR; // get out quickly if not interested.
 536:	cc 23       	and	r28, r28
 538:	c1 f1       	breq	.+112    	; 0x5aa <__vector_5+0xbe>
  if (interruptMask & _BV(4)) { arduinoInterruptedPin=ARDUINO_PIN_D4; arduinoPinState=current & _BV(4); portDFunctions.pinFour(); }
  if (interruptMask & _BV(5)) { arduinoInterruptedPin=ARDUINO_PIN_D5; arduinoPinState=current & _BV(5); portDFunctions.pinFive(); }
  if (interruptMask & _BV(6)) { arduinoInterruptedPin=ARDUINO_PIN_D6; arduinoPinState=current & _BV(6); portDFunctions.pinSix(); }
  if (interruptMask & _BV(7)) { arduinoInterruptedPin=ARDUINO_PIN_D7; arduinoPinState=current & _BV(7); portDFunctions.pinSeven(); }
#else
  if (interruptMask & _BV(0)) portDFunctions.pinZero();
 53a:	c0 ff       	sbrs	r28, 0
 53c:	05 c0       	rjmp	.+10     	; 0x548 <__vector_5+0x5c>
 53e:	e0 91 23 01 	lds	r30, 0x0123	; 0x800123 <portDFunctions>
 542:	f0 91 24 01 	lds	r31, 0x0124	; 0x800124 <portDFunctions+0x1>
 546:	09 95       	icall
  if (interruptMask & _BV(1)) portDFunctions.pinOne();
 548:	c1 ff       	sbrs	r28, 1
 54a:	05 c0       	rjmp	.+10     	; 0x556 <__vector_5+0x6a>
 54c:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <portDFunctions+0x2>
 550:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <portDFunctions+0x3>
 554:	09 95       	icall
  if (interruptMask & _BV(2)) portDFunctions.pinTwo();
 556:	c2 ff       	sbrs	r28, 2
 558:	05 c0       	rjmp	.+10     	; 0x564 <__vector_5+0x78>
 55a:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <portDFunctions+0x4>
 55e:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <portDFunctions+0x5>
 562:	09 95       	icall
  if (interruptMask & _BV(3)) portDFunctions.pinThree();
 564:	c3 ff       	sbrs	r28, 3
 566:	05 c0       	rjmp	.+10     	; 0x572 <__vector_5+0x86>
 568:	e0 91 29 01 	lds	r30, 0x0129	; 0x800129 <portDFunctions+0x6>
 56c:	f0 91 2a 01 	lds	r31, 0x012A	; 0x80012a <portDFunctions+0x7>
 570:	09 95       	icall
  if (interruptMask & _BV(4)) portDFunctions.pinFour();
 572:	c4 ff       	sbrs	r28, 4
 574:	05 c0       	rjmp	.+10     	; 0x580 <__vector_5+0x94>
 576:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <portDFunctions+0x8>
 57a:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <portDFunctions+0x9>
 57e:	09 95       	icall
  if (interruptMask & _BV(5)) portDFunctions.pinFive();
 580:	c5 ff       	sbrs	r28, 5
 582:	05 c0       	rjmp	.+10     	; 0x58e <__vector_5+0xa2>
 584:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <portDFunctions+0xa>
 588:	f0 91 2e 01 	lds	r31, 0x012E	; 0x80012e <portDFunctions+0xb>
 58c:	09 95       	icall
  if (interruptMask & _BV(6)) portDFunctions.pinSix();
 58e:	c6 ff       	sbrs	r28, 6
 590:	05 c0       	rjmp	.+10     	; 0x59c <__vector_5+0xb0>
 592:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <portDFunctions+0xc>
 596:	f0 91 30 01 	lds	r31, 0x0130	; 0x800130 <portDFunctions+0xd>
 59a:	09 95       	icall
  if (interruptMask & _BV(7)) portDFunctions.pinSeven();
 59c:	c7 ff       	sbrs	r28, 7
 59e:	05 c0       	rjmp	.+10     	; 0x5aa <__vector_5+0xbe>
 5a0:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <portDFunctions+0xe>
 5a4:	f0 91 32 01 	lds	r31, 0x0132	; 0x800132 <portDFunctions+0xf>
 5a8:	09 95       	icall
#endif // EI_ARDUINO_INTERRUPTED_PIN
  exitPORTDISR: return;
#endif // NEEDFORSPEED
}/*}}}*/
 5aa:	ff 91       	pop	r31
 5ac:	ef 91       	pop	r30
 5ae:	cf 91       	pop	r28
 5b0:	bf 91       	pop	r27
 5b2:	af 91       	pop	r26
 5b4:	9f 91       	pop	r25
 5b6:	8f 91       	pop	r24
 5b8:	7f 91       	pop	r23
 5ba:	6f 91       	pop	r22
 5bc:	5f 91       	pop	r21
 5be:	4f 91       	pop	r20
 5c0:	3f 91       	pop	r19
 5c2:	2f 91       	pop	r18
 5c4:	0f 90       	pop	r0
 5c6:	0f be       	out	0x3f, r0	; 63
 5c8:	0f 90       	pop	r0
 5ca:	1f 90       	pop	r1
 5cc:	18 95       	reti

000005ce <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 5ce:	26 e0       	ldi	r18, 0x06	; 6
 5d0:	40 e8       	ldi	r20, 0x80	; 128
 5d2:	55 e2       	ldi	r21, 0x25	; 37
 5d4:	60 e0       	ldi	r22, 0x00	; 0
 5d6:	70 e0       	ldi	r23, 0x00	; 0
 5d8:	81 e5       	ldi	r24, 0x51	; 81
 5da:	91 e0       	ldi	r25, 0x01	; 1
 5dc:	0e 94 3d 05 	call	0xa7a	; 0xa7a <_ZN14HardwareSerial5beginEmh>
void setup() {
	// start serial connection
	Serial.begin(9600);
	
	// Configure input en pull up
	pinMode(INPUT_CAPTEUR_VITESSE, INPUT);
 5e0:	60 e0       	ldi	r22, 0x00	; 0
 5e2:	84 e0       	ldi	r24, 0x04	; 4
 5e4:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <pinMode>
	
	// Configure interruption
	enableInterrupt(INPUT_CAPTEUR_VITESSE, CAPTEUR_INT, RISING);
 5e8:	43 e0       	ldi	r20, 0x03	; 3
 5ea:	6c e8       	ldi	r22, 0x8C	; 140
 5ec:	70 e0       	ldi	r23, 0x00	; 0
 5ee:	84 e0       	ldi	r24, 0x04	; 4
 5f0:	0c 94 92 00 	jmp	0x124	; 0x124 <_Z15enableInterrupthPFvvEh>

000005f4 <loop>:
}

void loop() {
 5f4:	0f 93       	push	r16
 5f6:	1f 93       	push	r17
 5f8:	cf 93       	push	r28
	char tempCount = 0;
	
	if ((millis() - CountSeconde) > 1000)
 5fa:	0e 94 b5 06 	call	0xd6a	; 0xd6a <millis>
 5fe:	00 91 12 01 	lds	r16, 0x0112	; 0x800112 <__data_end>
 602:	10 91 13 01 	lds	r17, 0x0113	; 0x800113 <__data_end+0x1>
 606:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__data_end+0x2>
 60a:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__data_end+0x3>
 60e:	dc 01       	movw	r26, r24
 610:	cb 01       	movw	r24, r22
 612:	80 1b       	sub	r24, r16
 614:	91 0b       	sbc	r25, r17
 616:	a2 0b       	sbc	r26, r18
 618:	b3 0b       	sbc	r27, r19
 61a:	89 3e       	cpi	r24, 0xE9	; 233
 61c:	93 40       	sbci	r25, 0x03	; 3
 61e:	a1 05       	cpc	r26, r1
 620:	b1 05       	cpc	r27, r1
 622:	40 f1       	brcs	.+80     	; 0x674 <loop+0x80>
	{
		tempCount = CountDemiTour;
 624:	c0 91 19 01 	lds	r28, 0x0119	; 0x800119 <CountDemiTour>
		
		CountSeconde = millis();
 628:	0e 94 b5 06 	call	0xd6a	; 0xd6a <millis>
 62c:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <__data_end>
 630:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <__data_end+0x1>
 634:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end+0x2>
 638:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x3>
		NbDetectionParSec = (tempCount - MemoCountDemiTour);
 63c:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <MemoCountDemiTour>
 640:	6c 2f       	mov	r22, r28
 642:	68 1b       	sub	r22, r24
 644:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <NbDetectionParSec>
		//NbTourParSec = (float) (NbDetectionParSec / 2);
		//NbTourParHeure = (NbTourParSec * 3600);		// tour/heure
		//Vitesse = NbTourParHeure * DIAMETRE_ROUE_M; // m/heure
		//Vitesse = Vitesse / 1000; //km/heure
		
		Vitesse = (unsigned char) ((float) NbDetectionParSec * 1.8f * DIAMETRE_ROUE_M);
 648:	70 e0       	ldi	r23, 0x00	; 0
 64a:	80 e0       	ldi	r24, 0x00	; 0
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	0e 94 6d 03 	call	0x6da	; 0x6da <__floatunsisf>
 652:	26 e6       	ldi	r18, 0x66	; 102
 654:	36 e6       	ldi	r19, 0x66	; 102
 656:	46 ee       	ldi	r20, 0xE6	; 230
 658:	5f e3       	ldi	r21, 0x3F	; 63
 65a:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <__mulsf3>
 65e:	20 e0       	ldi	r18, 0x00	; 0
 660:	30 e0       	ldi	r19, 0x00	; 0
 662:	a9 01       	movw	r20, r18
 664:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <__mulsf3>
 668:	0e 94 3e 03 	call	0x67c	; 0x67c <__fixunssfsi>
 66c:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <Vitesse>
		
		
		MemoCountDemiTour = tempCount;
 670:	c0 93 17 01 	sts	0x0117, r28	; 0x800117 <MemoCountDemiTour>
	}
}
 674:	cf 91       	pop	r28
 676:	1f 91       	pop	r17
 678:	0f 91       	pop	r16
 67a:	08 95       	ret

0000067c <__fixunssfsi>:
 67c:	0e 94 b2 03 	call	0x764	; 0x764 <__fp_splitA>
 680:	88 f0       	brcs	.+34     	; 0x6a4 <__fixunssfsi+0x28>
 682:	9f 57       	subi	r25, 0x7F	; 127
 684:	98 f0       	brcs	.+38     	; 0x6ac <__fixunssfsi+0x30>
 686:	b9 2f       	mov	r27, r25
 688:	99 27       	eor	r25, r25
 68a:	b7 51       	subi	r27, 0x17	; 23
 68c:	b0 f0       	brcs	.+44     	; 0x6ba <__fixunssfsi+0x3e>
 68e:	e1 f0       	breq	.+56     	; 0x6c8 <__fixunssfsi+0x4c>
 690:	66 0f       	add	r22, r22
 692:	77 1f       	adc	r23, r23
 694:	88 1f       	adc	r24, r24
 696:	99 1f       	adc	r25, r25
 698:	1a f0       	brmi	.+6      	; 0x6a0 <__fixunssfsi+0x24>
 69a:	ba 95       	dec	r27
 69c:	c9 f7       	brne	.-14     	; 0x690 <__fixunssfsi+0x14>
 69e:	14 c0       	rjmp	.+40     	; 0x6c8 <__fixunssfsi+0x4c>
 6a0:	b1 30       	cpi	r27, 0x01	; 1
 6a2:	91 f0       	breq	.+36     	; 0x6c8 <__fixunssfsi+0x4c>
 6a4:	0e 94 cc 03 	call	0x798	; 0x798 <__fp_zero>
 6a8:	b1 e0       	ldi	r27, 0x01	; 1
 6aa:	08 95       	ret
 6ac:	0c 94 cc 03 	jmp	0x798	; 0x798 <__fp_zero>
 6b0:	67 2f       	mov	r22, r23
 6b2:	78 2f       	mov	r23, r24
 6b4:	88 27       	eor	r24, r24
 6b6:	b8 5f       	subi	r27, 0xF8	; 248
 6b8:	39 f0       	breq	.+14     	; 0x6c8 <__fixunssfsi+0x4c>
 6ba:	b9 3f       	cpi	r27, 0xF9	; 249
 6bc:	cc f3       	brlt	.-14     	; 0x6b0 <__fixunssfsi+0x34>
 6be:	86 95       	lsr	r24
 6c0:	77 95       	ror	r23
 6c2:	67 95       	ror	r22
 6c4:	b3 95       	inc	r27
 6c6:	d9 f7       	brne	.-10     	; 0x6be <__fixunssfsi+0x42>
 6c8:	3e f4       	brtc	.+14     	; 0x6d8 <__fixunssfsi+0x5c>
 6ca:	90 95       	com	r25
 6cc:	80 95       	com	r24
 6ce:	70 95       	com	r23
 6d0:	61 95       	neg	r22
 6d2:	7f 4f       	sbci	r23, 0xFF	; 255
 6d4:	8f 4f       	sbci	r24, 0xFF	; 255
 6d6:	9f 4f       	sbci	r25, 0xFF	; 255
 6d8:	08 95       	ret

000006da <__floatunsisf>:
 6da:	e8 94       	clt
 6dc:	09 c0       	rjmp	.+18     	; 0x6f0 <__floatsisf+0x12>

000006de <__floatsisf>:
 6de:	97 fb       	bst	r25, 7
 6e0:	3e f4       	brtc	.+14     	; 0x6f0 <__floatsisf+0x12>
 6e2:	90 95       	com	r25
 6e4:	80 95       	com	r24
 6e6:	70 95       	com	r23
 6e8:	61 95       	neg	r22
 6ea:	7f 4f       	sbci	r23, 0xFF	; 255
 6ec:	8f 4f       	sbci	r24, 0xFF	; 255
 6ee:	9f 4f       	sbci	r25, 0xFF	; 255
 6f0:	99 23       	and	r25, r25
 6f2:	a9 f0       	breq	.+42     	; 0x71e <__floatsisf+0x40>
 6f4:	f9 2f       	mov	r31, r25
 6f6:	96 e9       	ldi	r25, 0x96	; 150
 6f8:	bb 27       	eor	r27, r27
 6fa:	93 95       	inc	r25
 6fc:	f6 95       	lsr	r31
 6fe:	87 95       	ror	r24
 700:	77 95       	ror	r23
 702:	67 95       	ror	r22
 704:	b7 95       	ror	r27
 706:	f1 11       	cpse	r31, r1
 708:	f8 cf       	rjmp	.-16     	; 0x6fa <__floatsisf+0x1c>
 70a:	fa f4       	brpl	.+62     	; 0x74a <__floatsisf+0x6c>
 70c:	bb 0f       	add	r27, r27
 70e:	11 f4       	brne	.+4      	; 0x714 <__floatsisf+0x36>
 710:	60 ff       	sbrs	r22, 0
 712:	1b c0       	rjmp	.+54     	; 0x74a <__floatsisf+0x6c>
 714:	6f 5f       	subi	r22, 0xFF	; 255
 716:	7f 4f       	sbci	r23, 0xFF	; 255
 718:	8f 4f       	sbci	r24, 0xFF	; 255
 71a:	9f 4f       	sbci	r25, 0xFF	; 255
 71c:	16 c0       	rjmp	.+44     	; 0x74a <__floatsisf+0x6c>
 71e:	88 23       	and	r24, r24
 720:	11 f0       	breq	.+4      	; 0x726 <__floatsisf+0x48>
 722:	96 e9       	ldi	r25, 0x96	; 150
 724:	11 c0       	rjmp	.+34     	; 0x748 <__floatsisf+0x6a>
 726:	77 23       	and	r23, r23
 728:	21 f0       	breq	.+8      	; 0x732 <__floatsisf+0x54>
 72a:	9e e8       	ldi	r25, 0x8E	; 142
 72c:	87 2f       	mov	r24, r23
 72e:	76 2f       	mov	r23, r22
 730:	05 c0       	rjmp	.+10     	; 0x73c <__floatsisf+0x5e>
 732:	66 23       	and	r22, r22
 734:	71 f0       	breq	.+28     	; 0x752 <__floatsisf+0x74>
 736:	96 e8       	ldi	r25, 0x86	; 134
 738:	86 2f       	mov	r24, r22
 73a:	70 e0       	ldi	r23, 0x00	; 0
 73c:	60 e0       	ldi	r22, 0x00	; 0
 73e:	2a f0       	brmi	.+10     	; 0x74a <__floatsisf+0x6c>
 740:	9a 95       	dec	r25
 742:	66 0f       	add	r22, r22
 744:	77 1f       	adc	r23, r23
 746:	88 1f       	adc	r24, r24
 748:	da f7       	brpl	.-10     	; 0x740 <__floatsisf+0x62>
 74a:	88 0f       	add	r24, r24
 74c:	96 95       	lsr	r25
 74e:	87 95       	ror	r24
 750:	97 f9       	bld	r25, 7
 752:	08 95       	ret

00000754 <__fp_split3>:
 754:	57 fd       	sbrc	r21, 7
 756:	90 58       	subi	r25, 0x80	; 128
 758:	44 0f       	add	r20, r20
 75a:	55 1f       	adc	r21, r21
 75c:	59 f0       	breq	.+22     	; 0x774 <__fp_splitA+0x10>
 75e:	5f 3f       	cpi	r21, 0xFF	; 255
 760:	71 f0       	breq	.+28     	; 0x77e <__fp_splitA+0x1a>
 762:	47 95       	ror	r20

00000764 <__fp_splitA>:
 764:	88 0f       	add	r24, r24
 766:	97 fb       	bst	r25, 7
 768:	99 1f       	adc	r25, r25
 76a:	61 f0       	breq	.+24     	; 0x784 <__fp_splitA+0x20>
 76c:	9f 3f       	cpi	r25, 0xFF	; 255
 76e:	79 f0       	breq	.+30     	; 0x78e <__fp_splitA+0x2a>
 770:	87 95       	ror	r24
 772:	08 95       	ret
 774:	12 16       	cp	r1, r18
 776:	13 06       	cpc	r1, r19
 778:	14 06       	cpc	r1, r20
 77a:	55 1f       	adc	r21, r21
 77c:	f2 cf       	rjmp	.-28     	; 0x762 <__fp_split3+0xe>
 77e:	46 95       	lsr	r20
 780:	f1 df       	rcall	.-30     	; 0x764 <__fp_splitA>
 782:	08 c0       	rjmp	.+16     	; 0x794 <__fp_splitA+0x30>
 784:	16 16       	cp	r1, r22
 786:	17 06       	cpc	r1, r23
 788:	18 06       	cpc	r1, r24
 78a:	99 1f       	adc	r25, r25
 78c:	f1 cf       	rjmp	.-30     	; 0x770 <__fp_splitA+0xc>
 78e:	86 95       	lsr	r24
 790:	71 05       	cpc	r23, r1
 792:	61 05       	cpc	r22, r1
 794:	08 94       	sec
 796:	08 95       	ret

00000798 <__fp_zero>:
 798:	e8 94       	clt

0000079a <__fp_szero>:
 79a:	bb 27       	eor	r27, r27
 79c:	66 27       	eor	r22, r22
 79e:	77 27       	eor	r23, r23
 7a0:	cb 01       	movw	r24, r22
 7a2:	97 f9       	bld	r25, 7
 7a4:	08 95       	ret

000007a6 <__mulsf3>:
 7a6:	0e 94 e6 03 	call	0x7cc	; 0x7cc <__mulsf3x>
 7aa:	0c 94 57 04 	jmp	0x8ae	; 0x8ae <__fp_round>
 7ae:	0e 94 49 04 	call	0x892	; 0x892 <__fp_pscA>
 7b2:	38 f0       	brcs	.+14     	; 0x7c2 <__mulsf3+0x1c>
 7b4:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__fp_pscB>
 7b8:	20 f0       	brcs	.+8      	; 0x7c2 <__mulsf3+0x1c>
 7ba:	95 23       	and	r25, r21
 7bc:	11 f0       	breq	.+4      	; 0x7c2 <__mulsf3+0x1c>
 7be:	0c 94 40 04 	jmp	0x880	; 0x880 <__fp_inf>
 7c2:	0c 94 46 04 	jmp	0x88c	; 0x88c <__fp_nan>
 7c6:	11 24       	eor	r1, r1
 7c8:	0c 94 cd 03 	jmp	0x79a	; 0x79a <__fp_szero>

000007cc <__mulsf3x>:
 7cc:	0e 94 aa 03 	call	0x754	; 0x754 <__fp_split3>
 7d0:	70 f3       	brcs	.-36     	; 0x7ae <__mulsf3+0x8>

000007d2 <__mulsf3_pse>:
 7d2:	95 9f       	mul	r25, r21
 7d4:	c1 f3       	breq	.-16     	; 0x7c6 <__mulsf3+0x20>
 7d6:	95 0f       	add	r25, r21
 7d8:	50 e0       	ldi	r21, 0x00	; 0
 7da:	55 1f       	adc	r21, r21
 7dc:	62 9f       	mul	r22, r18
 7de:	f0 01       	movw	r30, r0
 7e0:	72 9f       	mul	r23, r18
 7e2:	bb 27       	eor	r27, r27
 7e4:	f0 0d       	add	r31, r0
 7e6:	b1 1d       	adc	r27, r1
 7e8:	63 9f       	mul	r22, r19
 7ea:	aa 27       	eor	r26, r26
 7ec:	f0 0d       	add	r31, r0
 7ee:	b1 1d       	adc	r27, r1
 7f0:	aa 1f       	adc	r26, r26
 7f2:	64 9f       	mul	r22, r20
 7f4:	66 27       	eor	r22, r22
 7f6:	b0 0d       	add	r27, r0
 7f8:	a1 1d       	adc	r26, r1
 7fa:	66 1f       	adc	r22, r22
 7fc:	82 9f       	mul	r24, r18
 7fe:	22 27       	eor	r18, r18
 800:	b0 0d       	add	r27, r0
 802:	a1 1d       	adc	r26, r1
 804:	62 1f       	adc	r22, r18
 806:	73 9f       	mul	r23, r19
 808:	b0 0d       	add	r27, r0
 80a:	a1 1d       	adc	r26, r1
 80c:	62 1f       	adc	r22, r18
 80e:	83 9f       	mul	r24, r19
 810:	a0 0d       	add	r26, r0
 812:	61 1d       	adc	r22, r1
 814:	22 1f       	adc	r18, r18
 816:	74 9f       	mul	r23, r20
 818:	33 27       	eor	r19, r19
 81a:	a0 0d       	add	r26, r0
 81c:	61 1d       	adc	r22, r1
 81e:	23 1f       	adc	r18, r19
 820:	84 9f       	mul	r24, r20
 822:	60 0d       	add	r22, r0
 824:	21 1d       	adc	r18, r1
 826:	82 2f       	mov	r24, r18
 828:	76 2f       	mov	r23, r22
 82a:	6a 2f       	mov	r22, r26
 82c:	11 24       	eor	r1, r1
 82e:	9f 57       	subi	r25, 0x7F	; 127
 830:	50 40       	sbci	r21, 0x00	; 0
 832:	9a f0       	brmi	.+38     	; 0x85a <__mulsf3_pse+0x88>
 834:	f1 f0       	breq	.+60     	; 0x872 <__mulsf3_pse+0xa0>
 836:	88 23       	and	r24, r24
 838:	4a f0       	brmi	.+18     	; 0x84c <__mulsf3_pse+0x7a>
 83a:	ee 0f       	add	r30, r30
 83c:	ff 1f       	adc	r31, r31
 83e:	bb 1f       	adc	r27, r27
 840:	66 1f       	adc	r22, r22
 842:	77 1f       	adc	r23, r23
 844:	88 1f       	adc	r24, r24
 846:	91 50       	subi	r25, 0x01	; 1
 848:	50 40       	sbci	r21, 0x00	; 0
 84a:	a9 f7       	brne	.-22     	; 0x836 <__mulsf3_pse+0x64>
 84c:	9e 3f       	cpi	r25, 0xFE	; 254
 84e:	51 05       	cpc	r21, r1
 850:	80 f0       	brcs	.+32     	; 0x872 <__mulsf3_pse+0xa0>
 852:	0c 94 40 04 	jmp	0x880	; 0x880 <__fp_inf>
 856:	0c 94 cd 03 	jmp	0x79a	; 0x79a <__fp_szero>
 85a:	5f 3f       	cpi	r21, 0xFF	; 255
 85c:	e4 f3       	brlt	.-8      	; 0x856 <__mulsf3_pse+0x84>
 85e:	98 3e       	cpi	r25, 0xE8	; 232
 860:	d4 f3       	brlt	.-12     	; 0x856 <__mulsf3_pse+0x84>
 862:	86 95       	lsr	r24
 864:	77 95       	ror	r23
 866:	67 95       	ror	r22
 868:	b7 95       	ror	r27
 86a:	f7 95       	ror	r31
 86c:	e7 95       	ror	r30
 86e:	9f 5f       	subi	r25, 0xFF	; 255
 870:	c1 f7       	brne	.-16     	; 0x862 <__mulsf3_pse+0x90>
 872:	fe 2b       	or	r31, r30
 874:	88 0f       	add	r24, r24
 876:	91 1d       	adc	r25, r1
 878:	96 95       	lsr	r25
 87a:	87 95       	ror	r24
 87c:	97 f9       	bld	r25, 7
 87e:	08 95       	ret

00000880 <__fp_inf>:
 880:	97 f9       	bld	r25, 7
 882:	9f 67       	ori	r25, 0x7F	; 127
 884:	80 e8       	ldi	r24, 0x80	; 128
 886:	70 e0       	ldi	r23, 0x00	; 0
 888:	60 e0       	ldi	r22, 0x00	; 0
 88a:	08 95       	ret

0000088c <__fp_nan>:
 88c:	9f ef       	ldi	r25, 0xFF	; 255
 88e:	80 ec       	ldi	r24, 0xC0	; 192
 890:	08 95       	ret

00000892 <__fp_pscA>:
 892:	00 24       	eor	r0, r0
 894:	0a 94       	dec	r0
 896:	16 16       	cp	r1, r22
 898:	17 06       	cpc	r1, r23
 89a:	18 06       	cpc	r1, r24
 89c:	09 06       	cpc	r0, r25
 89e:	08 95       	ret

000008a0 <__fp_pscB>:
 8a0:	00 24       	eor	r0, r0
 8a2:	0a 94       	dec	r0
 8a4:	12 16       	cp	r1, r18
 8a6:	13 06       	cpc	r1, r19
 8a8:	14 06       	cpc	r1, r20
 8aa:	05 06       	cpc	r0, r21
 8ac:	08 95       	ret

000008ae <__fp_round>:
 8ae:	09 2e       	mov	r0, r25
 8b0:	03 94       	inc	r0
 8b2:	00 0c       	add	r0, r0
 8b4:	11 f4       	brne	.+4      	; 0x8ba <__fp_round+0xc>
 8b6:	88 23       	and	r24, r24
 8b8:	52 f0       	brmi	.+20     	; 0x8ce <__fp_round+0x20>
 8ba:	bb 0f       	add	r27, r27
 8bc:	40 f4       	brcc	.+16     	; 0x8ce <__fp_round+0x20>
 8be:	bf 2b       	or	r27, r31
 8c0:	11 f4       	brne	.+4      	; 0x8c6 <__fp_round+0x18>
 8c2:	60 ff       	sbrs	r22, 0
 8c4:	04 c0       	rjmp	.+8      	; 0x8ce <__fp_round+0x20>
 8c6:	6f 5f       	subi	r22, 0xFF	; 255
 8c8:	7f 4f       	sbci	r23, 0xFF	; 255
 8ca:	8f 4f       	sbci	r24, 0xFF	; 255
 8cc:	9f 4f       	sbci	r25, 0xFF	; 255
 8ce:	08 95       	ret

000008d0 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 8d0:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 8d2:	91 8d       	ldd	r25, Z+25	; 0x19
 8d4:	22 8d       	ldd	r18, Z+26	; 0x1a
 8d6:	89 2f       	mov	r24, r25
 8d8:	90 e0       	ldi	r25, 0x00	; 0
 8da:	80 5c       	subi	r24, 0xC0	; 192
 8dc:	9f 4f       	sbci	r25, 0xFF	; 255
 8de:	82 1b       	sub	r24, r18
 8e0:	91 09       	sbc	r25, r1
}
 8e2:	8f 73       	andi	r24, 0x3F	; 63
 8e4:	99 27       	eor	r25, r25
 8e6:	08 95       	ret

000008e8 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 8e8:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 8ea:	91 8d       	ldd	r25, Z+25	; 0x19
 8ec:	82 8d       	ldd	r24, Z+26	; 0x1a
 8ee:	98 17       	cp	r25, r24
 8f0:	31 f0       	breq	.+12     	; 0x8fe <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 8f2:	82 8d       	ldd	r24, Z+26	; 0x1a
 8f4:	e8 0f       	add	r30, r24
 8f6:	f1 1d       	adc	r31, r1
 8f8:	85 8d       	ldd	r24, Z+29	; 0x1d
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 8fe:	8f ef       	ldi	r24, 0xFF	; 255
 900:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 902:	08 95       	ret

00000904 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 904:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 906:	91 8d       	ldd	r25, Z+25	; 0x19
 908:	82 8d       	ldd	r24, Z+26	; 0x1a
 90a:	98 17       	cp	r25, r24
 90c:	61 f0       	breq	.+24     	; 0x926 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 90e:	82 8d       	ldd	r24, Z+26	; 0x1a
 910:	df 01       	movw	r26, r30
 912:	a8 0f       	add	r26, r24
 914:	b1 1d       	adc	r27, r1
 916:	5d 96       	adiw	r26, 0x1d	; 29
 918:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 91a:	92 8d       	ldd	r25, Z+26	; 0x1a
 91c:	9f 5f       	subi	r25, 0xFF	; 255
 91e:	9f 73       	andi	r25, 0x3F	; 63
 920:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 922:	90 e0       	ldi	r25, 0x00	; 0
 924:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 926:	8f ef       	ldi	r24, 0xFF	; 255
 928:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 92a:	08 95       	ret

0000092c <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
 92c:	fc 01       	movw	r30, r24
 92e:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
 930:	44 8d       	ldd	r20, Z+28	; 0x1c
 932:	25 2f       	mov	r18, r21
 934:	30 e0       	ldi	r19, 0x00	; 0
 936:	84 2f       	mov	r24, r20
 938:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 93a:	82 1b       	sub	r24, r18
 93c:	93 0b       	sbc	r25, r19
 93e:	54 17       	cp	r21, r20
 940:	10 f0       	brcs	.+4      	; 0x946 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
 942:	cf 96       	adiw	r24, 0x3f	; 63
 944:	08 95       	ret
  return tail - head - 1;
 946:	01 97       	sbiw	r24, 0x01	; 1
}
 948:	08 95       	ret

0000094a <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 94a:	8a ef       	ldi	r24, 0xFA	; 250
 94c:	95 e0       	ldi	r25, 0x05	; 5
 94e:	89 2b       	or	r24, r25
 950:	49 f0       	breq	.+18     	; 0x964 <_Z14serialEventRunv+0x1a>
 952:	80 e0       	ldi	r24, 0x00	; 0
 954:	90 e0       	ldi	r25, 0x00	; 0
 956:	89 2b       	or	r24, r25
 958:	29 f0       	breq	.+10     	; 0x964 <_Z14serialEventRunv+0x1a>
 95a:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <_Z17Serial0_availablev>
 95e:	81 11       	cpse	r24, r1
 960:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 964:	08 95       	ret

00000966 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 966:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 968:	84 8d       	ldd	r24, Z+28	; 0x1c
 96a:	df 01       	movw	r26, r30
 96c:	a8 0f       	add	r26, r24
 96e:	b1 1d       	adc	r27, r1
 970:	a3 5a       	subi	r26, 0xA3	; 163
 972:	bf 4f       	sbci	r27, 0xFF	; 255
 974:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 976:	84 8d       	ldd	r24, Z+28	; 0x1c
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	01 96       	adiw	r24, 0x01	; 1
 97c:	8f 73       	andi	r24, 0x3F	; 63
 97e:	99 27       	eor	r25, r25
 980:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 982:	a6 89       	ldd	r26, Z+22	; 0x16
 984:	b7 89       	ldd	r27, Z+23	; 0x17
 986:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 988:	a0 89       	ldd	r26, Z+16	; 0x10
 98a:	b1 89       	ldd	r27, Z+17	; 0x11
 98c:	8c 91       	ld	r24, X
 98e:	80 64       	ori	r24, 0x40	; 64
 990:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 992:	93 8d       	ldd	r25, Z+27	; 0x1b
 994:	84 8d       	ldd	r24, Z+28	; 0x1c
 996:	98 13       	cpse	r25, r24
 998:	06 c0       	rjmp	.+12     	; 0x9a6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 99a:	02 88       	ldd	r0, Z+18	; 0x12
 99c:	f3 89       	ldd	r31, Z+19	; 0x13
 99e:	e0 2d       	mov	r30, r0
 9a0:	80 81       	ld	r24, Z
 9a2:	8f 7d       	andi	r24, 0xDF	; 223
 9a4:	80 83       	st	Z, r24
 9a6:	08 95       	ret

000009a8 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 9a8:	ef 92       	push	r14
 9aa:	ff 92       	push	r15
 9ac:	0f 93       	push	r16
 9ae:	1f 93       	push	r17
 9b0:	cf 93       	push	r28
 9b2:	df 93       	push	r29
 9b4:	ec 01       	movw	r28, r24
  _written = true;
 9b6:	81 e0       	ldi	r24, 0x01	; 1
 9b8:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 9ba:	9b 8d       	ldd	r25, Y+27	; 0x1b
 9bc:	8c 8d       	ldd	r24, Y+28	; 0x1c
 9be:	98 13       	cpse	r25, r24
 9c0:	05 c0       	rjmp	.+10     	; 0x9cc <_ZN14HardwareSerial5writeEh+0x24>
 9c2:	e8 89       	ldd	r30, Y+16	; 0x10
 9c4:	f9 89       	ldd	r31, Y+17	; 0x11
 9c6:	80 81       	ld	r24, Z
 9c8:	85 fd       	sbrc	r24, 5
 9ca:	24 c0       	rjmp	.+72     	; 0xa14 <_ZN14HardwareSerial5writeEh+0x6c>
 9cc:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 9ce:	0b 8d       	ldd	r16, Y+27	; 0x1b
 9d0:	10 e0       	ldi	r17, 0x00	; 0
 9d2:	0f 5f       	subi	r16, 0xFF	; 255
 9d4:	1f 4f       	sbci	r17, 0xFF	; 255
 9d6:	0f 73       	andi	r16, 0x3F	; 63
 9d8:	11 27       	eor	r17, r17
 9da:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 9dc:	8c 8d       	ldd	r24, Y+28	; 0x1c
 9de:	e8 12       	cpse	r14, r24
 9e0:	0c c0       	rjmp	.+24     	; 0x9fa <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 9e2:	0f b6       	in	r0, 0x3f	; 63
 9e4:	07 fc       	sbrc	r0, 7
 9e6:	fa cf       	rjmp	.-12     	; 0x9dc <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 9e8:	e8 89       	ldd	r30, Y+16	; 0x10
 9ea:	f9 89       	ldd	r31, Y+17	; 0x11
 9ec:	80 81       	ld	r24, Z
 9ee:	85 ff       	sbrs	r24, 5
 9f0:	f5 cf       	rjmp	.-22     	; 0x9dc <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 9f2:	ce 01       	movw	r24, r28
 9f4:	0e 94 b3 04 	call	0x966	; 0x966 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 9f8:	f1 cf       	rjmp	.-30     	; 0x9dc <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 9fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
 9fc:	fe 01       	movw	r30, r28
 9fe:	e8 0f       	add	r30, r24
 a00:	f1 1d       	adc	r31, r1
 a02:	e3 5a       	subi	r30, 0xA3	; 163
 a04:	ff 4f       	sbci	r31, 0xFF	; 255
 a06:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 a08:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 a0a:	ea 89       	ldd	r30, Y+18	; 0x12
 a0c:	fb 89       	ldd	r31, Y+19	; 0x13
 a0e:	80 81       	ld	r24, Z
 a10:	80 62       	ori	r24, 0x20	; 32
 a12:	07 c0       	rjmp	.+14     	; 0xa22 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 a14:	ee 89       	ldd	r30, Y+22	; 0x16
 a16:	ff 89       	ldd	r31, Y+23	; 0x17
 a18:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 a1a:	e8 89       	ldd	r30, Y+16	; 0x10
 a1c:	f9 89       	ldd	r31, Y+17	; 0x11
 a1e:	80 81       	ld	r24, Z
 a20:	80 64       	ori	r24, 0x40	; 64
 a22:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 a24:	81 e0       	ldi	r24, 0x01	; 1
 a26:	90 e0       	ldi	r25, 0x00	; 0
 a28:	df 91       	pop	r29
 a2a:	cf 91       	pop	r28
 a2c:	1f 91       	pop	r17
 a2e:	0f 91       	pop	r16
 a30:	ff 90       	pop	r15
 a32:	ef 90       	pop	r14
 a34:	08 95       	ret

00000a36 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 a36:	cf 93       	push	r28
 a38:	df 93       	push	r29
 a3a:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 a3c:	88 8d       	ldd	r24, Y+24	; 0x18
 a3e:	88 23       	and	r24, r24
 a40:	c9 f0       	breq	.+50     	; 0xa74 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 a42:	ea 89       	ldd	r30, Y+18	; 0x12
 a44:	fb 89       	ldd	r31, Y+19	; 0x13
 a46:	80 81       	ld	r24, Z
 a48:	85 fd       	sbrc	r24, 5
 a4a:	05 c0       	rjmp	.+10     	; 0xa56 <_ZN14HardwareSerial5flushEv+0x20>
 a4c:	a8 89       	ldd	r26, Y+16	; 0x10
 a4e:	b9 89       	ldd	r27, Y+17	; 0x11
 a50:	8c 91       	ld	r24, X
 a52:	86 fd       	sbrc	r24, 6
 a54:	0f c0       	rjmp	.+30     	; 0xa74 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 a56:	0f b6       	in	r0, 0x3f	; 63
 a58:	07 fc       	sbrc	r0, 7
 a5a:	f5 cf       	rjmp	.-22     	; 0xa46 <_ZN14HardwareSerial5flushEv+0x10>
 a5c:	80 81       	ld	r24, Z
 a5e:	85 ff       	sbrs	r24, 5
 a60:	f2 cf       	rjmp	.-28     	; 0xa46 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 a62:	a8 89       	ldd	r26, Y+16	; 0x10
 a64:	b9 89       	ldd	r27, Y+17	; 0x11
 a66:	8c 91       	ld	r24, X
 a68:	85 ff       	sbrs	r24, 5
 a6a:	ed cf       	rjmp	.-38     	; 0xa46 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 a6c:	ce 01       	movw	r24, r28
 a6e:	0e 94 b3 04 	call	0x966	; 0x966 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 a72:	e7 cf       	rjmp	.-50     	; 0xa42 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 a74:	df 91       	pop	r29
 a76:	cf 91       	pop	r28
 a78:	08 95       	ret

00000a7a <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 a7a:	cf 92       	push	r12
 a7c:	df 92       	push	r13
 a7e:	ef 92       	push	r14
 a80:	ff 92       	push	r15
 a82:	1f 93       	push	r17
 a84:	cf 93       	push	r28
 a86:	df 93       	push	r29
 a88:	ec 01       	movw	r28, r24
 a8a:	6a 01       	movw	r12, r20
 a8c:	7b 01       	movw	r14, r22
 a8e:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 a90:	e8 89       	ldd	r30, Y+16	; 0x10
 a92:	f9 89       	ldd	r31, Y+17	; 0x11
 a94:	82 e0       	ldi	r24, 0x02	; 2
 a96:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 a98:	41 15       	cp	r20, r1
 a9a:	51 4e       	sbci	r21, 0xE1	; 225
 a9c:	61 05       	cpc	r22, r1
 a9e:	71 05       	cpc	r23, r1
 aa0:	b1 f0       	breq	.+44     	; 0xace <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 aa2:	60 e0       	ldi	r22, 0x00	; 0
 aa4:	79 e0       	ldi	r23, 0x09	; 9
 aa6:	8d e3       	ldi	r24, 0x3D	; 61
 aa8:	90 e0       	ldi	r25, 0x00	; 0
 aaa:	a7 01       	movw	r20, r14
 aac:	96 01       	movw	r18, r12
 aae:	0e 94 38 07 	call	0xe70	; 0xe70 <__udivmodsi4>
 ab2:	da 01       	movw	r26, r20
 ab4:	c9 01       	movw	r24, r18
 ab6:	01 97       	sbiw	r24, 0x01	; 1
 ab8:	a1 09       	sbc	r26, r1
 aba:	b1 09       	sbc	r27, r1
 abc:	b6 95       	lsr	r27
 abe:	a7 95       	ror	r26
 ac0:	97 95       	ror	r25
 ac2:	87 95       	ror	r24
 ac4:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 ac6:	21 15       	cp	r18, r1
 ac8:	80 e1       	ldi	r24, 0x10	; 16
 aca:	38 07       	cpc	r19, r24
 acc:	a8 f0       	brcs	.+42     	; 0xaf8 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
 ace:	e8 89       	ldd	r30, Y+16	; 0x10
 ad0:	f9 89       	ldd	r31, Y+17	; 0x11
 ad2:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 ad4:	60 e8       	ldi	r22, 0x80	; 128
 ad6:	74 e8       	ldi	r23, 0x84	; 132
 ad8:	8e e1       	ldi	r24, 0x1E	; 30
 ada:	90 e0       	ldi	r25, 0x00	; 0
 adc:	a7 01       	movw	r20, r14
 ade:	96 01       	movw	r18, r12
 ae0:	0e 94 38 07 	call	0xe70	; 0xe70 <__udivmodsi4>
 ae4:	da 01       	movw	r26, r20
 ae6:	c9 01       	movw	r24, r18
 ae8:	01 97       	sbiw	r24, 0x01	; 1
 aea:	a1 09       	sbc	r26, r1
 aec:	b1 09       	sbc	r27, r1
 aee:	b6 95       	lsr	r27
 af0:	a7 95       	ror	r26
 af2:	97 95       	ror	r25
 af4:	87 95       	ror	r24
 af6:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 af8:	ec 85       	ldd	r30, Y+12	; 0x0c
 afa:	fd 85       	ldd	r31, Y+13	; 0x0d
 afc:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 afe:	ee 85       	ldd	r30, Y+14	; 0x0e
 b00:	ff 85       	ldd	r31, Y+15	; 0x0f
 b02:	20 83       	st	Z, r18

  _written = false;
 b04:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 b06:	ec 89       	ldd	r30, Y+20	; 0x14
 b08:	fd 89       	ldd	r31, Y+21	; 0x15
 b0a:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 b0c:	ea 89       	ldd	r30, Y+18	; 0x12
 b0e:	fb 89       	ldd	r31, Y+19	; 0x13
 b10:	80 81       	ld	r24, Z
 b12:	80 61       	ori	r24, 0x10	; 16
 b14:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 b16:	ea 89       	ldd	r30, Y+18	; 0x12
 b18:	fb 89       	ldd	r31, Y+19	; 0x13
 b1a:	80 81       	ld	r24, Z
 b1c:	88 60       	ori	r24, 0x08	; 8
 b1e:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 b20:	ea 89       	ldd	r30, Y+18	; 0x12
 b22:	fb 89       	ldd	r31, Y+19	; 0x13
 b24:	80 81       	ld	r24, Z
 b26:	80 68       	ori	r24, 0x80	; 128
 b28:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 b2a:	ea 89       	ldd	r30, Y+18	; 0x12
 b2c:	fb 89       	ldd	r31, Y+19	; 0x13
 b2e:	80 81       	ld	r24, Z
 b30:	8f 7d       	andi	r24, 0xDF	; 223
 b32:	80 83       	st	Z, r24
}
 b34:	df 91       	pop	r29
 b36:	cf 91       	pop	r28
 b38:	1f 91       	pop	r17
 b3a:	ff 90       	pop	r15
 b3c:	ef 90       	pop	r14
 b3e:	df 90       	pop	r13
 b40:	cf 90       	pop	r12
 b42:	08 95       	ret

00000b44 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 b44:	1f 92       	push	r1
 b46:	0f 92       	push	r0
 b48:	0f b6       	in	r0, 0x3f	; 63
 b4a:	0f 92       	push	r0
 b4c:	11 24       	eor	r1, r1
 b4e:	2f 93       	push	r18
 b50:	8f 93       	push	r24
 b52:	9f 93       	push	r25
 b54:	ef 93       	push	r30
 b56:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 b58:	e0 91 61 01 	lds	r30, 0x0161	; 0x800161 <Serial+0x10>
 b5c:	f0 91 62 01 	lds	r31, 0x0162	; 0x800162 <Serial+0x11>
 b60:	80 81       	ld	r24, Z
 b62:	e0 91 67 01 	lds	r30, 0x0167	; 0x800167 <Serial+0x16>
 b66:	f0 91 68 01 	lds	r31, 0x0168	; 0x800168 <Serial+0x17>
 b6a:	82 fd       	sbrc	r24, 2
 b6c:	12 c0       	rjmp	.+36     	; 0xb92 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 b6e:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 b70:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <Serial+0x19>
 b74:	8f 5f       	subi	r24, 0xFF	; 255
 b76:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 b78:	20 91 6b 01 	lds	r18, 0x016B	; 0x80016b <Serial+0x1a>
 b7c:	82 17       	cp	r24, r18
 b7e:	51 f0       	breq	.+20     	; 0xb94 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 b80:	e0 91 6a 01 	lds	r30, 0x016A	; 0x80016a <Serial+0x19>
 b84:	f0 e0       	ldi	r31, 0x00	; 0
 b86:	ef 5a       	subi	r30, 0xAF	; 175
 b88:	fe 4f       	sbci	r31, 0xFE	; 254
 b8a:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 b8c:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <Serial+0x19>
 b90:	01 c0       	rjmp	.+2      	; 0xb94 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 b92:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 b94:	ff 91       	pop	r31
 b96:	ef 91       	pop	r30
 b98:	9f 91       	pop	r25
 b9a:	8f 91       	pop	r24
 b9c:	2f 91       	pop	r18
 b9e:	0f 90       	pop	r0
 ba0:	0f be       	out	0x3f, r0	; 63
 ba2:	0f 90       	pop	r0
 ba4:	1f 90       	pop	r1
 ba6:	18 95       	reti

00000ba8 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 ba8:	1f 92       	push	r1
 baa:	0f 92       	push	r0
 bac:	0f b6       	in	r0, 0x3f	; 63
 bae:	0f 92       	push	r0
 bb0:	11 24       	eor	r1, r1
 bb2:	2f 93       	push	r18
 bb4:	3f 93       	push	r19
 bb6:	4f 93       	push	r20
 bb8:	5f 93       	push	r21
 bba:	6f 93       	push	r22
 bbc:	7f 93       	push	r23
 bbe:	8f 93       	push	r24
 bc0:	9f 93       	push	r25
 bc2:	af 93       	push	r26
 bc4:	bf 93       	push	r27
 bc6:	ef 93       	push	r30
 bc8:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 bca:	81 e5       	ldi	r24, 0x51	; 81
 bcc:	91 e0       	ldi	r25, 0x01	; 1
 bce:	0e 94 b3 04 	call	0x966	; 0x966 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 bd2:	ff 91       	pop	r31
 bd4:	ef 91       	pop	r30
 bd6:	bf 91       	pop	r27
 bd8:	af 91       	pop	r26
 bda:	9f 91       	pop	r25
 bdc:	8f 91       	pop	r24
 bde:	7f 91       	pop	r23
 be0:	6f 91       	pop	r22
 be2:	5f 91       	pop	r21
 be4:	4f 91       	pop	r20
 be6:	3f 91       	pop	r19
 be8:	2f 91       	pop	r18
 bea:	0f 90       	pop	r0
 bec:	0f be       	out	0x3f, r0	; 63
 bee:	0f 90       	pop	r0
 bf0:	1f 90       	pop	r1
 bf2:	18 95       	reti

00000bf4 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 bf4:	81 e5       	ldi	r24, 0x51	; 81
 bf6:	91 e0       	ldi	r25, 0x01	; 1
 bf8:	0e 94 68 04 	call	0x8d0	; 0x8d0 <_ZN14HardwareSerial9availableEv>
 bfc:	21 e0       	ldi	r18, 0x01	; 1
 bfe:	89 2b       	or	r24, r25
 c00:	09 f4       	brne	.+2      	; 0xc04 <_Z17Serial0_availablev+0x10>
 c02:	20 e0       	ldi	r18, 0x00	; 0
}
 c04:	82 2f       	mov	r24, r18
 c06:	08 95       	ret

00000c08 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 c08:	e1 e5       	ldi	r30, 0x51	; 81
 c0a:	f1 e0       	ldi	r31, 0x01	; 1
 c0c:	13 82       	std	Z+3, r1	; 0x03
 c0e:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 c10:	88 ee       	ldi	r24, 0xE8	; 232
 c12:	93 e0       	ldi	r25, 0x03	; 3
 c14:	a0 e0       	ldi	r26, 0x00	; 0
 c16:	b0 e0       	ldi	r27, 0x00	; 0
 c18:	84 83       	std	Z+4, r24	; 0x04
 c1a:	95 83       	std	Z+5, r25	; 0x05
 c1c:	a6 83       	std	Z+6, r26	; 0x06
 c1e:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 c20:	84 e0       	ldi	r24, 0x04	; 4
 c22:	91 e0       	ldi	r25, 0x01	; 1
 c24:	91 83       	std	Z+1, r25	; 0x01
 c26:	80 83       	st	Z, r24
 c28:	85 ec       	ldi	r24, 0xC5	; 197
 c2a:	90 e0       	ldi	r25, 0x00	; 0
 c2c:	95 87       	std	Z+13, r25	; 0x0d
 c2e:	84 87       	std	Z+12, r24	; 0x0c
 c30:	84 ec       	ldi	r24, 0xC4	; 196
 c32:	90 e0       	ldi	r25, 0x00	; 0
 c34:	97 87       	std	Z+15, r25	; 0x0f
 c36:	86 87       	std	Z+14, r24	; 0x0e
 c38:	80 ec       	ldi	r24, 0xC0	; 192
 c3a:	90 e0       	ldi	r25, 0x00	; 0
 c3c:	91 8b       	std	Z+17, r25	; 0x11
 c3e:	80 8b       	std	Z+16, r24	; 0x10
 c40:	81 ec       	ldi	r24, 0xC1	; 193
 c42:	90 e0       	ldi	r25, 0x00	; 0
 c44:	93 8b       	std	Z+19, r25	; 0x13
 c46:	82 8b       	std	Z+18, r24	; 0x12
 c48:	82 ec       	ldi	r24, 0xC2	; 194
 c4a:	90 e0       	ldi	r25, 0x00	; 0
 c4c:	95 8b       	std	Z+21, r25	; 0x15
 c4e:	84 8b       	std	Z+20, r24	; 0x14
 c50:	86 ec       	ldi	r24, 0xC6	; 198
 c52:	90 e0       	ldi	r25, 0x00	; 0
 c54:	97 8b       	std	Z+23, r25	; 0x17
 c56:	86 8b       	std	Z+22, r24	; 0x16
 c58:	11 8e       	std	Z+25, r1	; 0x19
 c5a:	12 8e       	std	Z+26, r1	; 0x1a
 c5c:	13 8e       	std	Z+27, r1	; 0x1b
 c5e:	14 8e       	std	Z+28, r1	; 0x1c
 c60:	08 95       	ret

00000c62 <initVariant>:
 c62:	08 95       	ret

00000c64 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 c64:	0e 94 c1 06 	call	0xd82	; 0xd82 <init>

	initVariant();
 c68:	0e 94 31 06 	call	0xc62	; 0xc62 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 c6c:	0e 94 e7 02 	call	0x5ce	; 0x5ce <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 c70:	c5 ea       	ldi	r28, 0xA5	; 165
 c72:	d4 e0       	ldi	r29, 0x04	; 4
#endif
	
	setup();
    
	for (;;) {
		loop();
 c74:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <loop>
		if (serialEventRun) serialEventRun();
 c78:	20 97       	sbiw	r28, 0x00	; 0
 c7a:	e1 f3       	breq	.-8      	; 0xc74 <main+0x10>
 c7c:	0e 94 a5 04 	call	0x94a	; 0x94a <_Z14serialEventRunv>
 c80:	f9 cf       	rjmp	.-14     	; 0xc74 <main+0x10>

00000c82 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 c82:	cf 92       	push	r12
 c84:	df 92       	push	r13
 c86:	ef 92       	push	r14
 c88:	ff 92       	push	r15
 c8a:	0f 93       	push	r16
 c8c:	1f 93       	push	r17
 c8e:	cf 93       	push	r28
 c90:	df 93       	push	r29
 c92:	6c 01       	movw	r12, r24
 c94:	7a 01       	movw	r14, r20
 c96:	8b 01       	movw	r16, r22
  size_t n = 0;
 c98:	c0 e0       	ldi	r28, 0x00	; 0
 c9a:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
 c9c:	ce 15       	cp	r28, r14
 c9e:	df 05       	cpc	r29, r15
 ca0:	81 f0       	breq	.+32     	; 0xcc2 <_ZN5Print5writeEPKhj+0x40>
    if (write(*buffer++)) n++;
 ca2:	d8 01       	movw	r26, r16
 ca4:	6d 91       	ld	r22, X+
 ca6:	8d 01       	movw	r16, r26
 ca8:	d6 01       	movw	r26, r12
 caa:	ed 91       	ld	r30, X+
 cac:	fc 91       	ld	r31, X
 cae:	01 90       	ld	r0, Z+
 cb0:	f0 81       	ld	r31, Z
 cb2:	e0 2d       	mov	r30, r0
 cb4:	c6 01       	movw	r24, r12
 cb6:	09 95       	icall
 cb8:	89 2b       	or	r24, r25
 cba:	11 f0       	breq	.+4      	; 0xcc0 <_ZN5Print5writeEPKhj+0x3e>
 cbc:	21 96       	adiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 cbe:	ee cf       	rjmp	.-36     	; 0xc9c <_ZN5Print5writeEPKhj+0x1a>
 cc0:	7e 01       	movw	r14, r28
    if (write(*buffer++)) n++;
    else break;
  }
  return n;
}
 cc2:	c7 01       	movw	r24, r14
 cc4:	df 91       	pop	r29
 cc6:	cf 91       	pop	r28
 cc8:	1f 91       	pop	r17
 cca:	0f 91       	pop	r16
 ccc:	ff 90       	pop	r15
 cce:	ef 90       	pop	r14
 cd0:	df 90       	pop	r13
 cd2:	cf 90       	pop	r12
 cd4:	08 95       	ret

00000cd6 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 cd6:	1f 92       	push	r1
 cd8:	0f 92       	push	r0
 cda:	0f b6       	in	r0, 0x3f	; 63
 cdc:	0f 92       	push	r0
 cde:	11 24       	eor	r1, r1
 ce0:	2f 93       	push	r18
 ce2:	3f 93       	push	r19
 ce4:	8f 93       	push	r24
 ce6:	9f 93       	push	r25
 ce8:	af 93       	push	r26
 cea:	bf 93       	push	r27
 cec:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <timer0_millis>
 cf0:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <timer0_millis+0x1>
 cf4:	a0 91 f1 01 	lds	r26, 0x01F1	; 0x8001f1 <timer0_millis+0x2>
 cf8:	b0 91 f2 01 	lds	r27, 0x01F2	; 0x8001f2 <timer0_millis+0x3>
 cfc:	30 91 ee 01 	lds	r19, 0x01EE	; 0x8001ee <timer0_fract>
 d00:	23 e0       	ldi	r18, 0x03	; 3
 d02:	23 0f       	add	r18, r19
 d04:	2d 37       	cpi	r18, 0x7D	; 125
 d06:	20 f4       	brcc	.+8      	; 0xd10 <__vector_16+0x3a>
 d08:	01 96       	adiw	r24, 0x01	; 1
 d0a:	a1 1d       	adc	r26, r1
 d0c:	b1 1d       	adc	r27, r1
 d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__vector_16+0x44>
 d10:	26 e8       	ldi	r18, 0x86	; 134
 d12:	23 0f       	add	r18, r19
 d14:	02 96       	adiw	r24, 0x02	; 2
 d16:	a1 1d       	adc	r26, r1
 d18:	b1 1d       	adc	r27, r1
 d1a:	20 93 ee 01 	sts	0x01EE, r18	; 0x8001ee <timer0_fract>
 d1e:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <timer0_millis>
 d22:	90 93 f0 01 	sts	0x01F0, r25	; 0x8001f0 <timer0_millis+0x1>
 d26:	a0 93 f1 01 	sts	0x01F1, r26	; 0x8001f1 <timer0_millis+0x2>
 d2a:	b0 93 f2 01 	sts	0x01F2, r27	; 0x8001f2 <timer0_millis+0x3>
 d2e:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <timer0_overflow_count>
 d32:	90 91 f4 01 	lds	r25, 0x01F4	; 0x8001f4 <timer0_overflow_count+0x1>
 d36:	a0 91 f5 01 	lds	r26, 0x01F5	; 0x8001f5 <timer0_overflow_count+0x2>
 d3a:	b0 91 f6 01 	lds	r27, 0x01F6	; 0x8001f6 <timer0_overflow_count+0x3>
 d3e:	01 96       	adiw	r24, 0x01	; 1
 d40:	a1 1d       	adc	r26, r1
 d42:	b1 1d       	adc	r27, r1
 d44:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <timer0_overflow_count>
 d48:	90 93 f4 01 	sts	0x01F4, r25	; 0x8001f4 <timer0_overflow_count+0x1>
 d4c:	a0 93 f5 01 	sts	0x01F5, r26	; 0x8001f5 <timer0_overflow_count+0x2>
 d50:	b0 93 f6 01 	sts	0x01F6, r27	; 0x8001f6 <timer0_overflow_count+0x3>
 d54:	bf 91       	pop	r27
 d56:	af 91       	pop	r26
 d58:	9f 91       	pop	r25
 d5a:	8f 91       	pop	r24
 d5c:	3f 91       	pop	r19
 d5e:	2f 91       	pop	r18
 d60:	0f 90       	pop	r0
 d62:	0f be       	out	0x3f, r0	; 63
 d64:	0f 90       	pop	r0
 d66:	1f 90       	pop	r1
 d68:	18 95       	reti

00000d6a <millis>:
 d6a:	2f b7       	in	r18, 0x3f	; 63
 d6c:	f8 94       	cli
 d6e:	60 91 ef 01 	lds	r22, 0x01EF	; 0x8001ef <timer0_millis>
 d72:	70 91 f0 01 	lds	r23, 0x01F0	; 0x8001f0 <timer0_millis+0x1>
 d76:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <timer0_millis+0x2>
 d7a:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <timer0_millis+0x3>
 d7e:	2f bf       	out	0x3f, r18	; 63
 d80:	08 95       	ret

00000d82 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 d82:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 d84:	84 b5       	in	r24, 0x24	; 36
 d86:	82 60       	ori	r24, 0x02	; 2
 d88:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 d8a:	84 b5       	in	r24, 0x24	; 36
 d8c:	81 60       	ori	r24, 0x01	; 1
 d8e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 d90:	85 b5       	in	r24, 0x25	; 37
 d92:	82 60       	ori	r24, 0x02	; 2
 d94:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 d96:	85 b5       	in	r24, 0x25	; 37
 d98:	81 60       	ori	r24, 0x01	; 1
 d9a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 d9c:	ee e6       	ldi	r30, 0x6E	; 110
 d9e:	f0 e0       	ldi	r31, 0x00	; 0
 da0:	80 81       	ld	r24, Z
 da2:	81 60       	ori	r24, 0x01	; 1
 da4:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 da6:	e1 e8       	ldi	r30, 0x81	; 129
 da8:	f0 e0       	ldi	r31, 0x00	; 0
 daa:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 dac:	80 81       	ld	r24, Z
 dae:	82 60       	ori	r24, 0x02	; 2
 db0:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 db2:	80 81       	ld	r24, Z
 db4:	81 60       	ori	r24, 0x01	; 1
 db6:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 db8:	e0 e8       	ldi	r30, 0x80	; 128
 dba:	f0 e0       	ldi	r31, 0x00	; 0
 dbc:	80 81       	ld	r24, Z
 dbe:	81 60       	ori	r24, 0x01	; 1
 dc0:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 dc2:	e1 eb       	ldi	r30, 0xB1	; 177
 dc4:	f0 e0       	ldi	r31, 0x00	; 0
 dc6:	80 81       	ld	r24, Z
 dc8:	84 60       	ori	r24, 0x04	; 4
 dca:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 dcc:	e0 eb       	ldi	r30, 0xB0	; 176
 dce:	f0 e0       	ldi	r31, 0x00	; 0
 dd0:	80 81       	ld	r24, Z
 dd2:	81 60       	ori	r24, 0x01	; 1
 dd4:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 dd6:	ea e7       	ldi	r30, 0x7A	; 122
 dd8:	f0 e0       	ldi	r31, 0x00	; 0
 dda:	80 81       	ld	r24, Z
 ddc:	84 60       	ori	r24, 0x04	; 4
 dde:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 de0:	80 81       	ld	r24, Z
 de2:	82 60       	ori	r24, 0x02	; 2
 de4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 de6:	80 81       	ld	r24, Z
 de8:	81 60       	ori	r24, 0x01	; 1
 dea:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 dec:	80 81       	ld	r24, Z
 dee:	80 68       	ori	r24, 0x80	; 128
 df0:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 df2:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 df6:	08 95       	ret

00000df8 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 df8:	cf 93       	push	r28
 dfa:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 dfc:	90 e0       	ldi	r25, 0x00	; 0
 dfe:	fc 01       	movw	r30, r24
 e00:	e4 58       	subi	r30, 0x84	; 132
 e02:	ff 4f       	sbci	r31, 0xFF	; 255
 e04:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 e06:	fc 01       	movw	r30, r24
 e08:	e0 57       	subi	r30, 0x70	; 112
 e0a:	ff 4f       	sbci	r31, 0xFF	; 255
 e0c:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 e0e:	88 23       	and	r24, r24
 e10:	61 f1       	breq	.+88     	; 0xe6a <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 e12:	90 e0       	ldi	r25, 0x00	; 0
 e14:	88 0f       	add	r24, r24
 e16:	99 1f       	adc	r25, r25
 e18:	fc 01       	movw	r30, r24
 e1a:	e8 54       	subi	r30, 0x48	; 72
 e1c:	ff 4f       	sbci	r31, 0xFF	; 255
 e1e:	c5 91       	lpm	r28, Z+
 e20:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 e22:	fc 01       	movw	r30, r24
 e24:	e2 55       	subi	r30, 0x52	; 82
 e26:	ff 4f       	sbci	r31, 0xFF	; 255
 e28:	a5 91       	lpm	r26, Z+
 e2a:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 e2c:	61 11       	cpse	r22, r1
 e2e:	09 c0       	rjmp	.+18     	; 0xe42 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 e30:	9f b7       	in	r25, 0x3f	; 63
                cli();
 e32:	f8 94       	cli
		*reg &= ~bit;
 e34:	88 81       	ld	r24, Y
 e36:	20 95       	com	r18
 e38:	82 23       	and	r24, r18
 e3a:	88 83       	st	Y, r24
		*out &= ~bit;
 e3c:	ec 91       	ld	r30, X
 e3e:	2e 23       	and	r18, r30
 e40:	0b c0       	rjmp	.+22     	; 0xe58 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 e42:	62 30       	cpi	r22, 0x02	; 2
 e44:	61 f4       	brne	.+24     	; 0xe5e <pinMode+0x66>
		uint8_t oldSREG = SREG;
 e46:	9f b7       	in	r25, 0x3f	; 63
                cli();
 e48:	f8 94       	cli
		*reg &= ~bit;
 e4a:	88 81       	ld	r24, Y
 e4c:	32 2f       	mov	r19, r18
 e4e:	30 95       	com	r19
 e50:	83 23       	and	r24, r19
 e52:	88 83       	st	Y, r24
		*out |= bit;
 e54:	ec 91       	ld	r30, X
 e56:	2e 2b       	or	r18, r30
 e58:	2c 93       	st	X, r18
		SREG = oldSREG;
 e5a:	9f bf       	out	0x3f, r25	; 63
 e5c:	06 c0       	rjmp	.+12     	; 0xe6a <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 e5e:	8f b7       	in	r24, 0x3f	; 63
                cli();
 e60:	f8 94       	cli
		*reg |= bit;
 e62:	e8 81       	ld	r30, Y
 e64:	2e 2b       	or	r18, r30
 e66:	28 83       	st	Y, r18
		SREG = oldSREG;
 e68:	8f bf       	out	0x3f, r24	; 63
	}
}
 e6a:	df 91       	pop	r29
 e6c:	cf 91       	pop	r28
 e6e:	08 95       	ret

00000e70 <__udivmodsi4>:
 e70:	a1 e2       	ldi	r26, 0x21	; 33
 e72:	1a 2e       	mov	r1, r26
 e74:	aa 1b       	sub	r26, r26
 e76:	bb 1b       	sub	r27, r27
 e78:	fd 01       	movw	r30, r26
 e7a:	0d c0       	rjmp	.+26     	; 0xe96 <__udivmodsi4_ep>

00000e7c <__udivmodsi4_loop>:
 e7c:	aa 1f       	adc	r26, r26
 e7e:	bb 1f       	adc	r27, r27
 e80:	ee 1f       	adc	r30, r30
 e82:	ff 1f       	adc	r31, r31
 e84:	a2 17       	cp	r26, r18
 e86:	b3 07       	cpc	r27, r19
 e88:	e4 07       	cpc	r30, r20
 e8a:	f5 07       	cpc	r31, r21
 e8c:	20 f0       	brcs	.+8      	; 0xe96 <__udivmodsi4_ep>
 e8e:	a2 1b       	sub	r26, r18
 e90:	b3 0b       	sbc	r27, r19
 e92:	e4 0b       	sbc	r30, r20
 e94:	f5 0b       	sbc	r31, r21

00000e96 <__udivmodsi4_ep>:
 e96:	66 1f       	adc	r22, r22
 e98:	77 1f       	adc	r23, r23
 e9a:	88 1f       	adc	r24, r24
 e9c:	99 1f       	adc	r25, r25
 e9e:	1a 94       	dec	r1
 ea0:	69 f7       	brne	.-38     	; 0xe7c <__udivmodsi4_loop>
 ea2:	60 95       	com	r22
 ea4:	70 95       	com	r23
 ea6:	80 95       	com	r24
 ea8:	90 95       	com	r25
 eaa:	9b 01       	movw	r18, r22
 eac:	ac 01       	movw	r20, r24
 eae:	bd 01       	movw	r22, r26
 eb0:	cf 01       	movw	r24, r30
 eb2:	08 95       	ret

00000eb4 <__tablejump2__>:
 eb4:	ee 0f       	add	r30, r30
 eb6:	ff 1f       	adc	r31, r31
 eb8:	05 90       	lpm	r0, Z+
 eba:	f4 91       	lpm	r31, Z
 ebc:	e0 2d       	mov	r30, r0
 ebe:	09 94       	ijmp

00000ec0 <_exit>:
 ec0:	f8 94       	cli

00000ec2 <__stop_program>:
 ec2:	ff cf       	rjmp	.-2      	; 0xec2 <__stop_program>
