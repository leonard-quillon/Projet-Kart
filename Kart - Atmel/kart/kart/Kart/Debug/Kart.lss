
Kart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ca  00800100  000015b8  0000164c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e9  008001ca  008001ca  00001716  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001716  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001748  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000310  00000000  00000000  00001788  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008395  00000000  00000000  00001a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b1c  00000000  00000000  00009e2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f12  00000000  00000000  0000b949  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a10  00000000  00000000  0000d85c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000233d  00000000  00000000  0000e26c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003930  00000000  00000000  000105a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d8  00000000  00000000  00013ed9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__ctors_end>
       4:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <__vector_1>
       8:	0c 94 89 01 	jmp	0x312	; 0x312 <__vector_2>
       c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__vector_3>
      10:	0c 94 13 02 	jmp	0x426	; 0x426 <__vector_4>
      14:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__vector_5>
      18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      40:	0c 94 c3 09 	jmp	0x1386	; 0x1386 <__vector_16>
      44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      48:	0c 94 76 07 	jmp	0xeec	; 0xeec <__vector_18>
      4c:	0c 94 a8 07 	jmp	0xf50	; 0xf50 <__vector_19>
      50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 01       	movw	r0, r0
      6a:	02 03       	mulsu	r16, r18
      6c:	04 05       	cpc	r16, r4
      6e:	06 07       	cpc	r16, r22
      70:	00 01       	movw	r0, r0
      72:	02 03       	mulsu	r16, r18
      74:	04 05       	cpc	r16, r4
      76:	00 01       	movw	r0, r0
      78:	02 03       	mulsu	r16, r18
      7a:	04 05       	cpc	r16, r4

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
      a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
      ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
      b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
      c2:	d8 07       	cpc	r29, r24

000000c4 <__ctors_end>:
      c4:	11 24       	eor	r1, r1
      c6:	1f be       	out	0x3f, r1	; 63
      c8:	cf ef       	ldi	r28, 0xFF	; 255
      ca:	d8 e0       	ldi	r29, 0x08	; 8
      cc:	de bf       	out	0x3e, r29	; 62
      ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
      d0:	11 e0       	ldi	r17, 0x01	; 1
      d2:	a0 e0       	ldi	r26, 0x00	; 0
      d4:	b1 e0       	ldi	r27, 0x01	; 1
      d6:	e8 eb       	ldi	r30, 0xB8	; 184
      d8:	f5 e1       	ldi	r31, 0x15	; 21
      da:	02 c0       	rjmp	.+4      	; 0xe0 <__do_copy_data+0x10>
      dc:	05 90       	lpm	r0, Z+
      de:	0d 92       	st	X+, r0
      e0:	aa 3c       	cpi	r26, 0xCA	; 202
      e2:	b1 07       	cpc	r27, r17
      e4:	d9 f7       	brne	.-10     	; 0xdc <__do_copy_data+0xc>

000000e6 <__do_clear_bss>:
      e6:	22 e0       	ldi	r18, 0x02	; 2
      e8:	aa ec       	ldi	r26, 0xCA	; 202
      ea:	b1 e0       	ldi	r27, 0x01	; 1
      ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
      ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
      f0:	a3 3b       	cpi	r26, 0xB3	; 179
      f2:	b2 07       	cpc	r27, r18
      f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>

000000f6 <__do_global_ctors>:
      f6:	10 e0       	ldi	r17, 0x00	; 0
      f8:	c2 e6       	ldi	r28, 0x62	; 98
      fa:	d0 e0       	ldi	r29, 0x00	; 0
      fc:	04 c0       	rjmp	.+8      	; 0x106 <__do_global_ctors+0x10>
      fe:	21 97       	sbiw	r28, 0x01	; 1
     100:	fe 01       	movw	r30, r28
     102:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__tablejump2__>
     106:	c1 36       	cpi	r28, 0x61	; 97
     108:	d1 07       	cpc	r29, r17
     10a:	c9 f7       	brne	.-14     	; 0xfe <__do_global_ctors+0x8>
     10c:	0e 94 06 08 	call	0x100c	; 0x100c <main>
     110:	0c 94 da 0a 	jmp	0x15b4	; 0x15b4 <_exit>

00000114 <__bad_interrupt>:
     114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <_Z11CAPTEUR_INTv>:
#endif
#ifndef EI_NOTINT1
if (arduinoPin == 3) {
  EIMSK &= ~_BV(1);
  EICRA &= (~_BV(2) & ~_BV(3));
  EIFR  |= _BV(1); // using a clue from the ATmega2560 datasheet.
     118:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <CountDemiTour>
     11c:	8f 5f       	subi	r24, 0xFF	; 255
     11e:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <CountDemiTour>
     122:	08 95       	ret

00000124 <_Z15enableInterrupthPFvvEh>:
     124:	e8 2f       	mov	r30, r24
     126:	ef 77       	andi	r30, 0x7F	; 127
     128:	87 fd       	sbrc	r24, 7
     12a:	05 c0       	rjmp	.+10     	; 0x136 <_Z15enableInterrupthPFvvEh+0x12>
     12c:	8e ef       	ldi	r24, 0xFE	; 254
     12e:	8e 0f       	add	r24, r30
     130:	82 30       	cpi	r24, 0x02	; 2
     132:	08 f4       	brcc	.+2      	; 0x136 <_Z15enableInterrupthPFvvEh+0x12>
     134:	9a c0       	rjmp	.+308    	; 0x26a <_Z15enableInterrupthPFvvEh+0x146>
     136:	8e 2f       	mov	r24, r30
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	fc 01       	movw	r30, r24
     13c:	e4 58       	subi	r30, 0x84	; 132
     13e:	ff 4f       	sbci	r31, 0xFF	; 255
     140:	24 91       	lpm	r18, Z
     142:	fc 01       	movw	r30, r24
     144:	e0 57       	subi	r30, 0x70	; 112
     146:	ff 4f       	sbci	r31, 0xFF	; 255
     148:	34 91       	lpm	r19, Z
     14a:	54 2f       	mov	r21, r20
     14c:	5d 7f       	andi	r21, 0xFD	; 253
     14e:	51 30       	cpi	r21, 0x01	; 1
     150:	b9 f4       	brne	.+46     	; 0x180 <_Z15enableInterrupthPFvvEh+0x5c>
     152:	32 30       	cpi	r19, 0x02	; 2
     154:	31 f4       	brne	.+12     	; 0x162 <_Z15enableInterrupthPFvvEh+0x3e>
     156:	50 91 de 01 	lds	r21, 0x01DE	; 0x8001de <risingPinsPORTB>
     15a:	52 2b       	or	r21, r18
     15c:	50 93 de 01 	sts	0x01DE, r21	; 0x8001de <risingPinsPORTB>
     160:	0f c0       	rjmp	.+30     	; 0x180 <_Z15enableInterrupthPFvvEh+0x5c>
     162:	33 30       	cpi	r19, 0x03	; 3
     164:	31 f4       	brne	.+12     	; 0x172 <_Z15enableInterrupthPFvvEh+0x4e>
     166:	50 91 db 01 	lds	r21, 0x01DB	; 0x8001db <risingPinsPORTC>
     16a:	52 2b       	or	r21, r18
     16c:	50 93 db 01 	sts	0x01DB, r21	; 0x8001db <risingPinsPORTC>
     170:	07 c0       	rjmp	.+14     	; 0x180 <_Z15enableInterrupthPFvvEh+0x5c>
     172:	34 30       	cpi	r19, 0x04	; 4
     174:	29 f4       	brne	.+10     	; 0x180 <_Z15enableInterrupthPFvvEh+0x5c>
     176:	50 91 d8 01 	lds	r21, 0x01D8	; 0x8001d8 <risingPinsPORTD>
     17a:	52 2b       	or	r21, r18
     17c:	50 93 d8 01 	sts	0x01D8, r21	; 0x8001d8 <risingPinsPORTD>
     180:	41 50       	subi	r20, 0x01	; 1
     182:	42 30       	cpi	r20, 0x02	; 2
     184:	b8 f4       	brcc	.+46     	; 0x1b4 <_Z15enableInterrupthPFvvEh+0x90>
     186:	32 30       	cpi	r19, 0x02	; 2
     188:	31 f4       	brne	.+12     	; 0x196 <_Z15enableInterrupthPFvvEh+0x72>
     18a:	40 91 dd 01 	lds	r20, 0x01DD	; 0x8001dd <fallingPinsPORTB>
     18e:	42 2b       	or	r20, r18
     190:	40 93 dd 01 	sts	0x01DD, r20	; 0x8001dd <fallingPinsPORTB>
     194:	0f c0       	rjmp	.+30     	; 0x1b4 <_Z15enableInterrupthPFvvEh+0x90>
     196:	33 30       	cpi	r19, 0x03	; 3
     198:	31 f4       	brne	.+12     	; 0x1a6 <_Z15enableInterrupthPFvvEh+0x82>
     19a:	40 91 da 01 	lds	r20, 0x01DA	; 0x8001da <fallingPinsPORTC>
     19e:	42 2b       	or	r20, r18
     1a0:	40 93 da 01 	sts	0x01DA, r20	; 0x8001da <fallingPinsPORTC>
     1a4:	07 c0       	rjmp	.+14     	; 0x1b4 <_Z15enableInterrupthPFvvEh+0x90>
     1a6:	34 30       	cpi	r19, 0x04	; 4
     1a8:	29 f4       	brne	.+10     	; 0x1b4 <_Z15enableInterrupthPFvvEh+0x90>
     1aa:	40 91 d7 01 	lds	r20, 0x01D7	; 0x8001d7 <fallingPinsPORTD>
     1ae:	42 2b       	or	r20, r18
     1b0:	40 93 d7 01 	sts	0x01D7, r20	; 0x8001d7 <fallingPinsPORTD>
     1b4:	fc 01       	movw	r30, r24
     1b6:	e8 59       	subi	r30, 0x98	; 152
     1b8:	ff 4f       	sbci	r31, 0xFF	; 255
     1ba:	a4 91       	lpm	r26, Z
     1bc:	32 30       	cpi	r19, 0x02	; 2
     1be:	c1 f4       	brne	.+48     	; 0x1f0 <_Z15enableInterrupthPFvvEh+0xcc>
     1c0:	b0 e0       	ldi	r27, 0x00	; 0
     1c2:	aa 0f       	add	r26, r26
     1c4:	bb 1f       	adc	r27, r27
     1c6:	a5 50       	subi	r26, 0x05	; 5
     1c8:	be 4f       	sbci	r27, 0xFE	; 254
     1ca:	6d 93       	st	X+, r22
     1cc:	7c 93       	st	X, r23
     1ce:	e8 ea       	ldi	r30, 0xA8	; 168
     1d0:	f0 e0       	ldi	r31, 0x00	; 0
     1d2:	a5 91       	lpm	r26, Z+
     1d4:	b4 91       	lpm	r27, Z
     1d6:	8c 91       	ld	r24, X
     1d8:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <_ZL13portSnapshotB>
     1dc:	8b e6       	ldi	r24, 0x6B	; 107
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <pcmsk+0x1>
     1e4:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <pcmsk>
     1e8:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
     1ec:	81 60       	ori	r24, 0x01	; 1
     1ee:	33 c0       	rjmp	.+102    	; 0x256 <_Z15enableInterrupthPFvvEh+0x132>
     1f0:	33 30       	cpi	r19, 0x03	; 3
     1f2:	c1 f4       	brne	.+48     	; 0x224 <_Z15enableInterrupthPFvvEh+0x100>
     1f4:	b0 e0       	ldi	r27, 0x00	; 0
     1f6:	aa 0f       	add	r26, r26
     1f8:	bb 1f       	adc	r27, r27
     1fa:	a1 51       	subi	r26, 0x11	; 17
     1fc:	be 4f       	sbci	r27, 0xFE	; 254
     1fe:	6d 93       	st	X+, r22
     200:	7c 93       	st	X, r23
     202:	ea ea       	ldi	r30, 0xAA	; 170
     204:	f0 e0       	ldi	r31, 0x00	; 0
     206:	a5 91       	lpm	r26, Z+
     208:	b4 91       	lpm	r27, Z
     20a:	8c 91       	ld	r24, X
     20c:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <_ZL13portSnapshotC>
     210:	8c e6       	ldi	r24, 0x6C	; 108
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <pcmsk+0x1>
     218:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <pcmsk>
     21c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
     220:	82 60       	ori	r24, 0x02	; 2
     222:	19 c0       	rjmp	.+50     	; 0x256 <_Z15enableInterrupthPFvvEh+0x132>
     224:	34 30       	cpi	r19, 0x04	; 4
     226:	c9 f4       	brne	.+50     	; 0x25a <_Z15enableInterrupthPFvvEh+0x136>
     228:	b0 e0       	ldi	r27, 0x00	; 0
     22a:	aa 0f       	add	r26, r26
     22c:	bb 1f       	adc	r27, r27
     22e:	a1 52       	subi	r26, 0x21	; 33
     230:	be 4f       	sbci	r27, 0xFE	; 254
     232:	6d 93       	st	X+, r22
     234:	7c 93       	st	X, r23
     236:	ec ea       	ldi	r30, 0xAC	; 172
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	a5 91       	lpm	r26, Z+
     23c:	b4 91       	lpm	r27, Z
     23e:	8c 91       	ld	r24, X
     240:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <_ZL13portSnapshotD>
     244:	8d e6       	ldi	r24, 0x6D	; 109
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <pcmsk+0x1>
     24c:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <pcmsk>
     250:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
     254:	84 60       	ori	r24, 0x04	; 4
     256:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
     25a:	a0 91 0b 02 	lds	r26, 0x020B	; 0x80020b <pcmsk>
     25e:	b0 91 0c 02 	lds	r27, 0x020C	; 0x80020c <pcmsk+0x1>
     262:	ec 91       	ld	r30, X
     264:	2e 2b       	or	r18, r30
     266:	2c 93       	st	X, r18
     268:	08 95       	ret
     26a:	9f b7       	in	r25, 0x3f	; 63
     26c:	f8 94       	cli
     26e:	e2 30       	cpi	r30, 0x02	; 2
     270:	99 f4       	brne	.+38     	; 0x298 <_Z15enableInterrupthPFvvEh+0x174>
     272:	70 93 08 02 	sts	0x0208, r23	; 0x800208 <functionPointerArrayEXTERNAL+0x1>
     276:	60 93 07 02 	sts	0x0207, r22	; 0x800207 <functionPointerArrayEXTERNAL>
     27a:	e8 98       	cbi	0x1d, 0	; 29
     27c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     280:	8c 7f       	andi	r24, 0xFC	; 252
     282:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     286:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     28a:	48 2b       	or	r20, r24
     28c:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     290:	e0 9a       	sbi	0x1c, 0	; 28
     292:	e8 9a       	sbi	0x1d, 0	; 29
     294:	9f bf       	out	0x3f, r25	; 63
     296:	08 95       	ret
     298:	70 93 0a 02 	sts	0x020A, r23	; 0x80020a <functionPointerArrayEXTERNAL+0x3>
     29c:	60 93 09 02 	sts	0x0209, r22	; 0x800209 <functionPointerArrayEXTERNAL+0x2>
     2a0:	e9 98       	cbi	0x1d, 1	; 29
     2a2:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     2a6:	83 7f       	andi	r24, 0xF3	; 243
     2a8:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     2ac:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     2b0:	24 e0       	ldi	r18, 0x04	; 4
     2b2:	42 9f       	mul	r20, r18
     2b4:	a0 01       	movw	r20, r0
     2b6:	11 24       	eor	r1, r1
     2b8:	48 2b       	or	r20, r24
     2ba:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     2be:	e1 9a       	sbi	0x1c, 1	; 28
     2c0:	e9 9a       	sbi	0x1d, 1	; 29
     2c2:	e8 cf       	rjmp	.-48     	; 0x294 <_Z15enableInterrupthPFvvEh+0x170>

000002c4 <__vector_1>:
// *************************************************************************************
// External Interrupts
// *************************************************************************************
#ifndef EI_NOTEXTERNAL
#ifndef EI_NOTINT0
ISR(INT0_vect) {/*{{{*/
     2c4:	1f 92       	push	r1
     2c6:	0f 92       	push	r0
     2c8:	0f b6       	in	r0, 0x3f	; 63
     2ca:	0f 92       	push	r0
     2cc:	11 24       	eor	r1, r1
     2ce:	2f 93       	push	r18
     2d0:	3f 93       	push	r19
     2d2:	4f 93       	push	r20
     2d4:	5f 93       	push	r21
     2d6:	6f 93       	push	r22
     2d8:	7f 93       	push	r23
     2da:	8f 93       	push	r24
     2dc:	9f 93       	push	r25
     2de:	af 93       	push	r26
     2e0:	bf 93       	push	r27
     2e2:	ef 93       	push	r30
     2e4:	ff 93       	push	r31
#elif defined EI_ATTINY25
  arduinoInterruptedPin=ARDUINO_PIN_B0; arduinoPinState=PINB & _BV(0);
#endif
#endif // EI_ARDUINO_INTERRUPTED_PIN
#if ! defined EI_ATTINY25 && ! defined EI_ATTINY24
  (*functionPointerArrayEXTERNAL[0])();
     2e6:	e0 91 07 02 	lds	r30, 0x0207	; 0x800207 <functionPointerArrayEXTERNAL>
     2ea:	f0 91 08 02 	lds	r31, 0x0208	; 0x800208 <functionPointerArrayEXTERNAL+0x1>
     2ee:	09 95       	icall
  INTERRUPT_FLAG_PIN2++;
#endif
#endif

#endif // NEEDFORSPEED
}/*}}}*/
     2f0:	ff 91       	pop	r31
     2f2:	ef 91       	pop	r30
     2f4:	bf 91       	pop	r27
     2f6:	af 91       	pop	r26
     2f8:	9f 91       	pop	r25
     2fa:	8f 91       	pop	r24
     2fc:	7f 91       	pop	r23
     2fe:	6f 91       	pop	r22
     300:	5f 91       	pop	r21
     302:	4f 91       	pop	r20
     304:	3f 91       	pop	r19
     306:	2f 91       	pop	r18
     308:	0f 90       	pop	r0
     30a:	0f be       	out	0x3f, r0	; 63
     30c:	0f 90       	pop	r0
     30e:	1f 90       	pop	r1
     310:	18 95       	reti

00000312 <__vector_2>:
#endif // EI_NOTINT0

#if ! defined(EI_ATTINY24) && ! defined(EI_ATTINY25)
#ifndef EI_NOTINT1
ISR(INT1_vect) {/*{{{*/
     312:	1f 92       	push	r1
     314:	0f 92       	push	r0
     316:	0f b6       	in	r0, 0x3f	; 63
     318:	0f 92       	push	r0
     31a:	11 24       	eor	r1, r1
     31c:	2f 93       	push	r18
     31e:	3f 93       	push	r19
     320:	4f 93       	push	r20
     322:	5f 93       	push	r21
     324:	6f 93       	push	r22
     326:	7f 93       	push	r23
     328:	8f 93       	push	r24
     32a:	9f 93       	push	r25
     32c:	af 93       	push	r26
     32e:	bf 93       	push	r27
     330:	ef 93       	push	r30
     332:	ff 93       	push	r31
  arduinoInterruptedPin=ARDUINO_PIN_D1; arduinoPinState=PIND & _BV(1);
#elif defined ARDUINO_328
  arduinoInterruptedPin=ARDUINO_PIN_D3; arduinoPinState=PIND & _BV(3);
#endif
#endif // EI_ARDUINO_INTERRUPTED_PIN
  (*functionPointerArrayEXTERNAL[1])();
     334:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <functionPointerArrayEXTERNAL+0x2>
     338:	f0 91 0a 02 	lds	r31, 0x020A	; 0x80020a <functionPointerArrayEXTERNAL+0x3>
     33c:	09 95       	icall
#ifdef INTERRUPT_FLAG_PIN3
  INTERRUPT_FLAG_PIN3++;
#endif
#endif
#endif // NEEDFORSPEED
}/*}}}*/
     33e:	ff 91       	pop	r31
     340:	ef 91       	pop	r30
     342:	bf 91       	pop	r27
     344:	af 91       	pop	r26
     346:	9f 91       	pop	r25
     348:	8f 91       	pop	r24
     34a:	7f 91       	pop	r23
     34c:	6f 91       	pop	r22
     34e:	5f 91       	pop	r21
     350:	4f 91       	pop	r20
     352:	3f 91       	pop	r19
     354:	2f 91       	pop	r18
     356:	0f 90       	pop	r0
     358:	0f be       	out	0x3f, r0	; 63
     35a:	0f 90       	pop	r0
     35c:	1f 90       	pop	r1
     35e:	18 95       	reti

00000360 <__vector_3>:
  // exitPORTBISR: PORTC &= ~(1 << PC5); // SIGNAL THAT WE ARE LEAVING THE INTERRUPT
}/*}}}*/
#endif // EI_NOTPORTA

#ifndef EI_NOTPORTB
ISR(PORTB_VECT) {/*{{{*/
     360:	1f 92       	push	r1
     362:	0f 92       	push	r0
     364:	0f b6       	in	r0, 0x3f	; 63
     366:	0f 92       	push	r0
     368:	11 24       	eor	r1, r1
     36a:	2f 93       	push	r18
     36c:	3f 93       	push	r19
     36e:	4f 93       	push	r20
     370:	5f 93       	push	r21
     372:	6f 93       	push	r22
     374:	7f 93       	push	r23
     376:	8f 93       	push	r24
     378:	9f 93       	push	r25
     37a:	af 93       	push	r26
     37c:	bf 93       	push	r27
     37e:	cf 93       	push	r28
     380:	ef 93       	push	r30
     382:	ff 93       	push	r31
  uint8_t current;
  uint8_t interruptMask;
  uint8_t changedPins;
  uint8_t tmp;

  current=PINB;
     384:	23 b1       	in	r18, 0x03	; 3
// If we trust the compiler to do this, it will use an extra register...
//  changedPins=(portSnapshotB ^ current) &
//                                       ((risingPinsPORTB & current) | (fallingPinsPORTB & ~current));
// ...so we do it ourselves:
  changedPins   = portSnapshotB ^ current;
     386:	c0 91 dc 01 	lds	r28, 0x01DC	; 0x8001dc <_ZL13portSnapshotB>
  tmp           = risingPinsPORTB & current;
     38a:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <risingPinsPORTB>
  interruptMask = fallingPinsPORTB & ~current;
     38e:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <fallingPinsPORTB>
     392:	32 2f       	mov	r19, r18
     394:	30 95       	com	r19
     396:	93 23       	and	r25, r19
  interruptMask = interruptMask | tmp;
     398:	82 23       	and	r24, r18
     39a:	89 2b       	or	r24, r25
  interruptMask = PCMSK1 & interruptMask;
#else
#ifdef EI_ATTINY25
  interruptMask = PCMSK & interruptMask;
#else
  interruptMask = PCMSK0 & interruptMask;
     39c:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
     3a0:	c2 27       	eor	r28, r18
     3a2:	c9 23       	and	r28, r25
     3a4:	c8 23       	and	r28, r24
#endif
#endif

  portSnapshotB = current;
     3a6:	20 93 dc 01 	sts	0x01DC, r18	; 0x8001dc <_ZL13portSnapshotB>
#ifdef NEEDFORSPEED
#include "utility/ei_portb_speed.h"
#else
  if (interruptMask == 0) goto exitPORTBISR; // get out quickly if not interested.
     3aa:	cc 23       	and	r28, r28
     3ac:	51 f1       	breq	.+84     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
#if ! (defined ARDUINO_328) && ! (defined EI_ATTINY24) && ! (defined EI_ATTINY25)
  if (interruptMask & _BV(6)) { arduinoInterruptedPin=ARDUINO_PIN_B6; arduinoPinState=current & _BV(6); portBFunctions.pinSix(); }
  if (interruptMask & _BV(7)) { arduinoInterruptedPin=ARDUINO_PIN_B7; arduinoPinState=current & _BV(7); portBFunctions.pinSeven(); }
#endif
#else // EI_ARDUINO_INTERRUPTED_PIN
  if (interruptMask & _BV(0)) portBFunctions.pinZero();
     3ae:	c0 ff       	sbrs	r28, 0
     3b0:	05 c0       	rjmp	.+10     	; 0x3bc <__vector_3+0x5c>
     3b2:	e0 91 fb 01 	lds	r30, 0x01FB	; 0x8001fb <portBFunctions>
     3b6:	f0 91 fc 01 	lds	r31, 0x01FC	; 0x8001fc <portBFunctions+0x1>
     3ba:	09 95       	icall
  if (interruptMask & _BV(1)) portBFunctions.pinOne();
     3bc:	c1 ff       	sbrs	r28, 1
     3be:	05 c0       	rjmp	.+10     	; 0x3ca <__vector_3+0x6a>
     3c0:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <portBFunctions+0x2>
     3c4:	f0 91 fe 01 	lds	r31, 0x01FE	; 0x8001fe <portBFunctions+0x3>
     3c8:	09 95       	icall
  if (interruptMask & _BV(2)) portBFunctions.pinTwo();
     3ca:	c2 ff       	sbrs	r28, 2
     3cc:	05 c0       	rjmp	.+10     	; 0x3d8 <__vector_3+0x78>
     3ce:	e0 91 ff 01 	lds	r30, 0x01FF	; 0x8001ff <portBFunctions+0x4>
     3d2:	f0 91 00 02 	lds	r31, 0x0200	; 0x800200 <portBFunctions+0x5>
     3d6:	09 95       	icall
  if (interruptMask & _BV(3)) portBFunctions.pinThree();
     3d8:	c3 ff       	sbrs	r28, 3
     3da:	05 c0       	rjmp	.+10     	; 0x3e6 <__vector_3+0x86>
     3dc:	e0 91 01 02 	lds	r30, 0x0201	; 0x800201 <portBFunctions+0x6>
     3e0:	f0 91 02 02 	lds	r31, 0x0202	; 0x800202 <portBFunctions+0x7>
     3e4:	09 95       	icall
#if ! (defined EI_ATTINY24)
  if (interruptMask & _BV(4)) portBFunctions.pinFour();
     3e6:	c4 ff       	sbrs	r28, 4
     3e8:	05 c0       	rjmp	.+10     	; 0x3f4 <__vector_3+0x94>
     3ea:	e0 91 03 02 	lds	r30, 0x0203	; 0x800203 <portBFunctions+0x8>
     3ee:	f0 91 04 02 	lds	r31, 0x0204	; 0x800204 <portBFunctions+0x9>
     3f2:	09 95       	icall
  if (interruptMask & _BV(5)) portBFunctions.pinFive();
     3f4:	c5 ff       	sbrs	r28, 5
     3f6:	05 c0       	rjmp	.+10     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3f8:	e0 91 05 02 	lds	r30, 0x0205	; 0x800205 <portBFunctions+0xa>
     3fc:	f0 91 06 02 	lds	r31, 0x0206	; 0x800206 <portBFunctions+0xb>
     400:	09 95       	icall
#endif // EI_ARDUINO_INTERRUPTED_PIN
  exitPORTBISR: return;
  // FOR MEASUREMENT ONLY
  // exitPORTBISR: PORTC &= ~(1 << PC5); // SIGNAL THAT WE ARE LEAVING THE INTERRUPT
#endif // NEEDFORSPEED
}/*}}}*/
     402:	ff 91       	pop	r31
     404:	ef 91       	pop	r30
     406:	cf 91       	pop	r28
     408:	bf 91       	pop	r27
     40a:	af 91       	pop	r26
     40c:	9f 91       	pop	r25
     40e:	8f 91       	pop	r24
     410:	7f 91       	pop	r23
     412:	6f 91       	pop	r22
     414:	5f 91       	pop	r21
     416:	4f 91       	pop	r20
     418:	3f 91       	pop	r19
     41a:	2f 91       	pop	r18
     41c:	0f 90       	pop	r0
     41e:	0f be       	out	0x3f, r0	; 63
     420:	0f 90       	pop	r0
     422:	1f 90       	pop	r1
     424:	18 95       	reti

00000426 <__vector_4>:
#endif // EI_NOTPORTB

#ifndef EI_NOTPORTC
ISR(PORTC_VECT) {/*{{{*/
     426:	1f 92       	push	r1
     428:	0f 92       	push	r0
     42a:	0f b6       	in	r0, 0x3f	; 63
     42c:	0f 92       	push	r0
     42e:	11 24       	eor	r1, r1
     430:	2f 93       	push	r18
     432:	3f 93       	push	r19
     434:	4f 93       	push	r20
     436:	5f 93       	push	r21
     438:	6f 93       	push	r22
     43a:	7f 93       	push	r23
     43c:	8f 93       	push	r24
     43e:	9f 93       	push	r25
     440:	af 93       	push	r26
     442:	bf 93       	push	r27
     444:	cf 93       	push	r28
     446:	ef 93       	push	r30
     448:	ff 93       	push	r31
  uint8_t current;
  uint8_t interruptMask;
  uint8_t changedPins;
  uint8_t tmp;

  current=PINC;
     44a:	26 b1       	in	r18, 0x06	; 6
// If we trust the compiler to do this, it will use an extra register...
//  changedPins=(portSnapshotB ^ current) &
//                                       ((risingPinsPORTB & current) | (fallingPinsPORTB & ~current));
// ...so we do it ourselves:
  changedPins   = portSnapshotC ^ current;
     44c:	c0 91 d9 01 	lds	r28, 0x01D9	; 0x8001d9 <_ZL13portSnapshotC>
  tmp           = risingPinsPORTC & current;
     450:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <risingPinsPORTC>
  interruptMask = fallingPinsPORTC & ~current;
     454:	90 91 da 01 	lds	r25, 0x01DA	; 0x8001da <fallingPinsPORTC>
     458:	32 2f       	mov	r19, r18
     45a:	30 95       	com	r19
     45c:	93 23       	and	r25, r19
  interruptMask = interruptMask | tmp;
     45e:	82 23       	and	r24, r18
     460:	89 2b       	or	r24, r25
  interruptMask = changedPins & interruptMask;
#if (defined MIGHTY1284)
  interruptMask = PCMSK2 & interruptMask;
#else
  interruptMask = PCMSK1 & interruptMask;
     462:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
     466:	c2 27       	eor	r28, r18
     468:	c9 23       	and	r28, r25
     46a:	c8 23       	and	r28, r24
#endif

  portSnapshotC = current;
     46c:	20 93 d9 01 	sts	0x01D9, r18	; 0x8001d9 <_ZL13portSnapshotC>
#ifdef NEEDFORSPEED
#include "utility/ei_portc_speed.h"
#else
  if (interruptMask == 0) goto exitPORTCISR; // get out quickly if not interested.
     470:	cc 23       	and	r28, r28
     472:	51 f1       	breq	.+84     	; 0x4c8 <__vector_4+0xa2>
#ifdef MIGHTY1284
  if (interruptMask & _BV(6)) { arduinoInterruptedPin=ARDUINO_PIN_C6; arduinoPinState=current & _BV(6); portCFunctions.pinSix(); }
  if (interruptMask & _BV(7)) { arduinoInterruptedPin=ARDUINO_PIN_C7; arduinoPinState=current & _BV(7); portCFunctions.pinSeven(); }
#endif
#else
  if (interruptMask & _BV(0)) portCFunctions.pinZero();
     474:	c0 ff       	sbrs	r28, 0
     476:	05 c0       	rjmp	.+10     	; 0x482 <__vector_4+0x5c>
     478:	e0 91 ef 01 	lds	r30, 0x01EF	; 0x8001ef <portCFunctions>
     47c:	f0 91 f0 01 	lds	r31, 0x01F0	; 0x8001f0 <portCFunctions+0x1>
     480:	09 95       	icall
  if (interruptMask & _BV(1)) portCFunctions.pinOne();
     482:	c1 ff       	sbrs	r28, 1
     484:	05 c0       	rjmp	.+10     	; 0x490 <__vector_4+0x6a>
     486:	e0 91 f1 01 	lds	r30, 0x01F1	; 0x8001f1 <portCFunctions+0x2>
     48a:	f0 91 f2 01 	lds	r31, 0x01F2	; 0x8001f2 <portCFunctions+0x3>
     48e:	09 95       	icall
  if (interruptMask & _BV(2)) portCFunctions.pinTwo();
     490:	c2 ff       	sbrs	r28, 2
     492:	05 c0       	rjmp	.+10     	; 0x49e <__vector_4+0x78>
     494:	e0 91 f3 01 	lds	r30, 0x01F3	; 0x8001f3 <portCFunctions+0x4>
     498:	f0 91 f4 01 	lds	r31, 0x01F4	; 0x8001f4 <portCFunctions+0x5>
     49c:	09 95       	icall
  if (interruptMask & _BV(3)) portCFunctions.pinThree();
     49e:	c3 ff       	sbrs	r28, 3
     4a0:	05 c0       	rjmp	.+10     	; 0x4ac <__vector_4+0x86>
     4a2:	e0 91 f5 01 	lds	r30, 0x01F5	; 0x8001f5 <portCFunctions+0x6>
     4a6:	f0 91 f6 01 	lds	r31, 0x01F6	; 0x8001f6 <portCFunctions+0x7>
     4aa:	09 95       	icall
  if (interruptMask & _BV(4)) portCFunctions.pinFour();
     4ac:	c4 ff       	sbrs	r28, 4
     4ae:	05 c0       	rjmp	.+10     	; 0x4ba <__vector_4+0x94>
     4b0:	e0 91 f7 01 	lds	r30, 0x01F7	; 0x8001f7 <portCFunctions+0x8>
     4b4:	f0 91 f8 01 	lds	r31, 0x01F8	; 0x8001f8 <portCFunctions+0x9>
     4b8:	09 95       	icall
  if (interruptMask & _BV(5)) portCFunctions.pinFive();
     4ba:	c5 ff       	sbrs	r28, 5
     4bc:	05 c0       	rjmp	.+10     	; 0x4c8 <__vector_4+0xa2>
     4be:	e0 91 f9 01 	lds	r30, 0x01F9	; 0x8001f9 <portCFunctions+0xa>
     4c2:	f0 91 fa 01 	lds	r31, 0x01FA	; 0x8001fa <portCFunctions+0xb>
     4c6:	09 95       	icall
  if (interruptMask & _BV(7)) portCFunctions.pinSeven();
#endif
#endif // EI_ARDUINO_INTERRUPTED_PIN
  exitPORTCISR: return;
#endif // NEEDFORSPEED
}/*}}}*/
     4c8:	ff 91       	pop	r31
     4ca:	ef 91       	pop	r30
     4cc:	cf 91       	pop	r28
     4ce:	bf 91       	pop	r27
     4d0:	af 91       	pop	r26
     4d2:	9f 91       	pop	r25
     4d4:	8f 91       	pop	r24
     4d6:	7f 91       	pop	r23
     4d8:	6f 91       	pop	r22
     4da:	5f 91       	pop	r21
     4dc:	4f 91       	pop	r20
     4de:	3f 91       	pop	r19
     4e0:	2f 91       	pop	r18
     4e2:	0f 90       	pop	r0
     4e4:	0f be       	out	0x3f, r0	; 63
     4e6:	0f 90       	pop	r0
     4e8:	1f 90       	pop	r1
     4ea:	18 95       	reti

000004ec <__vector_5>:
#endif // EI_NOTPORTC

#ifndef EI_NOTPORTD
ISR(PORTD_VECT) {/*{{{*/
     4ec:	1f 92       	push	r1
     4ee:	0f 92       	push	r0
     4f0:	0f b6       	in	r0, 0x3f	; 63
     4f2:	0f 92       	push	r0
     4f4:	11 24       	eor	r1, r1
     4f6:	2f 93       	push	r18
     4f8:	3f 93       	push	r19
     4fa:	4f 93       	push	r20
     4fc:	5f 93       	push	r21
     4fe:	6f 93       	push	r22
     500:	7f 93       	push	r23
     502:	8f 93       	push	r24
     504:	9f 93       	push	r25
     506:	af 93       	push	r26
     508:	bf 93       	push	r27
     50a:	cf 93       	push	r28
     50c:	ef 93       	push	r30
     50e:	ff 93       	push	r31
  uint8_t current;
  uint8_t interruptMask;
  uint8_t changedPins;
  uint8_t tmp;

  current=PIND;
     510:	29 b1       	in	r18, 0x09	; 9
// If we trust the compiler to do this, it will use an extra register...
//  changedPins=(portSnapshotB ^ current) &
//                                       ((risingPinsPORTB & current) | (fallingPinsPORTB & ~current));
// ...so we do it ourselves:
  changedPins   = portSnapshotD ^ current;
     512:	c0 91 d6 01 	lds	r28, 0x01D6	; 0x8001d6 <_ZL13portSnapshotD>
  tmp           = risingPinsPORTD & current;
     516:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <risingPinsPORTD>
  interruptMask = fallingPinsPORTD & ~current;
     51a:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <fallingPinsPORTD>
     51e:	32 2f       	mov	r19, r18
     520:	30 95       	com	r19
     522:	93 23       	and	r25, r19
  interruptMask = interruptMask | tmp;
     524:	82 23       	and	r24, r18
     526:	89 2b       	or	r24, r25
  interruptMask = changedPins & interruptMask;
#if (defined MIGHTY1284)
  interruptMask = PCMSK3 & interruptMask;
#else
  interruptMask = PCMSK2 & interruptMask;
     528:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
     52c:	c2 27       	eor	r28, r18
     52e:	c9 23       	and	r28, r25
     530:	c8 23       	and	r28, r24
#endif

  portSnapshotD = current;
     532:	20 93 d6 01 	sts	0x01D6, r18	; 0x8001d6 <_ZL13portSnapshotD>
#ifdef NEEDFORSPEED
#include "utility/ei_portd_speed.h"
#else
  if (interruptMask == 0) goto exitPORTDISR; // get out quickly if not interested.
     536:	cc 23       	and	r28, r28
     538:	c1 f1       	breq	.+112    	; 0x5aa <__vector_5+0xbe>
  if (interruptMask & _BV(4)) { arduinoInterruptedPin=ARDUINO_PIN_D4; arduinoPinState=current & _BV(4); portDFunctions.pinFour(); }
  if (interruptMask & _BV(5)) { arduinoInterruptedPin=ARDUINO_PIN_D5; arduinoPinState=current & _BV(5); portDFunctions.pinFive(); }
  if (interruptMask & _BV(6)) { arduinoInterruptedPin=ARDUINO_PIN_D6; arduinoPinState=current & _BV(6); portDFunctions.pinSix(); }
  if (interruptMask & _BV(7)) { arduinoInterruptedPin=ARDUINO_PIN_D7; arduinoPinState=current & _BV(7); portDFunctions.pinSeven(); }
#else
  if (interruptMask & _BV(0)) portDFunctions.pinZero();
     53a:	c0 ff       	sbrs	r28, 0
     53c:	05 c0       	rjmp	.+10     	; 0x548 <__vector_5+0x5c>
     53e:	e0 91 df 01 	lds	r30, 0x01DF	; 0x8001df <portDFunctions>
     542:	f0 91 e0 01 	lds	r31, 0x01E0	; 0x8001e0 <portDFunctions+0x1>
     546:	09 95       	icall
  if (interruptMask & _BV(1)) portDFunctions.pinOne();
     548:	c1 ff       	sbrs	r28, 1
     54a:	05 c0       	rjmp	.+10     	; 0x556 <__vector_5+0x6a>
     54c:	e0 91 e1 01 	lds	r30, 0x01E1	; 0x8001e1 <portDFunctions+0x2>
     550:	f0 91 e2 01 	lds	r31, 0x01E2	; 0x8001e2 <portDFunctions+0x3>
     554:	09 95       	icall
  if (interruptMask & _BV(2)) portDFunctions.pinTwo();
     556:	c2 ff       	sbrs	r28, 2
     558:	05 c0       	rjmp	.+10     	; 0x564 <__vector_5+0x78>
     55a:	e0 91 e3 01 	lds	r30, 0x01E3	; 0x8001e3 <portDFunctions+0x4>
     55e:	f0 91 e4 01 	lds	r31, 0x01E4	; 0x8001e4 <portDFunctions+0x5>
     562:	09 95       	icall
  if (interruptMask & _BV(3)) portDFunctions.pinThree();
     564:	c3 ff       	sbrs	r28, 3
     566:	05 c0       	rjmp	.+10     	; 0x572 <__vector_5+0x86>
     568:	e0 91 e5 01 	lds	r30, 0x01E5	; 0x8001e5 <portDFunctions+0x6>
     56c:	f0 91 e6 01 	lds	r31, 0x01E6	; 0x8001e6 <portDFunctions+0x7>
     570:	09 95       	icall
  if (interruptMask & _BV(4)) portDFunctions.pinFour();
     572:	c4 ff       	sbrs	r28, 4
     574:	05 c0       	rjmp	.+10     	; 0x580 <__vector_5+0x94>
     576:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <portDFunctions+0x8>
     57a:	f0 91 e8 01 	lds	r31, 0x01E8	; 0x8001e8 <portDFunctions+0x9>
     57e:	09 95       	icall
  if (interruptMask & _BV(5)) portDFunctions.pinFive();
     580:	c5 ff       	sbrs	r28, 5
     582:	05 c0       	rjmp	.+10     	; 0x58e <__vector_5+0xa2>
     584:	e0 91 e9 01 	lds	r30, 0x01E9	; 0x8001e9 <portDFunctions+0xa>
     588:	f0 91 ea 01 	lds	r31, 0x01EA	; 0x8001ea <portDFunctions+0xb>
     58c:	09 95       	icall
  if (interruptMask & _BV(6)) portDFunctions.pinSix();
     58e:	c6 ff       	sbrs	r28, 6
     590:	05 c0       	rjmp	.+10     	; 0x59c <__vector_5+0xb0>
     592:	e0 91 eb 01 	lds	r30, 0x01EB	; 0x8001eb <portDFunctions+0xc>
     596:	f0 91 ec 01 	lds	r31, 0x01EC	; 0x8001ec <portDFunctions+0xd>
     59a:	09 95       	icall
  if (interruptMask & _BV(7)) portDFunctions.pinSeven();
     59c:	c7 ff       	sbrs	r28, 7
     59e:	05 c0       	rjmp	.+10     	; 0x5aa <__vector_5+0xbe>
     5a0:	e0 91 ed 01 	lds	r30, 0x01ED	; 0x8001ed <portDFunctions+0xe>
     5a4:	f0 91 ee 01 	lds	r31, 0x01EE	; 0x8001ee <portDFunctions+0xf>
     5a8:	09 95       	icall
#endif // EI_ARDUINO_INTERRUPTED_PIN
  exitPORTDISR: return;
#endif // NEEDFORSPEED
}/*}}}*/
     5aa:	ff 91       	pop	r31
     5ac:	ef 91       	pop	r30
     5ae:	cf 91       	pop	r28
     5b0:	bf 91       	pop	r27
     5b2:	af 91       	pop	r26
     5b4:	9f 91       	pop	r25
     5b6:	8f 91       	pop	r24
     5b8:	7f 91       	pop	r23
     5ba:	6f 91       	pop	r22
     5bc:	5f 91       	pop	r21
     5be:	4f 91       	pop	r20
     5c0:	3f 91       	pop	r19
     5c2:	2f 91       	pop	r18
     5c4:	0f 90       	pop	r0
     5c6:	0f be       	out	0x3f, r0	; 63
     5c8:	0f 90       	pop	r0
     5ca:	1f 90       	pop	r1
     5cc:	18 95       	reti

000005ce <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     5ce:	26 e0       	ldi	r18, 0x06	; 6
     5d0:	40 e8       	ldi	r20, 0x80	; 128
     5d2:	55 e2       	ldi	r21, 0x25	; 37
     5d4:	60 e0       	ldi	r22, 0x00	; 0
     5d6:	70 e0       	ldi	r23, 0x00	; 0
     5d8:	8d e0       	ldi	r24, 0x0D	; 13
     5da:	92 e0       	ldi	r25, 0x02	; 2
     5dc:	0e 94 11 07 	call	0xe22	; 0xe22 <_ZN14HardwareSerial5beginEmh>
	
	// Initialise la liaison série à 9600 bauds
	Serial.begin(9600);
	
	// Configure l'entrée logique dédiée à la récupération du capteur de vitesse en entrée pull up (mise à 1 par défault)
	pinMode(INPUT_CAPTEUR_VITESSE, INPUT_PULLUP);
     5e0:	62 e0       	ldi	r22, 0x02	; 2
     5e2:	84 e0       	ldi	r24, 0x04	; 4
     5e4:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <pinMode>
	
	// Configure l'interruption qui se déclenchera à chaque fois que l'entrée capteur passe de l'état bas à l'état haut
	enableInterrupt(INPUT_CAPTEUR_VITESSE, CAPTEUR_INT, RISING);
     5e8:	43 e0       	ldi	r20, 0x03	; 3
     5ea:	6c e8       	ldi	r22, 0x8C	; 140
     5ec:	70 e0       	ldi	r23, 0x00	; 0
     5ee:	84 e0       	ldi	r24, 0x04	; 4
     5f0:	0c 94 92 00 	jmp	0x124	; 0x124 <_Z15enableInterrupthPFvvEh>

000005f4 <_Z15Lecture_Vitessev>:
}

// Fonction permettant le calcul de la vitesse en fonction du nombre d'impulsion par secondes
void Lecture_Vitesse (void)
{
     5f4:	cf 93       	push	r28
	char tempCount = 0;
	
	tempCount = CountDemiTour;
     5f6:	c0 91 d5 01 	lds	r28, 0x01D5	; 0x8001d5 <CountDemiTour>
	TempsEcoule ++;
     5fa:	40 91 ce 01 	lds	r20, 0x01CE	; 0x8001ce <TempsEcoule>
     5fe:	50 91 cf 01 	lds	r21, 0x01CF	; 0x8001cf <TempsEcoule+0x1>
     602:	60 91 d0 01 	lds	r22, 0x01D0	; 0x8001d0 <TempsEcoule+0x2>
     606:	70 91 d1 01 	lds	r23, 0x01D1	; 0x8001d1 <TempsEcoule+0x3>
     60a:	4f 5f       	subi	r20, 0xFF	; 255
     60c:	5f 4f       	sbci	r21, 0xFF	; 255
     60e:	6f 4f       	sbci	r22, 0xFF	; 255
     610:	7f 4f       	sbci	r23, 0xFF	; 255
     612:	40 93 ce 01 	sts	0x01CE, r20	; 0x8001ce <TempsEcoule>
     616:	50 93 cf 01 	sts	0x01CF, r21	; 0x8001cf <TempsEcoule+0x1>
     61a:	60 93 d0 01 	sts	0x01D0, r22	; 0x8001d0 <TempsEcoule+0x2>
     61e:	70 93 d1 01 	sts	0x01D1, r23	; 0x8001d1 <TempsEcoule+0x3>

	Serial.print(TempsEcoule);
     622:	2a e0       	ldi	r18, 0x0A	; 10
     624:	30 e0       	ldi	r19, 0x00	; 0
     626:	8d e0       	ldi	r24, 0x0D	; 13
     628:	92 e0       	ldi	r25, 0x02	; 2
     62a:	0e 94 bc 08 	call	0x1178	; 0x1178 <_ZN5Print5printEmi>
	Serial.print(", ");
     62e:	61 e0       	ldi	r22, 0x01	; 1
     630:	71 e0       	ldi	r23, 0x01	; 1
     632:	8d e0       	ldi	r24, 0x0D	; 13
     634:	92 e0       	ldi	r25, 0x02	; 2
     636:	0e 94 54 08 	call	0x10a8	; 0x10a8 <_ZN5Print5printEPKc>

	NbDetectionParSec = (tempCount - MemoCountDemiTour);
     63a:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <MemoCountDemiTour>
     63e:	6c 2f       	mov	r22, r28
     640:	68 1b       	sub	r22, r24
     642:	60 93 d2 01 	sts	0x01D2, r22	; 0x8001d2 <NbDetectionParSec>
	//NbTourParHeure = (NbTourParSec * 3600);   // tour/heure
	//Vitesse = NbTourParHeure * DIAMETRE_ROUE_M; // m/heure
	//Vitesse = Vitesse / 1000; //km/heure

	// Calcul optimisé
	Vitesse = (unsigned char) ((float) NbDetectionParSec * 1.8f * DIAMETRE_ROUE_M);
     646:	70 e0       	ldi	r23, 0x00	; 0
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	0e 94 18 05 	call	0xa30	; 0xa30 <__floatunsisf>
     650:	26 e6       	ldi	r18, 0x66	; 102
     652:	36 e6       	ldi	r19, 0x66	; 102
     654:	46 ee       	ldi	r20, 0xE6	; 230
     656:	5f e3       	ldi	r21, 0x3F	; 63
     658:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__mulsf3>
     65c:	2d e2       	ldi	r18, 0x2D	; 45
     65e:	32 eb       	ldi	r19, 0xB2	; 178
     660:	4d e5       	ldi	r20, 0x5D	; 93
     662:	5f e3       	ldi	r21, 0x3F	; 63
     664:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__mulsf3>
     668:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <__fixunssfsi>
     66c:	60 93 d4 01 	sts	0x01D4, r22	; 0x8001d4 <Vitesse>

	Serial.print(Vitesse);
     670:	4a e0       	ldi	r20, 0x0A	; 10
     672:	50 e0       	ldi	r21, 0x00	; 0
     674:	8d e0       	ldi	r24, 0x0D	; 13
     676:	92 e0       	ldi	r25, 0x02	; 2
     678:	0e 94 c9 08 	call	0x1192	; 0x1192 <_ZN5Print5printEhi>
	Serial.println(", ");
     67c:	61 e0       	ldi	r22, 0x01	; 1
     67e:	71 e0       	ldi	r23, 0x01	; 1
     680:	8d e0       	ldi	r24, 0x0D	; 13
     682:	92 e0       	ldi	r25, 0x02	; 2
     684:	0e 94 61 08 	call	0x10c2	; 0x10c2 <_ZN5Print7printlnEPKc>

	MemoCountDemiTour = tempCount;	
     688:	c0 93 d3 01 	sts	0x01D3, r28	; 0x8001d3 <MemoCountDemiTour>
}
     68c:	cf 91       	pop	r28
     68e:	08 95       	ret

00000690 <_Z15TensionBatteriev>:

void TensionBatterie ()
{
     690:	cf 92       	push	r12
     692:	df 92       	push	r13
     694:	ef 92       	push	r14
     696:	ff 92       	push	r15
	//ten_min =11.3;
	ten_min =0;
	//ten_max = 15.0;
	ten_min =5;

	ten_mes = analogRead(A1);
     698:	8f e0       	ldi	r24, 0x0F	; 15
     69a:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <analogRead>
     69e:	bc 01       	movw	r22, r24
     6a0:	99 0f       	add	r25, r25
     6a2:	88 0b       	sbc	r24, r24
     6a4:	99 0b       	sbc	r25, r25
     6a6:	0e 94 1a 05 	call	0xa34	; 0xa34 <__floatsisf>
     6aa:	6b 01       	movw	r12, r22
     6ac:	7c 01       	movw	r14, r24
	//scanf("%f", &ten_mes);

	if (ten_mes<ten_min)
     6ae:	20 e0       	ldi	r18, 0x00	; 0
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	40 ea       	ldi	r20, 0xA0	; 160
     6b4:	50 e4       	ldi	r21, 0x40	; 64
     6b6:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__cmpsf2>
     6ba:	87 ff       	sbrs	r24, 7
     6bc:	1c c0       	rjmp	.+56     	; 0x6f6 <_Z15TensionBatteriev+0x66>
	{
		ten_crit =1;
		Serial.println("la tension atteint un niveau critique! \nS'arreter d'urgence!!");
     6be:	64 e0       	ldi	r22, 0x04	; 4
     6c0:	71 e0       	ldi	r23, 0x01	; 1
     6c2:	8d e0       	ldi	r24, 0x0D	; 13
     6c4:	92 e0       	ldi	r25, 0x02	; 2
     6c6:	0e 94 61 08 	call	0x10c2	; 0x10c2 <_ZN5Print7printlnEPKc>
	}


	if (ten_mes>ten_max)
     6ca:	60 e0       	ldi	r22, 0x00	; 0
     6cc:	70 e0       	ldi	r23, 0x00	; 0
     6ce:	cb 01       	movw	r24, r22
     6d0:	9b 01       	movw	r18, r22
     6d2:	ac 01       	movw	r20, r24
     6d4:	c7 01       	movw	r24, r14
     6d6:	b6 01       	movw	r22, r12
     6d8:	0e 94 ca 05 	call	0xb94	; 0xb94 <__gesf2>
     6dc:	18 16       	cp	r1, r24
     6de:	0c f0       	brlt	.+2      	; 0x6e2 <_Z15TensionBatteriev+0x52>
     6e0:	46 c0       	rjmp	.+140    	; 0x76e <_Z15TensionBatteriev+0xde>
	{
		surcharge =1;
		Serial.println("la tension atteint un niveau critique! \nDebrancher la prise d'urgence!!");
     6e2:	62 e4       	ldi	r22, 0x42	; 66
     6e4:	71 e0       	ldi	r23, 0x01	; 1
     6e6:	8d e0       	ldi	r24, 0x0D	; 13
     6e8:	92 e0       	ldi	r25, 0x02	; 2
		Serial.println(batt);
		
	}
	
	
}
     6ea:	ff 90       	pop	r15
     6ec:	ef 90       	pop	r14
     6ee:	df 90       	pop	r13
     6f0:	cf 90       	pop	r12


	if (ten_mes>ten_max)
	{
		surcharge =1;
		Serial.println("la tension atteint un niveau critique! \nDebrancher la prise d'urgence!!");
     6f2:	0c 94 61 08 	jmp	0x10c2	; 0x10c2 <_ZN5Print7printlnEPKc>
		ten_crit =1;
		Serial.println("la tension atteint un niveau critique! \nS'arreter d'urgence!!");
	}


	if (ten_mes>ten_max)
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	70 e0       	ldi	r23, 0x00	; 0
     6fa:	cb 01       	movw	r24, r22
     6fc:	9b 01       	movw	r18, r22
     6fe:	ac 01       	movw	r20, r24
     700:	c7 01       	movw	r24, r14
     702:	b6 01       	movw	r22, r12
     704:	0e 94 ca 05 	call	0xb94	; 0xb94 <__gesf2>
     708:	18 16       	cp	r1, r24
     70a:	5c f3       	brlt	.-42     	; 0x6e2 <_Z15TensionBatteriev+0x52>
	{
		inter1 = ten_mes-ten_min;
		inter2 = inter1/(ten_max-ten_min);
		batt = inter2*100;

		Serial.print("le niveau de batterie est de ");
     70c:	6a e8       	ldi	r22, 0x8A	; 138
     70e:	71 e0       	ldi	r23, 0x01	; 1
     710:	8d e0       	ldi	r24, 0x0D	; 13
     712:	92 e0       	ldi	r25, 0x02	; 2
     714:	0e 94 54 08 	call	0x10a8	; 0x10a8 <_ZN5Print5printEPKc>
		Serial.println(batt);
     718:	20 e0       	ldi	r18, 0x00	; 0
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	40 ea       	ldi	r20, 0xA0	; 160
     71e:	50 e4       	ldi	r21, 0x40	; 64
     720:	c7 01       	movw	r24, r14
     722:	b6 01       	movw	r22, r12
     724:	0e 94 05 04 	call	0x80a	; 0x80a <__subsf3>
     728:	6b 01       	movw	r12, r22
     72a:	7c 01       	movw	r14, r24
     72c:	20 e0       	ldi	r18, 0x00	; 0
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	40 ea       	ldi	r20, 0xA0	; 160
     732:	50 e4       	ldi	r21, 0x40	; 64
     734:	60 e0       	ldi	r22, 0x00	; 0
     736:	70 e0       	ldi	r23, 0x00	; 0
     738:	cb 01       	movw	r24, r22
     73a:	0e 94 05 04 	call	0x80a	; 0x80a <__subsf3>
     73e:	9b 01       	movw	r18, r22
     740:	ac 01       	movw	r20, r24
     742:	c7 01       	movw	r24, r14
     744:	b6 01       	movw	r22, r12
     746:	0e 94 77 04 	call	0x8ee	; 0x8ee <__divsf3>
     74a:	20 e0       	ldi	r18, 0x00	; 0
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	48 ec       	ldi	r20, 0xC8	; 200
     750:	52 e4       	ldi	r21, 0x42	; 66
     752:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__mulsf3>
     756:	ab 01       	movw	r20, r22
     758:	bc 01       	movw	r22, r24
     75a:	22 e0       	ldi	r18, 0x02	; 2
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	8d e0       	ldi	r24, 0x0D	; 13
     760:	92 e0       	ldi	r25, 0x02	; 2
		
	}
	
	
}
     762:	ff 90       	pop	r15
     764:	ef 90       	pop	r14
     766:	df 90       	pop	r13
     768:	cf 90       	pop	r12
		inter1 = ten_mes-ten_min;
		inter2 = inter1/(ten_max-ten_min);
		batt = inter2*100;

		Serial.print("le niveau de batterie est de ");
		Serial.println(batt);
     76a:	0c 94 b1 09 	jmp	0x1362	; 0x1362 <_ZN5Print7printlnEdi>
		
	}
	
	
}
     76e:	ff 90       	pop	r15
     770:	ef 90       	pop	r14
     772:	df 90       	pop	r13
     774:	cf 90       	pop	r12
     776:	08 95       	ret

00000778 <loop>:

// Equivalent au main sur Arduino
void loop() 
{
     778:	0f 93       	push	r16
     77a:	1f 93       	push	r17
	if ((millis() - CountSeconde) > 1000)
     77c:	0e 94 0d 0a 	call	0x141a	; 0x141a <millis>
     780:	00 91 ca 01 	lds	r16, 0x01CA	; 0x8001ca <__data_end>
     784:	10 91 cb 01 	lds	r17, 0x01CB	; 0x8001cb <__data_end+0x1>
     788:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <__data_end+0x2>
     78c:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <__data_end+0x3>
     790:	dc 01       	movw	r26, r24
     792:	cb 01       	movw	r24, r22
     794:	80 1b       	sub	r24, r16
     796:	91 0b       	sbc	r25, r17
     798:	a2 0b       	sbc	r26, r18
     79a:	b3 0b       	sbc	r27, r19
     79c:	89 3e       	cpi	r24, 0xE9	; 233
     79e:	93 40       	sbci	r25, 0x03	; 3
     7a0:	a1 05       	cpc	r26, r1
     7a2:	b1 05       	cpc	r27, r1
     7a4:	60 f0       	brcs	.+24     	; 0x7be <loop+0x46>
	{
		CountSeconde = millis();
     7a6:	0e 94 0d 0a 	call	0x141a	; 0x141a <millis>
     7aa:	60 93 ca 01 	sts	0x01CA, r22	; 0x8001ca <__data_end>
     7ae:	70 93 cb 01 	sts	0x01CB, r23	; 0x8001cb <__data_end+0x1>
     7b2:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <__data_end+0x2>
     7b6:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <__data_end+0x3>
		Lecture_Vitesse();
     7ba:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z15Lecture_Vitessev>
	}
	
	if ((millis() - CountSeconde) > 500)
     7be:	0e 94 0d 0a 	call	0x141a	; 0x141a <millis>
     7c2:	00 91 ca 01 	lds	r16, 0x01CA	; 0x8001ca <__data_end>
     7c6:	10 91 cb 01 	lds	r17, 0x01CB	; 0x8001cb <__data_end+0x1>
     7ca:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <__data_end+0x2>
     7ce:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <__data_end+0x3>
     7d2:	dc 01       	movw	r26, r24
     7d4:	cb 01       	movw	r24, r22
     7d6:	80 1b       	sub	r24, r16
     7d8:	91 0b       	sbc	r25, r17
     7da:	a2 0b       	sbc	r26, r18
     7dc:	b3 0b       	sbc	r27, r19
     7de:	85 3f       	cpi	r24, 0xF5	; 245
     7e0:	91 40       	sbci	r25, 0x01	; 1
     7e2:	a1 05       	cpc	r26, r1
     7e4:	b1 05       	cpc	r27, r1
     7e6:	70 f0       	brcs	.+28     	; 0x804 <loop+0x8c>
	{
		CountSeconde = millis();
     7e8:	0e 94 0d 0a 	call	0x141a	; 0x141a <millis>
     7ec:	60 93 ca 01 	sts	0x01CA, r22	; 0x8001ca <__data_end>
     7f0:	70 93 cb 01 	sts	0x01CB, r23	; 0x8001cb <__data_end+0x1>
     7f4:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <__data_end+0x2>
     7f8:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <__data_end+0x3>
		TensionBatterie();
	}
}
     7fc:	1f 91       	pop	r17
     7fe:	0f 91       	pop	r16
	}
	
	if ((millis() - CountSeconde) > 500)
	{
		CountSeconde = millis();
		TensionBatterie();
     800:	0c 94 48 03 	jmp	0x690	; 0x690 <_Z15TensionBatteriev>
	}
}
     804:	1f 91       	pop	r17
     806:	0f 91       	pop	r16
     808:	08 95       	ret

0000080a <__subsf3>:
     80a:	50 58       	subi	r21, 0x80	; 128

0000080c <__addsf3>:
     80c:	bb 27       	eor	r27, r27
     80e:	aa 27       	eor	r26, r26
     810:	0e 94 1d 04 	call	0x83a	; 0x83a <__addsf3x>
     814:	0c 94 90 05 	jmp	0xb20	; 0xb20 <__fp_round>
     818:	0e 94 82 05 	call	0xb04	; 0xb04 <__fp_pscA>
     81c:	38 f0       	brcs	.+14     	; 0x82c <__addsf3+0x20>
     81e:	0e 94 89 05 	call	0xb12	; 0xb12 <__fp_pscB>
     822:	20 f0       	brcs	.+8      	; 0x82c <__addsf3+0x20>
     824:	39 f4       	brne	.+14     	; 0x834 <__addsf3+0x28>
     826:	9f 3f       	cpi	r25, 0xFF	; 255
     828:	19 f4       	brne	.+6      	; 0x830 <__addsf3+0x24>
     82a:	26 f4       	brtc	.+8      	; 0x834 <__addsf3+0x28>
     82c:	0c 94 7f 05 	jmp	0xafe	; 0xafe <__fp_nan>
     830:	0e f4       	brtc	.+2      	; 0x834 <__addsf3+0x28>
     832:	e0 95       	com	r30
     834:	e7 fb       	bst	r30, 7
     836:	0c 94 79 05 	jmp	0xaf2	; 0xaf2 <__fp_inf>

0000083a <__addsf3x>:
     83a:	e9 2f       	mov	r30, r25
     83c:	0e 94 a1 05 	call	0xb42	; 0xb42 <__fp_split3>
     840:	58 f3       	brcs	.-42     	; 0x818 <__addsf3+0xc>
     842:	ba 17       	cp	r27, r26
     844:	62 07       	cpc	r22, r18
     846:	73 07       	cpc	r23, r19
     848:	84 07       	cpc	r24, r20
     84a:	95 07       	cpc	r25, r21
     84c:	20 f0       	brcs	.+8      	; 0x856 <__addsf3x+0x1c>
     84e:	79 f4       	brne	.+30     	; 0x86e <__addsf3x+0x34>
     850:	a6 f5       	brtc	.+104    	; 0x8ba <__addsf3x+0x80>
     852:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__fp_zero>
     856:	0e f4       	brtc	.+2      	; 0x85a <__addsf3x+0x20>
     858:	e0 95       	com	r30
     85a:	0b 2e       	mov	r0, r27
     85c:	ba 2f       	mov	r27, r26
     85e:	a0 2d       	mov	r26, r0
     860:	0b 01       	movw	r0, r22
     862:	b9 01       	movw	r22, r18
     864:	90 01       	movw	r18, r0
     866:	0c 01       	movw	r0, r24
     868:	ca 01       	movw	r24, r20
     86a:	a0 01       	movw	r20, r0
     86c:	11 24       	eor	r1, r1
     86e:	ff 27       	eor	r31, r31
     870:	59 1b       	sub	r21, r25
     872:	99 f0       	breq	.+38     	; 0x89a <__addsf3x+0x60>
     874:	59 3f       	cpi	r21, 0xF9	; 249
     876:	50 f4       	brcc	.+20     	; 0x88c <__addsf3x+0x52>
     878:	50 3e       	cpi	r21, 0xE0	; 224
     87a:	68 f1       	brcs	.+90     	; 0x8d6 <__addsf3x+0x9c>
     87c:	1a 16       	cp	r1, r26
     87e:	f0 40       	sbci	r31, 0x00	; 0
     880:	a2 2f       	mov	r26, r18
     882:	23 2f       	mov	r18, r19
     884:	34 2f       	mov	r19, r20
     886:	44 27       	eor	r20, r20
     888:	58 5f       	subi	r21, 0xF8	; 248
     88a:	f3 cf       	rjmp	.-26     	; 0x872 <__addsf3x+0x38>
     88c:	46 95       	lsr	r20
     88e:	37 95       	ror	r19
     890:	27 95       	ror	r18
     892:	a7 95       	ror	r26
     894:	f0 40       	sbci	r31, 0x00	; 0
     896:	53 95       	inc	r21
     898:	c9 f7       	brne	.-14     	; 0x88c <__addsf3x+0x52>
     89a:	7e f4       	brtc	.+30     	; 0x8ba <__addsf3x+0x80>
     89c:	1f 16       	cp	r1, r31
     89e:	ba 0b       	sbc	r27, r26
     8a0:	62 0b       	sbc	r22, r18
     8a2:	73 0b       	sbc	r23, r19
     8a4:	84 0b       	sbc	r24, r20
     8a6:	ba f0       	brmi	.+46     	; 0x8d6 <__addsf3x+0x9c>
     8a8:	91 50       	subi	r25, 0x01	; 1
     8aa:	a1 f0       	breq	.+40     	; 0x8d4 <__addsf3x+0x9a>
     8ac:	ff 0f       	add	r31, r31
     8ae:	bb 1f       	adc	r27, r27
     8b0:	66 1f       	adc	r22, r22
     8b2:	77 1f       	adc	r23, r23
     8b4:	88 1f       	adc	r24, r24
     8b6:	c2 f7       	brpl	.-16     	; 0x8a8 <__addsf3x+0x6e>
     8b8:	0e c0       	rjmp	.+28     	; 0x8d6 <__addsf3x+0x9c>
     8ba:	ba 0f       	add	r27, r26
     8bc:	62 1f       	adc	r22, r18
     8be:	73 1f       	adc	r23, r19
     8c0:	84 1f       	adc	r24, r20
     8c2:	48 f4       	brcc	.+18     	; 0x8d6 <__addsf3x+0x9c>
     8c4:	87 95       	ror	r24
     8c6:	77 95       	ror	r23
     8c8:	67 95       	ror	r22
     8ca:	b7 95       	ror	r27
     8cc:	f7 95       	ror	r31
     8ce:	9e 3f       	cpi	r25, 0xFE	; 254
     8d0:	08 f0       	brcs	.+2      	; 0x8d4 <__addsf3x+0x9a>
     8d2:	b0 cf       	rjmp	.-160    	; 0x834 <__addsf3+0x28>
     8d4:	93 95       	inc	r25
     8d6:	88 0f       	add	r24, r24
     8d8:	08 f0       	brcs	.+2      	; 0x8dc <__addsf3x+0xa2>
     8da:	99 27       	eor	r25, r25
     8dc:	ee 0f       	add	r30, r30
     8de:	97 95       	ror	r25
     8e0:	87 95       	ror	r24
     8e2:	08 95       	ret

000008e4 <__cmpsf2>:
     8e4:	0e 94 55 05 	call	0xaaa	; 0xaaa <__fp_cmp>
     8e8:	08 f4       	brcc	.+2      	; 0x8ec <__cmpsf2+0x8>
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	08 95       	ret

000008ee <__divsf3>:
     8ee:	0e 94 8b 04 	call	0x916	; 0x916 <__divsf3x>
     8f2:	0c 94 90 05 	jmp	0xb20	; 0xb20 <__fp_round>
     8f6:	0e 94 89 05 	call	0xb12	; 0xb12 <__fp_pscB>
     8fa:	58 f0       	brcs	.+22     	; 0x912 <__stack+0x13>
     8fc:	0e 94 82 05 	call	0xb04	; 0xb04 <__fp_pscA>
     900:	40 f0       	brcs	.+16     	; 0x912 <__stack+0x13>
     902:	29 f4       	brne	.+10     	; 0x90e <__stack+0xf>
     904:	5f 3f       	cpi	r21, 0xFF	; 255
     906:	29 f0       	breq	.+10     	; 0x912 <__stack+0x13>
     908:	0c 94 79 05 	jmp	0xaf2	; 0xaf2 <__fp_inf>
     90c:	51 11       	cpse	r21, r1
     90e:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__fp_szero>
     912:	0c 94 7f 05 	jmp	0xafe	; 0xafe <__fp_nan>

00000916 <__divsf3x>:
     916:	0e 94 a1 05 	call	0xb42	; 0xb42 <__fp_split3>
     91a:	68 f3       	brcs	.-38     	; 0x8f6 <__divsf3+0x8>

0000091c <__divsf3_pse>:
     91c:	99 23       	and	r25, r25
     91e:	b1 f3       	breq	.-20     	; 0x90c <__stack+0xd>
     920:	55 23       	and	r21, r21
     922:	91 f3       	breq	.-28     	; 0x908 <__stack+0x9>
     924:	95 1b       	sub	r25, r21
     926:	55 0b       	sbc	r21, r21
     928:	bb 27       	eor	r27, r27
     92a:	aa 27       	eor	r26, r26
     92c:	62 17       	cp	r22, r18
     92e:	73 07       	cpc	r23, r19
     930:	84 07       	cpc	r24, r20
     932:	38 f0       	brcs	.+14     	; 0x942 <__divsf3_pse+0x26>
     934:	9f 5f       	subi	r25, 0xFF	; 255
     936:	5f 4f       	sbci	r21, 0xFF	; 255
     938:	22 0f       	add	r18, r18
     93a:	33 1f       	adc	r19, r19
     93c:	44 1f       	adc	r20, r20
     93e:	aa 1f       	adc	r26, r26
     940:	a9 f3       	breq	.-22     	; 0x92c <__divsf3_pse+0x10>
     942:	35 d0       	rcall	.+106    	; 0x9ae <__divsf3_pse+0x92>
     944:	0e 2e       	mov	r0, r30
     946:	3a f0       	brmi	.+14     	; 0x956 <__divsf3_pse+0x3a>
     948:	e0 e8       	ldi	r30, 0x80	; 128
     94a:	32 d0       	rcall	.+100    	; 0x9b0 <__divsf3_pse+0x94>
     94c:	91 50       	subi	r25, 0x01	; 1
     94e:	50 40       	sbci	r21, 0x00	; 0
     950:	e6 95       	lsr	r30
     952:	00 1c       	adc	r0, r0
     954:	ca f7       	brpl	.-14     	; 0x948 <__divsf3_pse+0x2c>
     956:	2b d0       	rcall	.+86     	; 0x9ae <__divsf3_pse+0x92>
     958:	fe 2f       	mov	r31, r30
     95a:	29 d0       	rcall	.+82     	; 0x9ae <__divsf3_pse+0x92>
     95c:	66 0f       	add	r22, r22
     95e:	77 1f       	adc	r23, r23
     960:	88 1f       	adc	r24, r24
     962:	bb 1f       	adc	r27, r27
     964:	26 17       	cp	r18, r22
     966:	37 07       	cpc	r19, r23
     968:	48 07       	cpc	r20, r24
     96a:	ab 07       	cpc	r26, r27
     96c:	b0 e8       	ldi	r27, 0x80	; 128
     96e:	09 f0       	breq	.+2      	; 0x972 <__divsf3_pse+0x56>
     970:	bb 0b       	sbc	r27, r27
     972:	80 2d       	mov	r24, r0
     974:	bf 01       	movw	r22, r30
     976:	ff 27       	eor	r31, r31
     978:	93 58       	subi	r25, 0x83	; 131
     97a:	5f 4f       	sbci	r21, 0xFF	; 255
     97c:	3a f0       	brmi	.+14     	; 0x98c <__divsf3_pse+0x70>
     97e:	9e 3f       	cpi	r25, 0xFE	; 254
     980:	51 05       	cpc	r21, r1
     982:	78 f0       	brcs	.+30     	; 0x9a2 <__divsf3_pse+0x86>
     984:	0c 94 79 05 	jmp	0xaf2	; 0xaf2 <__fp_inf>
     988:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__fp_szero>
     98c:	5f 3f       	cpi	r21, 0xFF	; 255
     98e:	e4 f3       	brlt	.-8      	; 0x988 <__divsf3_pse+0x6c>
     990:	98 3e       	cpi	r25, 0xE8	; 232
     992:	d4 f3       	brlt	.-12     	; 0x988 <__divsf3_pse+0x6c>
     994:	86 95       	lsr	r24
     996:	77 95       	ror	r23
     998:	67 95       	ror	r22
     99a:	b7 95       	ror	r27
     99c:	f7 95       	ror	r31
     99e:	9f 5f       	subi	r25, 0xFF	; 255
     9a0:	c9 f7       	brne	.-14     	; 0x994 <__divsf3_pse+0x78>
     9a2:	88 0f       	add	r24, r24
     9a4:	91 1d       	adc	r25, r1
     9a6:	96 95       	lsr	r25
     9a8:	87 95       	ror	r24
     9aa:	97 f9       	bld	r25, 7
     9ac:	08 95       	ret
     9ae:	e1 e0       	ldi	r30, 0x01	; 1
     9b0:	66 0f       	add	r22, r22
     9b2:	77 1f       	adc	r23, r23
     9b4:	88 1f       	adc	r24, r24
     9b6:	bb 1f       	adc	r27, r27
     9b8:	62 17       	cp	r22, r18
     9ba:	73 07       	cpc	r23, r19
     9bc:	84 07       	cpc	r24, r20
     9be:	ba 07       	cpc	r27, r26
     9c0:	20 f0       	brcs	.+8      	; 0x9ca <__divsf3_pse+0xae>
     9c2:	62 1b       	sub	r22, r18
     9c4:	73 0b       	sbc	r23, r19
     9c6:	84 0b       	sbc	r24, r20
     9c8:	ba 0b       	sbc	r27, r26
     9ca:	ee 1f       	adc	r30, r30
     9cc:	88 f7       	brcc	.-30     	; 0x9b0 <__divsf3_pse+0x94>
     9ce:	e0 95       	com	r30
     9d0:	08 95       	ret

000009d2 <__fixunssfsi>:
     9d2:	0e 94 a9 05 	call	0xb52	; 0xb52 <__fp_splitA>
     9d6:	88 f0       	brcs	.+34     	; 0x9fa <__fixunssfsi+0x28>
     9d8:	9f 57       	subi	r25, 0x7F	; 127
     9da:	98 f0       	brcs	.+38     	; 0xa02 <__fixunssfsi+0x30>
     9dc:	b9 2f       	mov	r27, r25
     9de:	99 27       	eor	r25, r25
     9e0:	b7 51       	subi	r27, 0x17	; 23
     9e2:	b0 f0       	brcs	.+44     	; 0xa10 <__fixunssfsi+0x3e>
     9e4:	e1 f0       	breq	.+56     	; 0xa1e <__fixunssfsi+0x4c>
     9e6:	66 0f       	add	r22, r22
     9e8:	77 1f       	adc	r23, r23
     9ea:	88 1f       	adc	r24, r24
     9ec:	99 1f       	adc	r25, r25
     9ee:	1a f0       	brmi	.+6      	; 0x9f6 <__fixunssfsi+0x24>
     9f0:	ba 95       	dec	r27
     9f2:	c9 f7       	brne	.-14     	; 0x9e6 <__fixunssfsi+0x14>
     9f4:	14 c0       	rjmp	.+40     	; 0xa1e <__fixunssfsi+0x4c>
     9f6:	b1 30       	cpi	r27, 0x01	; 1
     9f8:	91 f0       	breq	.+36     	; 0xa1e <__fixunssfsi+0x4c>
     9fa:	0e 94 c3 05 	call	0xb86	; 0xb86 <__fp_zero>
     9fe:	b1 e0       	ldi	r27, 0x01	; 1
     a00:	08 95       	ret
     a02:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__fp_zero>
     a06:	67 2f       	mov	r22, r23
     a08:	78 2f       	mov	r23, r24
     a0a:	88 27       	eor	r24, r24
     a0c:	b8 5f       	subi	r27, 0xF8	; 248
     a0e:	39 f0       	breq	.+14     	; 0xa1e <__fixunssfsi+0x4c>
     a10:	b9 3f       	cpi	r27, 0xF9	; 249
     a12:	cc f3       	brlt	.-14     	; 0xa06 <__fixunssfsi+0x34>
     a14:	86 95       	lsr	r24
     a16:	77 95       	ror	r23
     a18:	67 95       	ror	r22
     a1a:	b3 95       	inc	r27
     a1c:	d9 f7       	brne	.-10     	; 0xa14 <__fixunssfsi+0x42>
     a1e:	3e f4       	brtc	.+14     	; 0xa2e <__fixunssfsi+0x5c>
     a20:	90 95       	com	r25
     a22:	80 95       	com	r24
     a24:	70 95       	com	r23
     a26:	61 95       	neg	r22
     a28:	7f 4f       	sbci	r23, 0xFF	; 255
     a2a:	8f 4f       	sbci	r24, 0xFF	; 255
     a2c:	9f 4f       	sbci	r25, 0xFF	; 255
     a2e:	08 95       	ret

00000a30 <__floatunsisf>:
     a30:	e8 94       	clt
     a32:	09 c0       	rjmp	.+18     	; 0xa46 <__floatsisf+0x12>

00000a34 <__floatsisf>:
     a34:	97 fb       	bst	r25, 7
     a36:	3e f4       	brtc	.+14     	; 0xa46 <__floatsisf+0x12>
     a38:	90 95       	com	r25
     a3a:	80 95       	com	r24
     a3c:	70 95       	com	r23
     a3e:	61 95       	neg	r22
     a40:	7f 4f       	sbci	r23, 0xFF	; 255
     a42:	8f 4f       	sbci	r24, 0xFF	; 255
     a44:	9f 4f       	sbci	r25, 0xFF	; 255
     a46:	99 23       	and	r25, r25
     a48:	a9 f0       	breq	.+42     	; 0xa74 <__floatsisf+0x40>
     a4a:	f9 2f       	mov	r31, r25
     a4c:	96 e9       	ldi	r25, 0x96	; 150
     a4e:	bb 27       	eor	r27, r27
     a50:	93 95       	inc	r25
     a52:	f6 95       	lsr	r31
     a54:	87 95       	ror	r24
     a56:	77 95       	ror	r23
     a58:	67 95       	ror	r22
     a5a:	b7 95       	ror	r27
     a5c:	f1 11       	cpse	r31, r1
     a5e:	f8 cf       	rjmp	.-16     	; 0xa50 <__floatsisf+0x1c>
     a60:	fa f4       	brpl	.+62     	; 0xaa0 <__floatsisf+0x6c>
     a62:	bb 0f       	add	r27, r27
     a64:	11 f4       	brne	.+4      	; 0xa6a <__floatsisf+0x36>
     a66:	60 ff       	sbrs	r22, 0
     a68:	1b c0       	rjmp	.+54     	; 0xaa0 <__floatsisf+0x6c>
     a6a:	6f 5f       	subi	r22, 0xFF	; 255
     a6c:	7f 4f       	sbci	r23, 0xFF	; 255
     a6e:	8f 4f       	sbci	r24, 0xFF	; 255
     a70:	9f 4f       	sbci	r25, 0xFF	; 255
     a72:	16 c0       	rjmp	.+44     	; 0xaa0 <__floatsisf+0x6c>
     a74:	88 23       	and	r24, r24
     a76:	11 f0       	breq	.+4      	; 0xa7c <__floatsisf+0x48>
     a78:	96 e9       	ldi	r25, 0x96	; 150
     a7a:	11 c0       	rjmp	.+34     	; 0xa9e <__floatsisf+0x6a>
     a7c:	77 23       	and	r23, r23
     a7e:	21 f0       	breq	.+8      	; 0xa88 <__floatsisf+0x54>
     a80:	9e e8       	ldi	r25, 0x8E	; 142
     a82:	87 2f       	mov	r24, r23
     a84:	76 2f       	mov	r23, r22
     a86:	05 c0       	rjmp	.+10     	; 0xa92 <__floatsisf+0x5e>
     a88:	66 23       	and	r22, r22
     a8a:	71 f0       	breq	.+28     	; 0xaa8 <__floatsisf+0x74>
     a8c:	96 e8       	ldi	r25, 0x86	; 134
     a8e:	86 2f       	mov	r24, r22
     a90:	70 e0       	ldi	r23, 0x00	; 0
     a92:	60 e0       	ldi	r22, 0x00	; 0
     a94:	2a f0       	brmi	.+10     	; 0xaa0 <__floatsisf+0x6c>
     a96:	9a 95       	dec	r25
     a98:	66 0f       	add	r22, r22
     a9a:	77 1f       	adc	r23, r23
     a9c:	88 1f       	adc	r24, r24
     a9e:	da f7       	brpl	.-10     	; 0xa96 <__floatsisf+0x62>
     aa0:	88 0f       	add	r24, r24
     aa2:	96 95       	lsr	r25
     aa4:	87 95       	ror	r24
     aa6:	97 f9       	bld	r25, 7
     aa8:	08 95       	ret

00000aaa <__fp_cmp>:
     aaa:	99 0f       	add	r25, r25
     aac:	00 08       	sbc	r0, r0
     aae:	55 0f       	add	r21, r21
     ab0:	aa 0b       	sbc	r26, r26
     ab2:	e0 e8       	ldi	r30, 0x80	; 128
     ab4:	fe ef       	ldi	r31, 0xFE	; 254
     ab6:	16 16       	cp	r1, r22
     ab8:	17 06       	cpc	r1, r23
     aba:	e8 07       	cpc	r30, r24
     abc:	f9 07       	cpc	r31, r25
     abe:	c0 f0       	brcs	.+48     	; 0xaf0 <__fp_cmp+0x46>
     ac0:	12 16       	cp	r1, r18
     ac2:	13 06       	cpc	r1, r19
     ac4:	e4 07       	cpc	r30, r20
     ac6:	f5 07       	cpc	r31, r21
     ac8:	98 f0       	brcs	.+38     	; 0xaf0 <__fp_cmp+0x46>
     aca:	62 1b       	sub	r22, r18
     acc:	73 0b       	sbc	r23, r19
     ace:	84 0b       	sbc	r24, r20
     ad0:	95 0b       	sbc	r25, r21
     ad2:	39 f4       	brne	.+14     	; 0xae2 <__fp_cmp+0x38>
     ad4:	0a 26       	eor	r0, r26
     ad6:	61 f0       	breq	.+24     	; 0xaf0 <__fp_cmp+0x46>
     ad8:	23 2b       	or	r18, r19
     ada:	24 2b       	or	r18, r20
     adc:	25 2b       	or	r18, r21
     ade:	21 f4       	brne	.+8      	; 0xae8 <__fp_cmp+0x3e>
     ae0:	08 95       	ret
     ae2:	0a 26       	eor	r0, r26
     ae4:	09 f4       	brne	.+2      	; 0xae8 <__fp_cmp+0x3e>
     ae6:	a1 40       	sbci	r26, 0x01	; 1
     ae8:	a6 95       	lsr	r26
     aea:	8f ef       	ldi	r24, 0xFF	; 255
     aec:	81 1d       	adc	r24, r1
     aee:	81 1d       	adc	r24, r1
     af0:	08 95       	ret

00000af2 <__fp_inf>:
     af2:	97 f9       	bld	r25, 7
     af4:	9f 67       	ori	r25, 0x7F	; 127
     af6:	80 e8       	ldi	r24, 0x80	; 128
     af8:	70 e0       	ldi	r23, 0x00	; 0
     afa:	60 e0       	ldi	r22, 0x00	; 0
     afc:	08 95       	ret

00000afe <__fp_nan>:
     afe:	9f ef       	ldi	r25, 0xFF	; 255
     b00:	80 ec       	ldi	r24, 0xC0	; 192
     b02:	08 95       	ret

00000b04 <__fp_pscA>:
     b04:	00 24       	eor	r0, r0
     b06:	0a 94       	dec	r0
     b08:	16 16       	cp	r1, r22
     b0a:	17 06       	cpc	r1, r23
     b0c:	18 06       	cpc	r1, r24
     b0e:	09 06       	cpc	r0, r25
     b10:	08 95       	ret

00000b12 <__fp_pscB>:
     b12:	00 24       	eor	r0, r0
     b14:	0a 94       	dec	r0
     b16:	12 16       	cp	r1, r18
     b18:	13 06       	cpc	r1, r19
     b1a:	14 06       	cpc	r1, r20
     b1c:	05 06       	cpc	r0, r21
     b1e:	08 95       	ret

00000b20 <__fp_round>:
     b20:	09 2e       	mov	r0, r25
     b22:	03 94       	inc	r0
     b24:	00 0c       	add	r0, r0
     b26:	11 f4       	brne	.+4      	; 0xb2c <__fp_round+0xc>
     b28:	88 23       	and	r24, r24
     b2a:	52 f0       	brmi	.+20     	; 0xb40 <__fp_round+0x20>
     b2c:	bb 0f       	add	r27, r27
     b2e:	40 f4       	brcc	.+16     	; 0xb40 <__fp_round+0x20>
     b30:	bf 2b       	or	r27, r31
     b32:	11 f4       	brne	.+4      	; 0xb38 <__fp_round+0x18>
     b34:	60 ff       	sbrs	r22, 0
     b36:	04 c0       	rjmp	.+8      	; 0xb40 <__fp_round+0x20>
     b38:	6f 5f       	subi	r22, 0xFF	; 255
     b3a:	7f 4f       	sbci	r23, 0xFF	; 255
     b3c:	8f 4f       	sbci	r24, 0xFF	; 255
     b3e:	9f 4f       	sbci	r25, 0xFF	; 255
     b40:	08 95       	ret

00000b42 <__fp_split3>:
     b42:	57 fd       	sbrc	r21, 7
     b44:	90 58       	subi	r25, 0x80	; 128
     b46:	44 0f       	add	r20, r20
     b48:	55 1f       	adc	r21, r21
     b4a:	59 f0       	breq	.+22     	; 0xb62 <__fp_splitA+0x10>
     b4c:	5f 3f       	cpi	r21, 0xFF	; 255
     b4e:	71 f0       	breq	.+28     	; 0xb6c <__fp_splitA+0x1a>
     b50:	47 95       	ror	r20

00000b52 <__fp_splitA>:
     b52:	88 0f       	add	r24, r24
     b54:	97 fb       	bst	r25, 7
     b56:	99 1f       	adc	r25, r25
     b58:	61 f0       	breq	.+24     	; 0xb72 <__fp_splitA+0x20>
     b5a:	9f 3f       	cpi	r25, 0xFF	; 255
     b5c:	79 f0       	breq	.+30     	; 0xb7c <__fp_splitA+0x2a>
     b5e:	87 95       	ror	r24
     b60:	08 95       	ret
     b62:	12 16       	cp	r1, r18
     b64:	13 06       	cpc	r1, r19
     b66:	14 06       	cpc	r1, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	f2 cf       	rjmp	.-28     	; 0xb50 <__fp_split3+0xe>
     b6c:	46 95       	lsr	r20
     b6e:	f1 df       	rcall	.-30     	; 0xb52 <__fp_splitA>
     b70:	08 c0       	rjmp	.+16     	; 0xb82 <__fp_splitA+0x30>
     b72:	16 16       	cp	r1, r22
     b74:	17 06       	cpc	r1, r23
     b76:	18 06       	cpc	r1, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	f1 cf       	rjmp	.-30     	; 0xb5e <__fp_splitA+0xc>
     b7c:	86 95       	lsr	r24
     b7e:	71 05       	cpc	r23, r1
     b80:	61 05       	cpc	r22, r1
     b82:	08 94       	sec
     b84:	08 95       	ret

00000b86 <__fp_zero>:
     b86:	e8 94       	clt

00000b88 <__fp_szero>:
     b88:	bb 27       	eor	r27, r27
     b8a:	66 27       	eor	r22, r22
     b8c:	77 27       	eor	r23, r23
     b8e:	cb 01       	movw	r24, r22
     b90:	97 f9       	bld	r25, 7
     b92:	08 95       	ret

00000b94 <__gesf2>:
     b94:	0e 94 55 05 	call	0xaaa	; 0xaaa <__fp_cmp>
     b98:	08 f4       	brcc	.+2      	; 0xb9c <__gesf2+0x8>
     b9a:	8f ef       	ldi	r24, 0xFF	; 255
     b9c:	08 95       	ret

00000b9e <__mulsf3>:
     b9e:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <__mulsf3x>
     ba2:	0c 94 90 05 	jmp	0xb20	; 0xb20 <__fp_round>
     ba6:	0e 94 82 05 	call	0xb04	; 0xb04 <__fp_pscA>
     baa:	38 f0       	brcs	.+14     	; 0xbba <__mulsf3+0x1c>
     bac:	0e 94 89 05 	call	0xb12	; 0xb12 <__fp_pscB>
     bb0:	20 f0       	brcs	.+8      	; 0xbba <__mulsf3+0x1c>
     bb2:	95 23       	and	r25, r21
     bb4:	11 f0       	breq	.+4      	; 0xbba <__mulsf3+0x1c>
     bb6:	0c 94 79 05 	jmp	0xaf2	; 0xaf2 <__fp_inf>
     bba:	0c 94 7f 05 	jmp	0xafe	; 0xafe <__fp_nan>
     bbe:	11 24       	eor	r1, r1
     bc0:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__fp_szero>

00000bc4 <__mulsf3x>:
     bc4:	0e 94 a1 05 	call	0xb42	; 0xb42 <__fp_split3>
     bc8:	70 f3       	brcs	.-36     	; 0xba6 <__mulsf3+0x8>

00000bca <__mulsf3_pse>:
     bca:	95 9f       	mul	r25, r21
     bcc:	c1 f3       	breq	.-16     	; 0xbbe <__mulsf3+0x20>
     bce:	95 0f       	add	r25, r21
     bd0:	50 e0       	ldi	r21, 0x00	; 0
     bd2:	55 1f       	adc	r21, r21
     bd4:	62 9f       	mul	r22, r18
     bd6:	f0 01       	movw	r30, r0
     bd8:	72 9f       	mul	r23, r18
     bda:	bb 27       	eor	r27, r27
     bdc:	f0 0d       	add	r31, r0
     bde:	b1 1d       	adc	r27, r1
     be0:	63 9f       	mul	r22, r19
     be2:	aa 27       	eor	r26, r26
     be4:	f0 0d       	add	r31, r0
     be6:	b1 1d       	adc	r27, r1
     be8:	aa 1f       	adc	r26, r26
     bea:	64 9f       	mul	r22, r20
     bec:	66 27       	eor	r22, r22
     bee:	b0 0d       	add	r27, r0
     bf0:	a1 1d       	adc	r26, r1
     bf2:	66 1f       	adc	r22, r22
     bf4:	82 9f       	mul	r24, r18
     bf6:	22 27       	eor	r18, r18
     bf8:	b0 0d       	add	r27, r0
     bfa:	a1 1d       	adc	r26, r1
     bfc:	62 1f       	adc	r22, r18
     bfe:	73 9f       	mul	r23, r19
     c00:	b0 0d       	add	r27, r0
     c02:	a1 1d       	adc	r26, r1
     c04:	62 1f       	adc	r22, r18
     c06:	83 9f       	mul	r24, r19
     c08:	a0 0d       	add	r26, r0
     c0a:	61 1d       	adc	r22, r1
     c0c:	22 1f       	adc	r18, r18
     c0e:	74 9f       	mul	r23, r20
     c10:	33 27       	eor	r19, r19
     c12:	a0 0d       	add	r26, r0
     c14:	61 1d       	adc	r22, r1
     c16:	23 1f       	adc	r18, r19
     c18:	84 9f       	mul	r24, r20
     c1a:	60 0d       	add	r22, r0
     c1c:	21 1d       	adc	r18, r1
     c1e:	82 2f       	mov	r24, r18
     c20:	76 2f       	mov	r23, r22
     c22:	6a 2f       	mov	r22, r26
     c24:	11 24       	eor	r1, r1
     c26:	9f 57       	subi	r25, 0x7F	; 127
     c28:	50 40       	sbci	r21, 0x00	; 0
     c2a:	9a f0       	brmi	.+38     	; 0xc52 <__mulsf3_pse+0x88>
     c2c:	f1 f0       	breq	.+60     	; 0xc6a <__mulsf3_pse+0xa0>
     c2e:	88 23       	and	r24, r24
     c30:	4a f0       	brmi	.+18     	; 0xc44 <__mulsf3_pse+0x7a>
     c32:	ee 0f       	add	r30, r30
     c34:	ff 1f       	adc	r31, r31
     c36:	bb 1f       	adc	r27, r27
     c38:	66 1f       	adc	r22, r22
     c3a:	77 1f       	adc	r23, r23
     c3c:	88 1f       	adc	r24, r24
     c3e:	91 50       	subi	r25, 0x01	; 1
     c40:	50 40       	sbci	r21, 0x00	; 0
     c42:	a9 f7       	brne	.-22     	; 0xc2e <__mulsf3_pse+0x64>
     c44:	9e 3f       	cpi	r25, 0xFE	; 254
     c46:	51 05       	cpc	r21, r1
     c48:	80 f0       	brcs	.+32     	; 0xc6a <__mulsf3_pse+0xa0>
     c4a:	0c 94 79 05 	jmp	0xaf2	; 0xaf2 <__fp_inf>
     c4e:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__fp_szero>
     c52:	5f 3f       	cpi	r21, 0xFF	; 255
     c54:	e4 f3       	brlt	.-8      	; 0xc4e <__mulsf3_pse+0x84>
     c56:	98 3e       	cpi	r25, 0xE8	; 232
     c58:	d4 f3       	brlt	.-12     	; 0xc4e <__mulsf3_pse+0x84>
     c5a:	86 95       	lsr	r24
     c5c:	77 95       	ror	r23
     c5e:	67 95       	ror	r22
     c60:	b7 95       	ror	r27
     c62:	f7 95       	ror	r31
     c64:	e7 95       	ror	r30
     c66:	9f 5f       	subi	r25, 0xFF	; 255
     c68:	c1 f7       	brne	.-16     	; 0xc5a <__mulsf3_pse+0x90>
     c6a:	fe 2b       	or	r31, r30
     c6c:	88 0f       	add	r24, r24
     c6e:	91 1d       	adc	r25, r1
     c70:	96 95       	lsr	r25
     c72:	87 95       	ror	r24
     c74:	97 f9       	bld	r25, 7
     c76:	08 95       	ret

00000c78 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     c78:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     c7a:	91 8d       	ldd	r25, Z+25	; 0x19
     c7c:	22 8d       	ldd	r18, Z+26	; 0x1a
     c7e:	89 2f       	mov	r24, r25
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	80 5c       	subi	r24, 0xC0	; 192
     c84:	9f 4f       	sbci	r25, 0xFF	; 255
     c86:	82 1b       	sub	r24, r18
     c88:	91 09       	sbc	r25, r1
}
     c8a:	8f 73       	andi	r24, 0x3F	; 63
     c8c:	99 27       	eor	r25, r25
     c8e:	08 95       	ret

00000c90 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     c90:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     c92:	91 8d       	ldd	r25, Z+25	; 0x19
     c94:	82 8d       	ldd	r24, Z+26	; 0x1a
     c96:	98 17       	cp	r25, r24
     c98:	31 f0       	breq	.+12     	; 0xca6 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     c9a:	82 8d       	ldd	r24, Z+26	; 0x1a
     c9c:	e8 0f       	add	r30, r24
     c9e:	f1 1d       	adc	r31, r1
     ca0:	85 8d       	ldd	r24, Z+29	; 0x1d
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     ca6:	8f ef       	ldi	r24, 0xFF	; 255
     ca8:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     caa:	08 95       	ret

00000cac <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     cac:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     cae:	91 8d       	ldd	r25, Z+25	; 0x19
     cb0:	82 8d       	ldd	r24, Z+26	; 0x1a
     cb2:	98 17       	cp	r25, r24
     cb4:	61 f0       	breq	.+24     	; 0xcce <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     cb6:	82 8d       	ldd	r24, Z+26	; 0x1a
     cb8:	df 01       	movw	r26, r30
     cba:	a8 0f       	add	r26, r24
     cbc:	b1 1d       	adc	r27, r1
     cbe:	5d 96       	adiw	r26, 0x1d	; 29
     cc0:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     cc2:	92 8d       	ldd	r25, Z+26	; 0x1a
     cc4:	9f 5f       	subi	r25, 0xFF	; 255
     cc6:	9f 73       	andi	r25, 0x3F	; 63
     cc8:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     cce:	8f ef       	ldi	r24, 0xFF	; 255
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     cd2:	08 95       	ret

00000cd4 <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
     cd4:	fc 01       	movw	r30, r24
     cd6:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
     cd8:	44 8d       	ldd	r20, Z+28	; 0x1c
     cda:	25 2f       	mov	r18, r21
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	84 2f       	mov	r24, r20
     ce0:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     ce2:	82 1b       	sub	r24, r18
     ce4:	93 0b       	sbc	r25, r19
     ce6:	54 17       	cp	r21, r20
     ce8:	10 f0       	brcs	.+4      	; 0xcee <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     cea:	cf 96       	adiw	r24, 0x3f	; 63
     cec:	08 95       	ret
  return tail - head - 1;
     cee:	01 97       	sbiw	r24, 0x01	; 1
}
     cf0:	08 95       	ret

00000cf2 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     cf2:	8e ec       	ldi	r24, 0xCE	; 206
     cf4:	97 e0       	ldi	r25, 0x07	; 7
     cf6:	89 2b       	or	r24, r25
     cf8:	49 f0       	breq	.+18     	; 0xd0c <_Z14serialEventRunv+0x1a>
     cfa:	80 e0       	ldi	r24, 0x00	; 0
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	89 2b       	or	r24, r25
     d00:	29 f0       	breq	.+10     	; 0xd0c <_Z14serialEventRunv+0x1a>
     d02:	0e 94 ce 07 	call	0xf9c	; 0xf9c <_Z17Serial0_availablev>
     d06:	81 11       	cpse	r24, r1
     d08:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     d0c:	08 95       	ret

00000d0e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     d0e:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     d10:	84 8d       	ldd	r24, Z+28	; 0x1c
     d12:	df 01       	movw	r26, r30
     d14:	a8 0f       	add	r26, r24
     d16:	b1 1d       	adc	r27, r1
     d18:	a3 5a       	subi	r26, 0xA3	; 163
     d1a:	bf 4f       	sbci	r27, 0xFF	; 255
     d1c:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     d1e:	84 8d       	ldd	r24, Z+28	; 0x1c
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	01 96       	adiw	r24, 0x01	; 1
     d24:	8f 73       	andi	r24, 0x3F	; 63
     d26:	99 27       	eor	r25, r25
     d28:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     d2a:	a6 89       	ldd	r26, Z+22	; 0x16
     d2c:	b7 89       	ldd	r27, Z+23	; 0x17
     d2e:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     d30:	a0 89       	ldd	r26, Z+16	; 0x10
     d32:	b1 89       	ldd	r27, Z+17	; 0x11
     d34:	8c 91       	ld	r24, X
     d36:	80 64       	ori	r24, 0x40	; 64
     d38:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     d3a:	93 8d       	ldd	r25, Z+27	; 0x1b
     d3c:	84 8d       	ldd	r24, Z+28	; 0x1c
     d3e:	98 13       	cpse	r25, r24
     d40:	06 c0       	rjmp	.+12     	; 0xd4e <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     d42:	02 88       	ldd	r0, Z+18	; 0x12
     d44:	f3 89       	ldd	r31, Z+19	; 0x13
     d46:	e0 2d       	mov	r30, r0
     d48:	80 81       	ld	r24, Z
     d4a:	8f 7d       	andi	r24, 0xDF	; 223
     d4c:	80 83       	st	Z, r24
     d4e:	08 95       	ret

00000d50 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     d50:	ef 92       	push	r14
     d52:	ff 92       	push	r15
     d54:	0f 93       	push	r16
     d56:	1f 93       	push	r17
     d58:	cf 93       	push	r28
     d5a:	df 93       	push	r29
     d5c:	ec 01       	movw	r28, r24
  _written = true;
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     d62:	9b 8d       	ldd	r25, Y+27	; 0x1b
     d64:	8c 8d       	ldd	r24, Y+28	; 0x1c
     d66:	98 13       	cpse	r25, r24
     d68:	05 c0       	rjmp	.+10     	; 0xd74 <_ZN14HardwareSerial5writeEh+0x24>
     d6a:	e8 89       	ldd	r30, Y+16	; 0x10
     d6c:	f9 89       	ldd	r31, Y+17	; 0x11
     d6e:	80 81       	ld	r24, Z
     d70:	85 fd       	sbrc	r24, 5
     d72:	24 c0       	rjmp	.+72     	; 0xdbc <_ZN14HardwareSerial5writeEh+0x6c>
     d74:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     d76:	0b 8d       	ldd	r16, Y+27	; 0x1b
     d78:	10 e0       	ldi	r17, 0x00	; 0
     d7a:	0f 5f       	subi	r16, 0xFF	; 255
     d7c:	1f 4f       	sbci	r17, 0xFF	; 255
     d7e:	0f 73       	andi	r16, 0x3F	; 63
     d80:	11 27       	eor	r17, r17
     d82:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     d84:	8c 8d       	ldd	r24, Y+28	; 0x1c
     d86:	e8 12       	cpse	r14, r24
     d88:	0c c0       	rjmp	.+24     	; 0xda2 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     d8a:	0f b6       	in	r0, 0x3f	; 63
     d8c:	07 fc       	sbrc	r0, 7
     d8e:	fa cf       	rjmp	.-12     	; 0xd84 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     d90:	e8 89       	ldd	r30, Y+16	; 0x10
     d92:	f9 89       	ldd	r31, Y+17	; 0x11
     d94:	80 81       	ld	r24, Z
     d96:	85 ff       	sbrs	r24, 5
     d98:	f5 cf       	rjmp	.-22     	; 0xd84 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     d9a:	ce 01       	movw	r24, r28
     d9c:	0e 94 87 06 	call	0xd0e	; 0xd0e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     da0:	f1 cf       	rjmp	.-30     	; 0xd84 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     da2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     da4:	fe 01       	movw	r30, r28
     da6:	e8 0f       	add	r30, r24
     da8:	f1 1d       	adc	r31, r1
     daa:	e3 5a       	subi	r30, 0xA3	; 163
     dac:	ff 4f       	sbci	r31, 0xFF	; 255
     dae:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
     db0:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     db2:	ea 89       	ldd	r30, Y+18	; 0x12
     db4:	fb 89       	ldd	r31, Y+19	; 0x13
     db6:	80 81       	ld	r24, Z
     db8:	80 62       	ori	r24, 0x20	; 32
     dba:	07 c0       	rjmp	.+14     	; 0xdca <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     dbc:	ee 89       	ldd	r30, Y+22	; 0x16
     dbe:	ff 89       	ldd	r31, Y+23	; 0x17
     dc0:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     dc2:	e8 89       	ldd	r30, Y+16	; 0x10
     dc4:	f9 89       	ldd	r31, Y+17	; 0x11
     dc6:	80 81       	ld	r24, Z
     dc8:	80 64       	ori	r24, 0x40	; 64
     dca:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	df 91       	pop	r29
     dd2:	cf 91       	pop	r28
     dd4:	1f 91       	pop	r17
     dd6:	0f 91       	pop	r16
     dd8:	ff 90       	pop	r15
     dda:	ef 90       	pop	r14
     ddc:	08 95       	ret

00000dde <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     dde:	cf 93       	push	r28
     de0:	df 93       	push	r29
     de2:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     de4:	88 8d       	ldd	r24, Y+24	; 0x18
     de6:	88 23       	and	r24, r24
     de8:	c9 f0       	breq	.+50     	; 0xe1c <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     dea:	ea 89       	ldd	r30, Y+18	; 0x12
     dec:	fb 89       	ldd	r31, Y+19	; 0x13
     dee:	80 81       	ld	r24, Z
     df0:	85 fd       	sbrc	r24, 5
     df2:	05 c0       	rjmp	.+10     	; 0xdfe <_ZN14HardwareSerial5flushEv+0x20>
     df4:	a8 89       	ldd	r26, Y+16	; 0x10
     df6:	b9 89       	ldd	r27, Y+17	; 0x11
     df8:	8c 91       	ld	r24, X
     dfa:	86 fd       	sbrc	r24, 6
     dfc:	0f c0       	rjmp	.+30     	; 0xe1c <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     dfe:	0f b6       	in	r0, 0x3f	; 63
     e00:	07 fc       	sbrc	r0, 7
     e02:	f5 cf       	rjmp	.-22     	; 0xdee <_ZN14HardwareSerial5flushEv+0x10>
     e04:	80 81       	ld	r24, Z
     e06:	85 ff       	sbrs	r24, 5
     e08:	f2 cf       	rjmp	.-28     	; 0xdee <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     e0a:	a8 89       	ldd	r26, Y+16	; 0x10
     e0c:	b9 89       	ldd	r27, Y+17	; 0x11
     e0e:	8c 91       	ld	r24, X
     e10:	85 ff       	sbrs	r24, 5
     e12:	ed cf       	rjmp	.-38     	; 0xdee <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     e14:	ce 01       	movw	r24, r28
     e16:	0e 94 87 06 	call	0xd0e	; 0xd0e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     e1a:	e7 cf       	rjmp	.-50     	; 0xdea <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     e1c:	df 91       	pop	r29
     e1e:	cf 91       	pop	r28
     e20:	08 95       	ret

00000e22 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     e22:	cf 92       	push	r12
     e24:	df 92       	push	r13
     e26:	ef 92       	push	r14
     e28:	ff 92       	push	r15
     e2a:	1f 93       	push	r17
     e2c:	cf 93       	push	r28
     e2e:	df 93       	push	r29
     e30:	ec 01       	movw	r28, r24
     e32:	6a 01       	movw	r12, r20
     e34:	7b 01       	movw	r14, r22
     e36:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     e38:	e8 89       	ldd	r30, Y+16	; 0x10
     e3a:	f9 89       	ldd	r31, Y+17	; 0x11
     e3c:	82 e0       	ldi	r24, 0x02	; 2
     e3e:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     e40:	41 15       	cp	r20, r1
     e42:	51 4e       	sbci	r21, 0xE1	; 225
     e44:	61 05       	cpc	r22, r1
     e46:	71 05       	cpc	r23, r1
     e48:	b1 f0       	breq	.+44     	; 0xe76 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     e4a:	60 e0       	ldi	r22, 0x00	; 0
     e4c:	79 e0       	ldi	r23, 0x09	; 9
     e4e:	8d e3       	ldi	r24, 0x3D	; 61
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	a7 01       	movw	r20, r14
     e54:	96 01       	movw	r18, r12
     e56:	0e 94 b2 0a 	call	0x1564	; 0x1564 <__udivmodsi4>
     e5a:	da 01       	movw	r26, r20
     e5c:	c9 01       	movw	r24, r18
     e5e:	01 97       	sbiw	r24, 0x01	; 1
     e60:	a1 09       	sbc	r26, r1
     e62:	b1 09       	sbc	r27, r1
     e64:	b6 95       	lsr	r27
     e66:	a7 95       	ror	r26
     e68:	97 95       	ror	r25
     e6a:	87 95       	ror	r24
     e6c:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     e6e:	21 15       	cp	r18, r1
     e70:	80 e1       	ldi	r24, 0x10	; 16
     e72:	38 07       	cpc	r19, r24
     e74:	a8 f0       	brcs	.+42     	; 0xea0 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     e76:	e8 89       	ldd	r30, Y+16	; 0x10
     e78:	f9 89       	ldd	r31, Y+17	; 0x11
     e7a:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     e7c:	60 e8       	ldi	r22, 0x80	; 128
     e7e:	74 e8       	ldi	r23, 0x84	; 132
     e80:	8e e1       	ldi	r24, 0x1E	; 30
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	a7 01       	movw	r20, r14
     e86:	96 01       	movw	r18, r12
     e88:	0e 94 b2 0a 	call	0x1564	; 0x1564 <__udivmodsi4>
     e8c:	da 01       	movw	r26, r20
     e8e:	c9 01       	movw	r24, r18
     e90:	01 97       	sbiw	r24, 0x01	; 1
     e92:	a1 09       	sbc	r26, r1
     e94:	b1 09       	sbc	r27, r1
     e96:	b6 95       	lsr	r27
     e98:	a7 95       	ror	r26
     e9a:	97 95       	ror	r25
     e9c:	87 95       	ror	r24
     e9e:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     ea0:	ec 85       	ldd	r30, Y+12	; 0x0c
     ea2:	fd 85       	ldd	r31, Y+13	; 0x0d
     ea4:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     ea6:	ee 85       	ldd	r30, Y+14	; 0x0e
     ea8:	ff 85       	ldd	r31, Y+15	; 0x0f
     eaa:	20 83       	st	Z, r18

  _written = false;
     eac:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     eae:	ec 89       	ldd	r30, Y+20	; 0x14
     eb0:	fd 89       	ldd	r31, Y+21	; 0x15
     eb2:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     eb4:	ea 89       	ldd	r30, Y+18	; 0x12
     eb6:	fb 89       	ldd	r31, Y+19	; 0x13
     eb8:	80 81       	ld	r24, Z
     eba:	80 61       	ori	r24, 0x10	; 16
     ebc:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     ebe:	ea 89       	ldd	r30, Y+18	; 0x12
     ec0:	fb 89       	ldd	r31, Y+19	; 0x13
     ec2:	80 81       	ld	r24, Z
     ec4:	88 60       	ori	r24, 0x08	; 8
     ec6:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     ec8:	ea 89       	ldd	r30, Y+18	; 0x12
     eca:	fb 89       	ldd	r31, Y+19	; 0x13
     ecc:	80 81       	ld	r24, Z
     ece:	80 68       	ori	r24, 0x80	; 128
     ed0:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     ed2:	ea 89       	ldd	r30, Y+18	; 0x12
     ed4:	fb 89       	ldd	r31, Y+19	; 0x13
     ed6:	80 81       	ld	r24, Z
     ed8:	8f 7d       	andi	r24, 0xDF	; 223
     eda:	80 83       	st	Z, r24
}
     edc:	df 91       	pop	r29
     ede:	cf 91       	pop	r28
     ee0:	1f 91       	pop	r17
     ee2:	ff 90       	pop	r15
     ee4:	ef 90       	pop	r14
     ee6:	df 90       	pop	r13
     ee8:	cf 90       	pop	r12
     eea:	08 95       	ret

00000eec <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     eec:	1f 92       	push	r1
     eee:	0f 92       	push	r0
     ef0:	0f b6       	in	r0, 0x3f	; 63
     ef2:	0f 92       	push	r0
     ef4:	11 24       	eor	r1, r1
     ef6:	2f 93       	push	r18
     ef8:	8f 93       	push	r24
     efa:	9f 93       	push	r25
     efc:	ef 93       	push	r30
     efe:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     f00:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <Serial+0x10>
     f04:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <Serial+0x11>
     f08:	80 81       	ld	r24, Z
     f0a:	e0 91 23 02 	lds	r30, 0x0223	; 0x800223 <Serial+0x16>
     f0e:	f0 91 24 02 	lds	r31, 0x0224	; 0x800224 <Serial+0x17>
     f12:	82 fd       	sbrc	r24, 2
     f14:	12 c0       	rjmp	.+36     	; 0xf3a <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     f16:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     f18:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <Serial+0x19>
     f1c:	8f 5f       	subi	r24, 0xFF	; 255
     f1e:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     f20:	20 91 27 02 	lds	r18, 0x0227	; 0x800227 <Serial+0x1a>
     f24:	82 17       	cp	r24, r18
     f26:	51 f0       	breq	.+20     	; 0xf3c <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     f28:	e0 91 26 02 	lds	r30, 0x0226	; 0x800226 <Serial+0x19>
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	e3 5f       	subi	r30, 0xF3	; 243
     f30:	fd 4f       	sbci	r31, 0xFD	; 253
     f32:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     f34:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <Serial+0x19>
     f38:	01 c0       	rjmp	.+2      	; 0xf3c <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     f3a:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     f3c:	ff 91       	pop	r31
     f3e:	ef 91       	pop	r30
     f40:	9f 91       	pop	r25
     f42:	8f 91       	pop	r24
     f44:	2f 91       	pop	r18
     f46:	0f 90       	pop	r0
     f48:	0f be       	out	0x3f, r0	; 63
     f4a:	0f 90       	pop	r0
     f4c:	1f 90       	pop	r1
     f4e:	18 95       	reti

00000f50 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     f50:	1f 92       	push	r1
     f52:	0f 92       	push	r0
     f54:	0f b6       	in	r0, 0x3f	; 63
     f56:	0f 92       	push	r0
     f58:	11 24       	eor	r1, r1
     f5a:	2f 93       	push	r18
     f5c:	3f 93       	push	r19
     f5e:	4f 93       	push	r20
     f60:	5f 93       	push	r21
     f62:	6f 93       	push	r22
     f64:	7f 93       	push	r23
     f66:	8f 93       	push	r24
     f68:	9f 93       	push	r25
     f6a:	af 93       	push	r26
     f6c:	bf 93       	push	r27
     f6e:	ef 93       	push	r30
     f70:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     f72:	8d e0       	ldi	r24, 0x0D	; 13
     f74:	92 e0       	ldi	r25, 0x02	; 2
     f76:	0e 94 87 06 	call	0xd0e	; 0xd0e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     f7a:	ff 91       	pop	r31
     f7c:	ef 91       	pop	r30
     f7e:	bf 91       	pop	r27
     f80:	af 91       	pop	r26
     f82:	9f 91       	pop	r25
     f84:	8f 91       	pop	r24
     f86:	7f 91       	pop	r23
     f88:	6f 91       	pop	r22
     f8a:	5f 91       	pop	r21
     f8c:	4f 91       	pop	r20
     f8e:	3f 91       	pop	r19
     f90:	2f 91       	pop	r18
     f92:	0f 90       	pop	r0
     f94:	0f be       	out	0x3f, r0	; 63
     f96:	0f 90       	pop	r0
     f98:	1f 90       	pop	r1
     f9a:	18 95       	reti

00000f9c <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     f9c:	8d e0       	ldi	r24, 0x0D	; 13
     f9e:	92 e0       	ldi	r25, 0x02	; 2
     fa0:	0e 94 3c 06 	call	0xc78	; 0xc78 <_ZN14HardwareSerial9availableEv>
     fa4:	21 e0       	ldi	r18, 0x01	; 1
     fa6:	89 2b       	or	r24, r25
     fa8:	09 f4       	brne	.+2      	; 0xfac <_Z17Serial0_availablev+0x10>
     faa:	20 e0       	ldi	r18, 0x00	; 0
}
     fac:	82 2f       	mov	r24, r18
     fae:	08 95       	ret

00000fb0 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     fb0:	ed e0       	ldi	r30, 0x0D	; 13
     fb2:	f2 e0       	ldi	r31, 0x02	; 2
     fb4:	13 82       	std	Z+3, r1	; 0x03
     fb6:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     fb8:	88 ee       	ldi	r24, 0xE8	; 232
     fba:	93 e0       	ldi	r25, 0x03	; 3
     fbc:	a0 e0       	ldi	r26, 0x00	; 0
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	84 83       	std	Z+4, r24	; 0x04
     fc2:	95 83       	std	Z+5, r25	; 0x05
     fc4:	a6 83       	std	Z+6, r26	; 0x06
     fc6:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     fc8:	8c ea       	ldi	r24, 0xAC	; 172
     fca:	91 e0       	ldi	r25, 0x01	; 1
     fcc:	91 83       	std	Z+1, r25	; 0x01
     fce:	80 83       	st	Z, r24
     fd0:	85 ec       	ldi	r24, 0xC5	; 197
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	95 87       	std	Z+13, r25	; 0x0d
     fd6:	84 87       	std	Z+12, r24	; 0x0c
     fd8:	84 ec       	ldi	r24, 0xC4	; 196
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	97 87       	std	Z+15, r25	; 0x0f
     fde:	86 87       	std	Z+14, r24	; 0x0e
     fe0:	80 ec       	ldi	r24, 0xC0	; 192
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	91 8b       	std	Z+17, r25	; 0x11
     fe6:	80 8b       	std	Z+16, r24	; 0x10
     fe8:	81 ec       	ldi	r24, 0xC1	; 193
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	93 8b       	std	Z+19, r25	; 0x13
     fee:	82 8b       	std	Z+18, r24	; 0x12
     ff0:	82 ec       	ldi	r24, 0xC2	; 194
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	95 8b       	std	Z+21, r25	; 0x15
     ff6:	84 8b       	std	Z+20, r24	; 0x14
     ff8:	86 ec       	ldi	r24, 0xC6	; 198
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	97 8b       	std	Z+23, r25	; 0x17
     ffe:	86 8b       	std	Z+22, r24	; 0x16
    1000:	11 8e       	std	Z+25, r1	; 0x19
    1002:	12 8e       	std	Z+26, r1	; 0x1a
    1004:	13 8e       	std	Z+27, r1	; 0x1b
    1006:	14 8e       	std	Z+28, r1	; 0x1c
    1008:	08 95       	ret

0000100a <initVariant>:
    100a:	08 95       	ret

0000100c <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    100c:	0e 94 19 0a 	call	0x1432	; 0x1432 <init>

	initVariant();
    1010:	0e 94 05 08 	call	0x100a	; 0x100a <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1014:	0e 94 e7 02 	call	0x5ce	; 0x5ce <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1018:	c9 e7       	ldi	r28, 0x79	; 121
    101a:	d6 e0       	ldi	r29, 0x06	; 6
#endif
	
	setup();
    
	for (;;) {
		loop();
    101c:	0e 94 bc 03 	call	0x778	; 0x778 <loop>
		if (serialEventRun) serialEventRun();
    1020:	20 97       	sbiw	r28, 0x00	; 0
    1022:	e1 f3       	breq	.-8      	; 0x101c <main+0x10>
    1024:	0e 94 79 06 	call	0xcf2	; 0xcf2 <_Z14serialEventRunv>
    1028:	f9 cf       	rjmp	.-14     	; 0x101c <main+0x10>

0000102a <_ZN5Print5writeEPKhj>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    102a:	cf 92       	push	r12
    102c:	df 92       	push	r13
    102e:	ef 92       	push	r14
    1030:	ff 92       	push	r15
    1032:	0f 93       	push	r16
    1034:	1f 93       	push	r17
    1036:	cf 93       	push	r28
    1038:	df 93       	push	r29
    103a:	6c 01       	movw	r12, r24
    103c:	7a 01       	movw	r14, r20
    103e:	8b 01       	movw	r16, r22
    1040:	c0 e0       	ldi	r28, 0x00	; 0
    1042:	d0 e0       	ldi	r29, 0x00	; 0
    1044:	ce 15       	cp	r28, r14
    1046:	df 05       	cpc	r29, r15
    1048:	81 f0       	breq	.+32     	; 0x106a <_ZN5Print5writeEPKhj+0x40>
    104a:	d8 01       	movw	r26, r16
    104c:	6d 91       	ld	r22, X+
    104e:	8d 01       	movw	r16, r26
    1050:	d6 01       	movw	r26, r12
    1052:	ed 91       	ld	r30, X+
    1054:	fc 91       	ld	r31, X
    1056:	01 90       	ld	r0, Z+
    1058:	f0 81       	ld	r31, Z
    105a:	e0 2d       	mov	r30, r0
    105c:	c6 01       	movw	r24, r12
    105e:	09 95       	icall
    1060:	89 2b       	or	r24, r25
    1062:	11 f0       	breq	.+4      	; 0x1068 <_ZN5Print5writeEPKhj+0x3e>
    1064:	21 96       	adiw	r28, 0x01	; 1
    1066:	ee cf       	rjmp	.-36     	; 0x1044 <_ZN5Print5writeEPKhj+0x1a>
    1068:	7e 01       	movw	r14, r28
    106a:	c7 01       	movw	r24, r14
    106c:	df 91       	pop	r29
    106e:	cf 91       	pop	r28
    1070:	1f 91       	pop	r17
    1072:	0f 91       	pop	r16
    1074:	ff 90       	pop	r15
    1076:	ef 90       	pop	r14
    1078:	df 90       	pop	r13
    107a:	cf 90       	pop	r12
    107c:	08 95       	ret

0000107e <_ZN5Print5writeEPKc>:
    107e:	61 15       	cp	r22, r1
    1080:	71 05       	cpc	r23, r1
    1082:	79 f0       	breq	.+30     	; 0x10a2 <_ZN5Print5writeEPKc+0x24>
    1084:	fb 01       	movw	r30, r22
    1086:	01 90       	ld	r0, Z+
    1088:	00 20       	and	r0, r0
    108a:	e9 f7       	brne	.-6      	; 0x1086 <_ZN5Print5writeEPKc+0x8>
    108c:	31 97       	sbiw	r30, 0x01	; 1
    108e:	af 01       	movw	r20, r30
    1090:	46 1b       	sub	r20, r22
    1092:	57 0b       	sbc	r21, r23
    1094:	dc 01       	movw	r26, r24
    1096:	ed 91       	ld	r30, X+
    1098:	fc 91       	ld	r31, X
    109a:	02 80       	ldd	r0, Z+2	; 0x02
    109c:	f3 81       	ldd	r31, Z+3	; 0x03
    109e:	e0 2d       	mov	r30, r0
    10a0:	09 94       	ijmp
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	08 95       	ret

000010a8 <_ZN5Print5printEPKc>:
    10a8:	0c 94 3f 08 	jmp	0x107e	; 0x107e <_ZN5Print5writeEPKc>

000010ac <_ZN5Print5printEc>:
    10ac:	dc 01       	movw	r26, r24
    10ae:	ed 91       	ld	r30, X+
    10b0:	fc 91       	ld	r31, X
    10b2:	01 90       	ld	r0, Z+
    10b4:	f0 81       	ld	r31, Z
    10b6:	e0 2d       	mov	r30, r0
    10b8:	09 94       	ijmp

000010ba <_ZN5Print7printlnEv>:
    10ba:	6a eb       	ldi	r22, 0xBA	; 186
    10bc:	71 e0       	ldi	r23, 0x01	; 1
    10be:	0c 94 3f 08 	jmp	0x107e	; 0x107e <_ZN5Print5writeEPKc>

000010c2 <_ZN5Print7printlnEPKc>:
    10c2:	0f 93       	push	r16
    10c4:	1f 93       	push	r17
    10c6:	cf 93       	push	r28
    10c8:	df 93       	push	r29
    10ca:	ec 01       	movw	r28, r24
    10cc:	0e 94 3f 08 	call	0x107e	; 0x107e <_ZN5Print5writeEPKc>
    10d0:	8c 01       	movw	r16, r24
    10d2:	ce 01       	movw	r24, r28
    10d4:	0e 94 5d 08 	call	0x10ba	; 0x10ba <_ZN5Print7printlnEv>
    10d8:	80 0f       	add	r24, r16
    10da:	91 1f       	adc	r25, r17
    10dc:	df 91       	pop	r29
    10de:	cf 91       	pop	r28
    10e0:	1f 91       	pop	r17
    10e2:	0f 91       	pop	r16
    10e4:	08 95       	ret

000010e6 <_ZN5Print11printNumberEmh>:
    10e6:	8f 92       	push	r8
    10e8:	9f 92       	push	r9
    10ea:	af 92       	push	r10
    10ec:	bf 92       	push	r11
    10ee:	ef 92       	push	r14
    10f0:	ff 92       	push	r15
    10f2:	0f 93       	push	r16
    10f4:	1f 93       	push	r17
    10f6:	cf 93       	push	r28
    10f8:	df 93       	push	r29
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
    10fe:	a1 97       	sbiw	r28, 0x21	; 33
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	f8 94       	cli
    1104:	de bf       	out	0x3e, r29	; 62
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	cd bf       	out	0x3d, r28	; 61
    110a:	7c 01       	movw	r14, r24
    110c:	fa 01       	movw	r30, r20
    110e:	cb 01       	movw	r24, r22
    1110:	19 a2       	std	Y+33, r1	; 0x21
    1112:	22 30       	cpi	r18, 0x02	; 2
    1114:	08 f4       	brcc	.+2      	; 0x1118 <_ZN5Print11printNumberEmh+0x32>
    1116:	2a e0       	ldi	r18, 0x0A	; 10
    1118:	8e 01       	movw	r16, r28
    111a:	0f 5d       	subi	r16, 0xDF	; 223
    111c:	1f 4f       	sbci	r17, 0xFF	; 255
    111e:	82 2e       	mov	r8, r18
    1120:	91 2c       	mov	r9, r1
    1122:	a1 2c       	mov	r10, r1
    1124:	b1 2c       	mov	r11, r1
    1126:	bf 01       	movw	r22, r30
    1128:	a5 01       	movw	r20, r10
    112a:	94 01       	movw	r18, r8
    112c:	0e 94 b2 0a 	call	0x1564	; 0x1564 <__udivmodsi4>
    1130:	f9 01       	movw	r30, r18
    1132:	ca 01       	movw	r24, r20
    1134:	01 50       	subi	r16, 0x01	; 1
    1136:	11 09       	sbc	r17, r1
    1138:	6a 30       	cpi	r22, 0x0A	; 10
    113a:	10 f4       	brcc	.+4      	; 0x1140 <_ZN5Print11printNumberEmh+0x5a>
    113c:	60 5d       	subi	r22, 0xD0	; 208
    113e:	01 c0       	rjmp	.+2      	; 0x1142 <_ZN5Print11printNumberEmh+0x5c>
    1140:	69 5c       	subi	r22, 0xC9	; 201
    1142:	d8 01       	movw	r26, r16
    1144:	6c 93       	st	X, r22
    1146:	23 2b       	or	r18, r19
    1148:	24 2b       	or	r18, r20
    114a:	25 2b       	or	r18, r21
    114c:	61 f7       	brne	.-40     	; 0x1126 <_ZN5Print11printNumberEmh+0x40>
    114e:	b8 01       	movw	r22, r16
    1150:	c7 01       	movw	r24, r14
    1152:	0e 94 3f 08 	call	0x107e	; 0x107e <_ZN5Print5writeEPKc>
    1156:	a1 96       	adiw	r28, 0x21	; 33
    1158:	0f b6       	in	r0, 0x3f	; 63
    115a:	f8 94       	cli
    115c:	de bf       	out	0x3e, r29	; 62
    115e:	0f be       	out	0x3f, r0	; 63
    1160:	cd bf       	out	0x3d, r28	; 61
    1162:	df 91       	pop	r29
    1164:	cf 91       	pop	r28
    1166:	1f 91       	pop	r17
    1168:	0f 91       	pop	r16
    116a:	ff 90       	pop	r15
    116c:	ef 90       	pop	r14
    116e:	bf 90       	pop	r11
    1170:	af 90       	pop	r10
    1172:	9f 90       	pop	r9
    1174:	8f 90       	pop	r8
    1176:	08 95       	ret

00001178 <_ZN5Print5printEmi>:
    1178:	21 15       	cp	r18, r1
    117a:	31 05       	cpc	r19, r1
    117c:	41 f4       	brne	.+16     	; 0x118e <_ZN5Print5printEmi+0x16>
    117e:	dc 01       	movw	r26, r24
    1180:	ed 91       	ld	r30, X+
    1182:	fc 91       	ld	r31, X
    1184:	01 90       	ld	r0, Z+
    1186:	f0 81       	ld	r31, Z
    1188:	e0 2d       	mov	r30, r0
    118a:	64 2f       	mov	r22, r20
    118c:	09 94       	ijmp
    118e:	0c 94 73 08 	jmp	0x10e6	; 0x10e6 <_ZN5Print11printNumberEmh>

00001192 <_ZN5Print5printEhi>:
    1192:	9a 01       	movw	r18, r20
    1194:	46 2f       	mov	r20, r22
    1196:	50 e0       	ldi	r21, 0x00	; 0
    1198:	60 e0       	ldi	r22, 0x00	; 0
    119a:	70 e0       	ldi	r23, 0x00	; 0
    119c:	0c 94 bc 08 	jmp	0x1178	; 0x1178 <_ZN5Print5printEmi>

000011a0 <_ZN5Print5printEji>:
    11a0:	9a 01       	movw	r18, r20
    11a2:	ab 01       	movw	r20, r22
    11a4:	60 e0       	ldi	r22, 0x00	; 0
    11a6:	70 e0       	ldi	r23, 0x00	; 0
    11a8:	0c 94 bc 08 	jmp	0x1178	; 0x1178 <_ZN5Print5printEmi>

000011ac <_ZN5Print10printFloatEdh>:
    11ac:	7f 92       	push	r7
    11ae:	8f 92       	push	r8
    11b0:	9f 92       	push	r9
    11b2:	af 92       	push	r10
    11b4:	bf 92       	push	r11
    11b6:	cf 92       	push	r12
    11b8:	df 92       	push	r13
    11ba:	ef 92       	push	r14
    11bc:	ff 92       	push	r15
    11be:	0f 93       	push	r16
    11c0:	1f 93       	push	r17
    11c2:	cf 93       	push	r28
    11c4:	df 93       	push	r29
    11c6:	8c 01       	movw	r16, r24
    11c8:	6a 01       	movw	r12, r20
    11ca:	7b 01       	movw	r14, r22
    11cc:	72 2e       	mov	r7, r18
    11ce:	9a 01       	movw	r18, r20
    11d0:	ab 01       	movw	r20, r22
    11d2:	c7 01       	movw	r24, r14
    11d4:	b6 01       	movw	r22, r12
    11d6:	0e 94 ad 0a 	call	0x155a	; 0x155a <__unordsf2>
    11da:	88 23       	and	r24, r24
    11dc:	19 f0       	breq	.+6      	; 0x11e4 <_ZN5Print10printFloatEdh+0x38>
    11de:	6d eb       	ldi	r22, 0xBD	; 189
    11e0:	71 e0       	ldi	r23, 0x01	; 1
    11e2:	27 c0       	rjmp	.+78     	; 0x1232 <_ZN5Print10printFloatEdh+0x86>
    11e4:	46 01       	movw	r8, r12
    11e6:	57 01       	movw	r10, r14
    11e8:	e8 94       	clt
    11ea:	b7 f8       	bld	r11, 7
    11ec:	2f ef       	ldi	r18, 0xFF	; 255
    11ee:	3f ef       	ldi	r19, 0xFF	; 255
    11f0:	4f e7       	ldi	r20, 0x7F	; 127
    11f2:	5f e7       	ldi	r21, 0x7F	; 127
    11f4:	c5 01       	movw	r24, r10
    11f6:	b4 01       	movw	r22, r8
    11f8:	0e 94 ad 0a 	call	0x155a	; 0x155a <__unordsf2>
    11fc:	81 11       	cpse	r24, r1
    11fe:	0d c0       	rjmp	.+26     	; 0x121a <_ZN5Print10printFloatEdh+0x6e>
    1200:	2f ef       	ldi	r18, 0xFF	; 255
    1202:	3f ef       	ldi	r19, 0xFF	; 255
    1204:	4f e7       	ldi	r20, 0x7F	; 127
    1206:	5f e7       	ldi	r21, 0x7F	; 127
    1208:	c5 01       	movw	r24, r10
    120a:	b4 01       	movw	r22, r8
    120c:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__cmpsf2>
    1210:	18 16       	cp	r1, r24
    1212:	1c f4       	brge	.+6      	; 0x121a <_ZN5Print10printFloatEdh+0x6e>
    1214:	61 ec       	ldi	r22, 0xC1	; 193
    1216:	71 e0       	ldi	r23, 0x01	; 1
    1218:	0c c0       	rjmp	.+24     	; 0x1232 <_ZN5Print10printFloatEdh+0x86>
    121a:	2f ef       	ldi	r18, 0xFF	; 255
    121c:	3f ef       	ldi	r19, 0xFF	; 255
    121e:	4f e7       	ldi	r20, 0x7F	; 127
    1220:	5f e4       	ldi	r21, 0x4F	; 79
    1222:	c7 01       	movw	r24, r14
    1224:	b6 01       	movw	r22, r12
    1226:	0e 94 ca 05 	call	0xb94	; 0xb94 <__gesf2>
    122a:	18 16       	cp	r1, r24
    122c:	94 f4       	brge	.+36     	; 0x1252 <_ZN5Print10printFloatEdh+0xa6>
    122e:	65 ec       	ldi	r22, 0xC5	; 197
    1230:	71 e0       	ldi	r23, 0x01	; 1
    1232:	c8 01       	movw	r24, r16
    1234:	df 91       	pop	r29
    1236:	cf 91       	pop	r28
    1238:	1f 91       	pop	r17
    123a:	0f 91       	pop	r16
    123c:	ff 90       	pop	r15
    123e:	ef 90       	pop	r14
    1240:	df 90       	pop	r13
    1242:	cf 90       	pop	r12
    1244:	bf 90       	pop	r11
    1246:	af 90       	pop	r10
    1248:	9f 90       	pop	r9
    124a:	8f 90       	pop	r8
    124c:	7f 90       	pop	r7
    124e:	0c 94 3f 08 	jmp	0x107e	; 0x107e <_ZN5Print5writeEPKc>
    1252:	2f ef       	ldi	r18, 0xFF	; 255
    1254:	3f ef       	ldi	r19, 0xFF	; 255
    1256:	4f e7       	ldi	r20, 0x7F	; 127
    1258:	5f ec       	ldi	r21, 0xCF	; 207
    125a:	c7 01       	movw	r24, r14
    125c:	b6 01       	movw	r22, r12
    125e:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__cmpsf2>
    1262:	87 fd       	sbrc	r24, 7
    1264:	e4 cf       	rjmp	.-56     	; 0x122e <_ZN5Print10printFloatEdh+0x82>
    1266:	20 e0       	ldi	r18, 0x00	; 0
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	a9 01       	movw	r20, r18
    126c:	c7 01       	movw	r24, r14
    126e:	b6 01       	movw	r22, r12
    1270:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__cmpsf2>
    1274:	87 ff       	sbrs	r24, 7
    1276:	0a c0       	rjmp	.+20     	; 0x128c <_ZN5Print10printFloatEdh+0xe0>
    1278:	6d e2       	ldi	r22, 0x2D	; 45
    127a:	c8 01       	movw	r24, r16
    127c:	0e 94 56 08 	call	0x10ac	; 0x10ac <_ZN5Print5printEc>
    1280:	ec 01       	movw	r28, r24
    1282:	f7 fa       	bst	r15, 7
    1284:	f0 94       	com	r15
    1286:	f7 f8       	bld	r15, 7
    1288:	f0 94       	com	r15
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <_ZN5Print10printFloatEdh+0xe4>
    128c:	c0 e0       	ldi	r28, 0x00	; 0
    128e:	d0 e0       	ldi	r29, 0x00	; 0
    1290:	b1 2c       	mov	r11, r1
    1292:	60 e0       	ldi	r22, 0x00	; 0
    1294:	70 e0       	ldi	r23, 0x00	; 0
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	9f e3       	ldi	r25, 0x3F	; 63
    129a:	7b 14       	cp	r7, r11
    129c:	41 f0       	breq	.+16     	; 0x12ae <_ZN5Print10printFloatEdh+0x102>
    129e:	20 e0       	ldi	r18, 0x00	; 0
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	40 e2       	ldi	r20, 0x20	; 32
    12a4:	51 e4       	ldi	r21, 0x41	; 65
    12a6:	0e 94 77 04 	call	0x8ee	; 0x8ee <__divsf3>
    12aa:	b3 94       	inc	r11
    12ac:	f6 cf       	rjmp	.-20     	; 0x129a <_ZN5Print10printFloatEdh+0xee>
    12ae:	a7 01       	movw	r20, r14
    12b0:	96 01       	movw	r18, r12
    12b2:	0e 94 06 04 	call	0x80c	; 0x80c <__addsf3>
    12b6:	6b 01       	movw	r12, r22
    12b8:	7c 01       	movw	r14, r24
    12ba:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <__fixunssfsi>
    12be:	4b 01       	movw	r8, r22
    12c0:	5c 01       	movw	r10, r24
    12c2:	2a e0       	ldi	r18, 0x0A	; 10
    12c4:	ab 01       	movw	r20, r22
    12c6:	bc 01       	movw	r22, r24
    12c8:	c8 01       	movw	r24, r16
    12ca:	0e 94 73 08 	call	0x10e6	; 0x10e6 <_ZN5Print11printNumberEmh>
    12ce:	c8 0f       	add	r28, r24
    12d0:	d9 1f       	adc	r29, r25
    12d2:	77 20       	and	r7, r7
    12d4:	b9 f1       	breq	.+110    	; 0x1344 <_ZN5Print10printFloatEdh+0x198>
    12d6:	c5 01       	movw	r24, r10
    12d8:	b4 01       	movw	r22, r8
    12da:	0e 94 18 05 	call	0xa30	; 0xa30 <__floatunsisf>
    12de:	9b 01       	movw	r18, r22
    12e0:	ac 01       	movw	r20, r24
    12e2:	c7 01       	movw	r24, r14
    12e4:	b6 01       	movw	r22, r12
    12e6:	0e 94 05 04 	call	0x80a	; 0x80a <__subsf3>
    12ea:	6b 01       	movw	r12, r22
    12ec:	7c 01       	movw	r14, r24
    12ee:	6e e2       	ldi	r22, 0x2E	; 46
    12f0:	c8 01       	movw	r24, r16
    12f2:	0e 94 56 08 	call	0x10ac	; 0x10ac <_ZN5Print5printEc>
    12f6:	c8 0f       	add	r28, r24
    12f8:	d9 1f       	adc	r29, r25
    12fa:	20 e0       	ldi	r18, 0x00	; 0
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	40 e2       	ldi	r20, 0x20	; 32
    1300:	51 e4       	ldi	r21, 0x41	; 65
    1302:	c7 01       	movw	r24, r14
    1304:	b6 01       	movw	r22, r12
    1306:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__mulsf3>
    130a:	4b 01       	movw	r8, r22
    130c:	5c 01       	movw	r10, r24
    130e:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <__fixunssfsi>
    1312:	6b 01       	movw	r12, r22
    1314:	7c 01       	movw	r14, r24
    1316:	4a e0       	ldi	r20, 0x0A	; 10
    1318:	50 e0       	ldi	r21, 0x00	; 0
    131a:	c8 01       	movw	r24, r16
    131c:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <_ZN5Print5printEji>
    1320:	c8 0f       	add	r28, r24
    1322:	d9 1f       	adc	r29, r25
    1324:	b6 01       	movw	r22, r12
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	0e 94 18 05 	call	0xa30	; 0xa30 <__floatunsisf>
    132e:	9b 01       	movw	r18, r22
    1330:	ac 01       	movw	r20, r24
    1332:	c5 01       	movw	r24, r10
    1334:	b4 01       	movw	r22, r8
    1336:	0e 94 05 04 	call	0x80a	; 0x80a <__subsf3>
    133a:	6b 01       	movw	r12, r22
    133c:	7c 01       	movw	r14, r24
    133e:	7a 94       	dec	r7
    1340:	71 10       	cpse	r7, r1
    1342:	db cf       	rjmp	.-74     	; 0x12fa <_ZN5Print10printFloatEdh+0x14e>
    1344:	ce 01       	movw	r24, r28
    1346:	df 91       	pop	r29
    1348:	cf 91       	pop	r28
    134a:	1f 91       	pop	r17
    134c:	0f 91       	pop	r16
    134e:	ff 90       	pop	r15
    1350:	ef 90       	pop	r14
    1352:	df 90       	pop	r13
    1354:	cf 90       	pop	r12
    1356:	bf 90       	pop	r11
    1358:	af 90       	pop	r10
    135a:	9f 90       	pop	r9
    135c:	8f 90       	pop	r8
    135e:	7f 90       	pop	r7
    1360:	08 95       	ret

00001362 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    1362:	0f 93       	push	r16
    1364:	1f 93       	push	r17
    1366:	cf 93       	push	r28
    1368:	df 93       	push	r29
    136a:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    136c:	0e 94 d6 08 	call	0x11ac	; 0x11ac <_ZN5Print10printFloatEdh>
    1370:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    1372:	ce 01       	movw	r24, r28
    1374:	0e 94 5d 08 	call	0x10ba	; 0x10ba <_ZN5Print7printlnEv>
  return n;
}
    1378:	80 0f       	add	r24, r16
    137a:	91 1f       	adc	r25, r17
    137c:	df 91       	pop	r29
    137e:	cf 91       	pop	r28
    1380:	1f 91       	pop	r17
    1382:	0f 91       	pop	r16
    1384:	08 95       	ret

00001386 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1386:	1f 92       	push	r1
    1388:	0f 92       	push	r0
    138a:	0f b6       	in	r0, 0x3f	; 63
    138c:	0f 92       	push	r0
    138e:	11 24       	eor	r1, r1
    1390:	2f 93       	push	r18
    1392:	3f 93       	push	r19
    1394:	8f 93       	push	r24
    1396:	9f 93       	push	r25
    1398:	af 93       	push	r26
    139a:	bf 93       	push	r27
    139c:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <timer0_millis>
    13a0:	90 91 ac 02 	lds	r25, 0x02AC	; 0x8002ac <timer0_millis+0x1>
    13a4:	a0 91 ad 02 	lds	r26, 0x02AD	; 0x8002ad <timer0_millis+0x2>
    13a8:	b0 91 ae 02 	lds	r27, 0x02AE	; 0x8002ae <timer0_millis+0x3>
    13ac:	30 91 aa 02 	lds	r19, 0x02AA	; 0x8002aa <timer0_fract>
    13b0:	23 e0       	ldi	r18, 0x03	; 3
    13b2:	23 0f       	add	r18, r19
    13b4:	2d 37       	cpi	r18, 0x7D	; 125
    13b6:	20 f4       	brcc	.+8      	; 0x13c0 <__vector_16+0x3a>
    13b8:	01 96       	adiw	r24, 0x01	; 1
    13ba:	a1 1d       	adc	r26, r1
    13bc:	b1 1d       	adc	r27, r1
    13be:	05 c0       	rjmp	.+10     	; 0x13ca <__vector_16+0x44>
    13c0:	26 e8       	ldi	r18, 0x86	; 134
    13c2:	23 0f       	add	r18, r19
    13c4:	02 96       	adiw	r24, 0x02	; 2
    13c6:	a1 1d       	adc	r26, r1
    13c8:	b1 1d       	adc	r27, r1
    13ca:	20 93 aa 02 	sts	0x02AA, r18	; 0x8002aa <timer0_fract>
    13ce:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <timer0_millis>
    13d2:	90 93 ac 02 	sts	0x02AC, r25	; 0x8002ac <timer0_millis+0x1>
    13d6:	a0 93 ad 02 	sts	0x02AD, r26	; 0x8002ad <timer0_millis+0x2>
    13da:	b0 93 ae 02 	sts	0x02AE, r27	; 0x8002ae <timer0_millis+0x3>
    13de:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <timer0_overflow_count>
    13e2:	90 91 b0 02 	lds	r25, 0x02B0	; 0x8002b0 <timer0_overflow_count+0x1>
    13e6:	a0 91 b1 02 	lds	r26, 0x02B1	; 0x8002b1 <timer0_overflow_count+0x2>
    13ea:	b0 91 b2 02 	lds	r27, 0x02B2	; 0x8002b2 <timer0_overflow_count+0x3>
    13ee:	01 96       	adiw	r24, 0x01	; 1
    13f0:	a1 1d       	adc	r26, r1
    13f2:	b1 1d       	adc	r27, r1
    13f4:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <timer0_overflow_count>
    13f8:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <timer0_overflow_count+0x1>
    13fc:	a0 93 b1 02 	sts	0x02B1, r26	; 0x8002b1 <timer0_overflow_count+0x2>
    1400:	b0 93 b2 02 	sts	0x02B2, r27	; 0x8002b2 <timer0_overflow_count+0x3>
    1404:	bf 91       	pop	r27
    1406:	af 91       	pop	r26
    1408:	9f 91       	pop	r25
    140a:	8f 91       	pop	r24
    140c:	3f 91       	pop	r19
    140e:	2f 91       	pop	r18
    1410:	0f 90       	pop	r0
    1412:	0f be       	out	0x3f, r0	; 63
    1414:	0f 90       	pop	r0
    1416:	1f 90       	pop	r1
    1418:	18 95       	reti

0000141a <millis>:
    141a:	2f b7       	in	r18, 0x3f	; 63
    141c:	f8 94       	cli
    141e:	60 91 ab 02 	lds	r22, 0x02AB	; 0x8002ab <timer0_millis>
    1422:	70 91 ac 02 	lds	r23, 0x02AC	; 0x8002ac <timer0_millis+0x1>
    1426:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <timer0_millis+0x2>
    142a:	90 91 ae 02 	lds	r25, 0x02AE	; 0x8002ae <timer0_millis+0x3>
    142e:	2f bf       	out	0x3f, r18	; 63
    1430:	08 95       	ret

00001432 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1432:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1434:	84 b5       	in	r24, 0x24	; 36
    1436:	82 60       	ori	r24, 0x02	; 2
    1438:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    143a:	84 b5       	in	r24, 0x24	; 36
    143c:	81 60       	ori	r24, 0x01	; 1
    143e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1440:	85 b5       	in	r24, 0x25	; 37
    1442:	82 60       	ori	r24, 0x02	; 2
    1444:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1446:	85 b5       	in	r24, 0x25	; 37
    1448:	81 60       	ori	r24, 0x01	; 1
    144a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    144c:	ee e6       	ldi	r30, 0x6E	; 110
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	81 60       	ori	r24, 0x01	; 1
    1454:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1456:	e1 e8       	ldi	r30, 0x81	; 129
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    145c:	80 81       	ld	r24, Z
    145e:	82 60       	ori	r24, 0x02	; 2
    1460:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1462:	80 81       	ld	r24, Z
    1464:	81 60       	ori	r24, 0x01	; 1
    1466:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1468:	e0 e8       	ldi	r30, 0x80	; 128
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	81 60       	ori	r24, 0x01	; 1
    1470:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1472:	e1 eb       	ldi	r30, 0xB1	; 177
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	84 60       	ori	r24, 0x04	; 4
    147a:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    147c:	e0 eb       	ldi	r30, 0xB0	; 176
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	81 60       	ori	r24, 0x01	; 1
    1484:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1486:	ea e7       	ldi	r30, 0x7A	; 122
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	84 60       	ori	r24, 0x04	; 4
    148e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1490:	80 81       	ld	r24, Z
    1492:	82 60       	ori	r24, 0x02	; 2
    1494:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1496:	80 81       	ld	r24, Z
    1498:	81 60       	ori	r24, 0x01	; 1
    149a:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    149c:	80 81       	ld	r24, Z
    149e:	80 68       	ori	r24, 0x80	; 128
    14a0:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    14a2:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    14a6:	08 95       	ret

000014a8 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    14a8:	8e 30       	cpi	r24, 0x0E	; 14
    14aa:	08 f0       	brcs	.+2      	; 0x14ae <analogRead+0x6>
    14ac:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    14ae:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    14b2:	90 e4       	ldi	r25, 0x40	; 64
    14b4:	29 9f       	mul	r18, r25
    14b6:	90 01       	movw	r18, r0
    14b8:	11 24       	eor	r1, r1
    14ba:	87 70       	andi	r24, 0x07	; 7
    14bc:	82 2b       	or	r24, r18
    14be:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    14c2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    14c6:	80 64       	ori	r24, 0x40	; 64
    14c8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    14cc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    14d0:	86 fd       	sbrc	r24, 6
    14d2:	fc cf       	rjmp	.-8      	; 0x14cc <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    14d4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    14d8:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    14dc:	90 e0       	ldi	r25, 0x00	; 0
}
    14de:	92 2b       	or	r25, r18
    14e0:	08 95       	ret

000014e2 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    14e2:	cf 93       	push	r28
    14e4:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	fc 01       	movw	r30, r24
    14ea:	e4 58       	subi	r30, 0x84	; 132
    14ec:	ff 4f       	sbci	r31, 0xFF	; 255
    14ee:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    14f0:	fc 01       	movw	r30, r24
    14f2:	e0 57       	subi	r30, 0x70	; 112
    14f4:	ff 4f       	sbci	r31, 0xFF	; 255
    14f6:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    14f8:	88 23       	and	r24, r24
    14fa:	61 f1       	breq	.+88     	; 0x1554 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	88 0f       	add	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	fc 01       	movw	r30, r24
    1504:	e8 54       	subi	r30, 0x48	; 72
    1506:	ff 4f       	sbci	r31, 0xFF	; 255
    1508:	c5 91       	lpm	r28, Z+
    150a:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    150c:	fc 01       	movw	r30, r24
    150e:	e2 55       	subi	r30, 0x52	; 82
    1510:	ff 4f       	sbci	r31, 0xFF	; 255
    1512:	a5 91       	lpm	r26, Z+
    1514:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1516:	61 11       	cpse	r22, r1
    1518:	09 c0       	rjmp	.+18     	; 0x152c <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    151a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    151c:	f8 94       	cli
		*reg &= ~bit;
    151e:	88 81       	ld	r24, Y
    1520:	20 95       	com	r18
    1522:	82 23       	and	r24, r18
    1524:	88 83       	st	Y, r24
		*out &= ~bit;
    1526:	ec 91       	ld	r30, X
    1528:	2e 23       	and	r18, r30
    152a:	0b c0       	rjmp	.+22     	; 0x1542 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    152c:	62 30       	cpi	r22, 0x02	; 2
    152e:	61 f4       	brne	.+24     	; 0x1548 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1530:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1532:	f8 94       	cli
		*reg &= ~bit;
    1534:	88 81       	ld	r24, Y
    1536:	32 2f       	mov	r19, r18
    1538:	30 95       	com	r19
    153a:	83 23       	and	r24, r19
    153c:	88 83       	st	Y, r24
		*out |= bit;
    153e:	ec 91       	ld	r30, X
    1540:	2e 2b       	or	r18, r30
    1542:	2c 93       	st	X, r18
		SREG = oldSREG;
    1544:	9f bf       	out	0x3f, r25	; 63
    1546:	06 c0       	rjmp	.+12     	; 0x1554 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1548:	8f b7       	in	r24, 0x3f	; 63
                cli();
    154a:	f8 94       	cli
		*reg |= bit;
    154c:	e8 81       	ld	r30, Y
    154e:	2e 2b       	or	r18, r30
    1550:	28 83       	st	Y, r18
		SREG = oldSREG;
    1552:	8f bf       	out	0x3f, r24	; 63
	}
}
    1554:	df 91       	pop	r29
    1556:	cf 91       	pop	r28
    1558:	08 95       	ret

0000155a <__unordsf2>:
    155a:	0e 94 55 05 	call	0xaaa	; 0xaaa <__fp_cmp>
    155e:	88 0b       	sbc	r24, r24
    1560:	99 0b       	sbc	r25, r25
    1562:	08 95       	ret

00001564 <__udivmodsi4>:
    1564:	a1 e2       	ldi	r26, 0x21	; 33
    1566:	1a 2e       	mov	r1, r26
    1568:	aa 1b       	sub	r26, r26
    156a:	bb 1b       	sub	r27, r27
    156c:	fd 01       	movw	r30, r26
    156e:	0d c0       	rjmp	.+26     	; 0x158a <__udivmodsi4_ep>

00001570 <__udivmodsi4_loop>:
    1570:	aa 1f       	adc	r26, r26
    1572:	bb 1f       	adc	r27, r27
    1574:	ee 1f       	adc	r30, r30
    1576:	ff 1f       	adc	r31, r31
    1578:	a2 17       	cp	r26, r18
    157a:	b3 07       	cpc	r27, r19
    157c:	e4 07       	cpc	r30, r20
    157e:	f5 07       	cpc	r31, r21
    1580:	20 f0       	brcs	.+8      	; 0x158a <__udivmodsi4_ep>
    1582:	a2 1b       	sub	r26, r18
    1584:	b3 0b       	sbc	r27, r19
    1586:	e4 0b       	sbc	r30, r20
    1588:	f5 0b       	sbc	r31, r21

0000158a <__udivmodsi4_ep>:
    158a:	66 1f       	adc	r22, r22
    158c:	77 1f       	adc	r23, r23
    158e:	88 1f       	adc	r24, r24
    1590:	99 1f       	adc	r25, r25
    1592:	1a 94       	dec	r1
    1594:	69 f7       	brne	.-38     	; 0x1570 <__udivmodsi4_loop>
    1596:	60 95       	com	r22
    1598:	70 95       	com	r23
    159a:	80 95       	com	r24
    159c:	90 95       	com	r25
    159e:	9b 01       	movw	r18, r22
    15a0:	ac 01       	movw	r20, r24
    15a2:	bd 01       	movw	r22, r26
    15a4:	cf 01       	movw	r24, r30
    15a6:	08 95       	ret

000015a8 <__tablejump2__>:
    15a8:	ee 0f       	add	r30, r30
    15aa:	ff 1f       	adc	r31, r31
    15ac:	05 90       	lpm	r0, Z+
    15ae:	f4 91       	lpm	r31, Z
    15b0:	e0 2d       	mov	r30, r0
    15b2:	09 94       	ijmp

000015b4 <_exit>:
    15b4:	f8 94       	cli

000015b6 <__stop_program>:
    15b6:	ff cf       	rjmp	.-2      	; 0x15b6 <__stop_program>
