
Kart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000156  00800100  00001be4  00001c78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001be4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000122  00800256  00800256  00001dce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001dce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000358  00000000  00000000  00001e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008b12  00000000  00000000  00002198  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001c6e  00000000  00000000  0000acaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000229d  00000000  00000000  0000c918  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b34  00000000  00000000  0000ebb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000247f  00000000  00000000  0000f6ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003ce2  00000000  00000000  00011b6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000310  00000000  00000000  0001584d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__ctors_end>
       4:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <__vector_1>
       8:	0c 94 93 01 	jmp	0x326	; 0x326 <__vector_2>
       c:	0c 94 ba 01 	jmp	0x374	; 0x374 <__vector_3>
      10:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__vector_4>
      14:	0c 94 80 02 	jmp	0x500	; 0x500 <__vector_5>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      40:	0c 94 dd 0b 	jmp	0x17ba	; 0x17ba <__vector_16>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 51 09 	jmp	0x12a2	; 0x12a2 <__vector_18>
      4c:	0c 94 83 09 	jmp	0x1306	; 0x1306 <__vector_19>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      64:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 01       	movw	r0, r0
      6a:	02 03       	mulsu	r16, r18
      6c:	04 05       	cpc	r16, r4
      6e:	06 07       	cpc	r16, r22
      70:	00 01       	movw	r0, r0
      72:	02 03       	mulsu	r16, r18
      74:	04 05       	cpc	r16, r4
      76:	00 01       	movw	r0, r0
      78:	02 03       	mulsu	r16, r18
      7a:	04 05       	cpc	r16, r4

0000007c <digital_pin_to_timer_PGM>:
      7c:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      8c:	00 00 00 00                                         ....

00000090 <digital_pin_to_bit_mask_PGM>:
      90:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      a0:	04 08 10 20                                         ... 

000000a4 <digital_pin_to_port_PGM>:
      a4:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      b4:	03 03 03 03                                         ....

000000b8 <port_to_input_PGM>:
      b8:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000c2 <port_to_output_PGM>:
      c2:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000cc <port_to_mode_PGM>:
      cc:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000d6 <__ctors_start>:
      d6:	b3 09       	sbc	r27, r3

000000d8 <__ctors_end>:
      d8:	11 24       	eor	r1, r1
      da:	1f be       	out	0x3f, r1	; 63
      dc:	cf ef       	ldi	r28, 0xFF	; 255
      de:	d8 e0       	ldi	r29, 0x08	; 8
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	cd bf       	out	0x3d, r28	; 61

000000e4 <__do_copy_data>:
      e4:	12 e0       	ldi	r17, 0x02	; 2
      e6:	a0 e0       	ldi	r26, 0x00	; 0
      e8:	b1 e0       	ldi	r27, 0x01	; 1
      ea:	e4 ee       	ldi	r30, 0xE4	; 228
      ec:	fb e1       	ldi	r31, 0x1B	; 27
      ee:	02 c0       	rjmp	.+4      	; 0xf4 <__do_copy_data+0x10>
      f0:	05 90       	lpm	r0, Z+
      f2:	0d 92       	st	X+, r0
      f4:	a6 35       	cpi	r26, 0x56	; 86
      f6:	b1 07       	cpc	r27, r17
      f8:	d9 f7       	brne	.-10     	; 0xf0 <__do_copy_data+0xc>

000000fa <__do_clear_bss>:
      fa:	23 e0       	ldi	r18, 0x03	; 3
      fc:	a6 e5       	ldi	r26, 0x56	; 86
      fe:	b2 e0       	ldi	r27, 0x02	; 2
     100:	01 c0       	rjmp	.+2      	; 0x104 <.do_clear_bss_start>

00000102 <.do_clear_bss_loop>:
     102:	1d 92       	st	X+, r1

00000104 <.do_clear_bss_start>:
     104:	a8 37       	cpi	r26, 0x78	; 120
     106:	b2 07       	cpc	r27, r18
     108:	e1 f7       	brne	.-8      	; 0x102 <.do_clear_bss_loop>

0000010a <__do_global_ctors>:
     10a:	10 e0       	ldi	r17, 0x00	; 0
     10c:	cc e6       	ldi	r28, 0x6C	; 108
     10e:	d0 e0       	ldi	r29, 0x00	; 0
     110:	04 c0       	rjmp	.+8      	; 0x11a <__do_global_ctors+0x10>
     112:	21 97       	sbiw	r28, 0x01	; 1
     114:	fe 01       	movw	r30, r28
     116:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <__tablejump2__>
     11a:	cb 36       	cpi	r28, 0x6B	; 107
     11c:	d1 07       	cpc	r29, r17
     11e:	c9 f7       	brne	.-14     	; 0x112 <__do_global_ctors+0x8>
     120:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <main>
     124:	0c 94 f0 0d 	jmp	0x1be0	; 0x1be0 <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <_Z11CAPTEUR_INTv>:
#endif
#ifndef EI_NOTINT1
if (arduinoPin == 3) {
  EIMSK &= ~_BV(1);
  EICRA &= (~_BV(2) & ~_BV(3));
  EIFR  |= _BV(1); // using a clue from the ATmega2560 datasheet.
     12c:	eb e8       	ldi	r30, 0x8B	; 139
     12e:	f2 e0       	ldi	r31, 0x02	; 2
     130:	83 81       	ldd	r24, Z+3	; 0x03
     132:	8f 5f       	subi	r24, 0xFF	; 255
     134:	83 83       	std	Z+3, r24	; 0x03
     136:	08 95       	ret

00000138 <_Z15enableInterrupthPFvvEh>:
     138:	e8 2f       	mov	r30, r24
     13a:	ef 77       	andi	r30, 0x7F	; 127
     13c:	87 fd       	sbrc	r24, 7
     13e:	05 c0       	rjmp	.+10     	; 0x14a <_Z15enableInterrupthPFvvEh+0x12>
     140:	8e ef       	ldi	r24, 0xFE	; 254
     142:	8e 0f       	add	r24, r30
     144:	82 30       	cpi	r24, 0x02	; 2
     146:	08 f4       	brcc	.+2      	; 0x14a <_Z15enableInterrupthPFvvEh+0x12>
     148:	9a c0       	rjmp	.+308    	; 0x27e <_Z15enableInterrupthPFvvEh+0x146>
     14a:	8e 2f       	mov	r24, r30
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	fc 01       	movw	r30, r24
     150:	e0 57       	subi	r30, 0x70	; 112
     152:	ff 4f       	sbci	r31, 0xFF	; 255
     154:	24 91       	lpm	r18, Z
     156:	fc 01       	movw	r30, r24
     158:	ec 55       	subi	r30, 0x5C	; 92
     15a:	ff 4f       	sbci	r31, 0xFF	; 255
     15c:	34 91       	lpm	r19, Z
     15e:	54 2f       	mov	r21, r20
     160:	5d 7f       	andi	r21, 0xFD	; 253
     162:	51 30       	cpi	r21, 0x01	; 1
     164:	b9 f4       	brne	.+46     	; 0x194 <_Z15enableInterrupthPFvvEh+0x5c>
     166:	32 30       	cpi	r19, 0x02	; 2
     168:	31 f4       	brne	.+12     	; 0x176 <_Z15enableInterrupthPFvvEh+0x3e>
     16a:	50 91 a3 02 	lds	r21, 0x02A3	; 0x8002a3 <risingPinsPORTB>
     16e:	52 2b       	or	r21, r18
     170:	50 93 a3 02 	sts	0x02A3, r21	; 0x8002a3 <risingPinsPORTB>
     174:	0f c0       	rjmp	.+30     	; 0x194 <_Z15enableInterrupthPFvvEh+0x5c>
     176:	33 30       	cpi	r19, 0x03	; 3
     178:	31 f4       	brne	.+12     	; 0x186 <_Z15enableInterrupthPFvvEh+0x4e>
     17a:	50 91 a0 02 	lds	r21, 0x02A0	; 0x8002a0 <risingPinsPORTC>
     17e:	52 2b       	or	r21, r18
     180:	50 93 a0 02 	sts	0x02A0, r21	; 0x8002a0 <risingPinsPORTC>
     184:	07 c0       	rjmp	.+14     	; 0x194 <_Z15enableInterrupthPFvvEh+0x5c>
     186:	34 30       	cpi	r19, 0x04	; 4
     188:	29 f4       	brne	.+10     	; 0x194 <_Z15enableInterrupthPFvvEh+0x5c>
     18a:	50 91 9d 02 	lds	r21, 0x029D	; 0x80029d <risingPinsPORTD>
     18e:	52 2b       	or	r21, r18
     190:	50 93 9d 02 	sts	0x029D, r21	; 0x80029d <risingPinsPORTD>
     194:	41 50       	subi	r20, 0x01	; 1
     196:	42 30       	cpi	r20, 0x02	; 2
     198:	b8 f4       	brcc	.+46     	; 0x1c8 <_Z15enableInterrupthPFvvEh+0x90>
     19a:	32 30       	cpi	r19, 0x02	; 2
     19c:	31 f4       	brne	.+12     	; 0x1aa <_Z15enableInterrupthPFvvEh+0x72>
     19e:	40 91 a2 02 	lds	r20, 0x02A2	; 0x8002a2 <fallingPinsPORTB>
     1a2:	42 2b       	or	r20, r18
     1a4:	40 93 a2 02 	sts	0x02A2, r20	; 0x8002a2 <fallingPinsPORTB>
     1a8:	0f c0       	rjmp	.+30     	; 0x1c8 <_Z15enableInterrupthPFvvEh+0x90>
     1aa:	33 30       	cpi	r19, 0x03	; 3
     1ac:	31 f4       	brne	.+12     	; 0x1ba <_Z15enableInterrupthPFvvEh+0x82>
     1ae:	40 91 9f 02 	lds	r20, 0x029F	; 0x80029f <fallingPinsPORTC>
     1b2:	42 2b       	or	r20, r18
     1b4:	40 93 9f 02 	sts	0x029F, r20	; 0x80029f <fallingPinsPORTC>
     1b8:	07 c0       	rjmp	.+14     	; 0x1c8 <_Z15enableInterrupthPFvvEh+0x90>
     1ba:	34 30       	cpi	r19, 0x04	; 4
     1bc:	29 f4       	brne	.+10     	; 0x1c8 <_Z15enableInterrupthPFvvEh+0x90>
     1be:	40 91 9c 02 	lds	r20, 0x029C	; 0x80029c <fallingPinsPORTD>
     1c2:	42 2b       	or	r20, r18
     1c4:	40 93 9c 02 	sts	0x029C, r20	; 0x80029c <fallingPinsPORTD>
     1c8:	fc 01       	movw	r30, r24
     1ca:	e8 59       	subi	r30, 0x98	; 152
     1cc:	ff 4f       	sbci	r31, 0xFF	; 255
     1ce:	a4 91       	lpm	r26, Z
     1d0:	32 30       	cpi	r19, 0x02	; 2
     1d2:	c1 f4       	brne	.+48     	; 0x204 <_Z15enableInterrupthPFvvEh+0xcc>
     1d4:	b0 e0       	ldi	r27, 0x00	; 0
     1d6:	aa 0f       	add	r26, r26
     1d8:	bb 1f       	adc	r27, r27
     1da:	a0 54       	subi	r26, 0x40	; 64
     1dc:	bd 4f       	sbci	r27, 0xFD	; 253
     1de:	6d 93       	st	X+, r22
     1e0:	7c 93       	st	X, r23
     1e2:	ec eb       	ldi	r30, 0xBC	; 188
     1e4:	f0 e0       	ldi	r31, 0x00	; 0
     1e6:	a5 91       	lpm	r26, Z+
     1e8:	b4 91       	lpm	r27, Z
     1ea:	8c 91       	ld	r24, X
     1ec:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <_ZL13portSnapshotB>
     1f0:	8b e6       	ldi	r24, 0x6B	; 107
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	90 93 d1 02 	sts	0x02D1, r25	; 0x8002d1 <pcmsk+0x1>
     1f8:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <pcmsk>
     1fc:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
     200:	81 60       	ori	r24, 0x01	; 1
     202:	33 c0       	rjmp	.+102    	; 0x26a <_Z15enableInterrupthPFvvEh+0x132>
     204:	33 30       	cpi	r19, 0x03	; 3
     206:	c1 f4       	brne	.+48     	; 0x238 <_Z15enableInterrupthPFvvEh+0x100>
     208:	b0 e0       	ldi	r27, 0x00	; 0
     20a:	aa 0f       	add	r26, r26
     20c:	bb 1f       	adc	r27, r27
     20e:	ac 54       	subi	r26, 0x4C	; 76
     210:	bd 4f       	sbci	r27, 0xFD	; 253
     212:	6d 93       	st	X+, r22
     214:	7c 93       	st	X, r23
     216:	ee eb       	ldi	r30, 0xBE	; 190
     218:	f0 e0       	ldi	r31, 0x00	; 0
     21a:	a5 91       	lpm	r26, Z+
     21c:	b4 91       	lpm	r27, Z
     21e:	8c 91       	ld	r24, X
     220:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <_ZL13portSnapshotC>
     224:	8c e6       	ldi	r24, 0x6C	; 108
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	90 93 d1 02 	sts	0x02D1, r25	; 0x8002d1 <pcmsk+0x1>
     22c:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <pcmsk>
     230:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
     234:	82 60       	ori	r24, 0x02	; 2
     236:	19 c0       	rjmp	.+50     	; 0x26a <_Z15enableInterrupthPFvvEh+0x132>
     238:	34 30       	cpi	r19, 0x04	; 4
     23a:	c9 f4       	brne	.+50     	; 0x26e <_Z15enableInterrupthPFvvEh+0x136>
     23c:	b0 e0       	ldi	r27, 0x00	; 0
     23e:	aa 0f       	add	r26, r26
     240:	bb 1f       	adc	r27, r27
     242:	ac 55       	subi	r26, 0x5C	; 92
     244:	bd 4f       	sbci	r27, 0xFD	; 253
     246:	6d 93       	st	X+, r22
     248:	7c 93       	st	X, r23
     24a:	e0 ec       	ldi	r30, 0xC0	; 192
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	a5 91       	lpm	r26, Z+
     250:	b4 91       	lpm	r27, Z
     252:	8c 91       	ld	r24, X
     254:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <_ZL13portSnapshotD>
     258:	8d e6       	ldi	r24, 0x6D	; 109
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	90 93 d1 02 	sts	0x02D1, r25	; 0x8002d1 <pcmsk+0x1>
     260:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <pcmsk>
     264:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
     268:	84 60       	ori	r24, 0x04	; 4
     26a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
     26e:	a0 91 d0 02 	lds	r26, 0x02D0	; 0x8002d0 <pcmsk>
     272:	b0 91 d1 02 	lds	r27, 0x02D1	; 0x8002d1 <pcmsk+0x1>
     276:	ec 91       	ld	r30, X
     278:	2e 2b       	or	r18, r30
     27a:	2c 93       	st	X, r18
     27c:	08 95       	ret
     27e:	9f b7       	in	r25, 0x3f	; 63
     280:	f8 94       	cli
     282:	e2 30       	cpi	r30, 0x02	; 2
     284:	99 f4       	brne	.+38     	; 0x2ac <_Z15enableInterrupthPFvvEh+0x174>
     286:	70 93 cd 02 	sts	0x02CD, r23	; 0x8002cd <functionPointerArrayEXTERNAL+0x1>
     28a:	60 93 cc 02 	sts	0x02CC, r22	; 0x8002cc <functionPointerArrayEXTERNAL>
     28e:	e8 98       	cbi	0x1d, 0	; 29
     290:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     294:	8c 7f       	andi	r24, 0xFC	; 252
     296:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     29a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     29e:	48 2b       	or	r20, r24
     2a0:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     2a4:	e0 9a       	sbi	0x1c, 0	; 28
     2a6:	e8 9a       	sbi	0x1d, 0	; 29
     2a8:	9f bf       	out	0x3f, r25	; 63
     2aa:	08 95       	ret
     2ac:	70 93 cf 02 	sts	0x02CF, r23	; 0x8002cf <functionPointerArrayEXTERNAL+0x3>
     2b0:	60 93 ce 02 	sts	0x02CE, r22	; 0x8002ce <functionPointerArrayEXTERNAL+0x2>
     2b4:	e9 98       	cbi	0x1d, 1	; 29
     2b6:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     2ba:	83 7f       	andi	r24, 0xF3	; 243
     2bc:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     2c0:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     2c4:	24 e0       	ldi	r18, 0x04	; 4
     2c6:	42 9f       	mul	r20, r18
     2c8:	a0 01       	movw	r20, r0
     2ca:	11 24       	eor	r1, r1
     2cc:	48 2b       	or	r20, r24
     2ce:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     2d2:	e1 9a       	sbi	0x1c, 1	; 28
     2d4:	e9 9a       	sbi	0x1d, 1	; 29
     2d6:	e8 cf       	rjmp	.-48     	; 0x2a8 <_Z15enableInterrupthPFvvEh+0x170>

000002d8 <__vector_1>:
// *************************************************************************************
// External Interrupts
// *************************************************************************************
#ifndef EI_NOTEXTERNAL
#ifndef EI_NOTINT0
ISR(INT0_vect) {/*{{{*/
     2d8:	1f 92       	push	r1
     2da:	0f 92       	push	r0
     2dc:	0f b6       	in	r0, 0x3f	; 63
     2de:	0f 92       	push	r0
     2e0:	11 24       	eor	r1, r1
     2e2:	2f 93       	push	r18
     2e4:	3f 93       	push	r19
     2e6:	4f 93       	push	r20
     2e8:	5f 93       	push	r21
     2ea:	6f 93       	push	r22
     2ec:	7f 93       	push	r23
     2ee:	8f 93       	push	r24
     2f0:	9f 93       	push	r25
     2f2:	af 93       	push	r26
     2f4:	bf 93       	push	r27
     2f6:	ef 93       	push	r30
     2f8:	ff 93       	push	r31
#elif defined EI_ATTINY25
  arduinoInterruptedPin=ARDUINO_PIN_B0; arduinoPinState=PINB & _BV(0);
#endif
#endif // EI_ARDUINO_INTERRUPTED_PIN
#if ! defined EI_ATTINY25 && ! defined EI_ATTINY24
  (*functionPointerArrayEXTERNAL[0])();
     2fa:	e0 91 cc 02 	lds	r30, 0x02CC	; 0x8002cc <functionPointerArrayEXTERNAL>
     2fe:	f0 91 cd 02 	lds	r31, 0x02CD	; 0x8002cd <functionPointerArrayEXTERNAL+0x1>
     302:	09 95       	icall
  INTERRUPT_FLAG_PIN2++;
#endif
#endif

#endif // NEEDFORSPEED
}/*}}}*/
     304:	ff 91       	pop	r31
     306:	ef 91       	pop	r30
     308:	bf 91       	pop	r27
     30a:	af 91       	pop	r26
     30c:	9f 91       	pop	r25
     30e:	8f 91       	pop	r24
     310:	7f 91       	pop	r23
     312:	6f 91       	pop	r22
     314:	5f 91       	pop	r21
     316:	4f 91       	pop	r20
     318:	3f 91       	pop	r19
     31a:	2f 91       	pop	r18
     31c:	0f 90       	pop	r0
     31e:	0f be       	out	0x3f, r0	; 63
     320:	0f 90       	pop	r0
     322:	1f 90       	pop	r1
     324:	18 95       	reti

00000326 <__vector_2>:
#endif // EI_NOTINT0

#if ! defined(EI_ATTINY24) && ! defined(EI_ATTINY25)
#ifndef EI_NOTINT1
ISR(INT1_vect) {/*{{{*/
     326:	1f 92       	push	r1
     328:	0f 92       	push	r0
     32a:	0f b6       	in	r0, 0x3f	; 63
     32c:	0f 92       	push	r0
     32e:	11 24       	eor	r1, r1
     330:	2f 93       	push	r18
     332:	3f 93       	push	r19
     334:	4f 93       	push	r20
     336:	5f 93       	push	r21
     338:	6f 93       	push	r22
     33a:	7f 93       	push	r23
     33c:	8f 93       	push	r24
     33e:	9f 93       	push	r25
     340:	af 93       	push	r26
     342:	bf 93       	push	r27
     344:	ef 93       	push	r30
     346:	ff 93       	push	r31
  arduinoInterruptedPin=ARDUINO_PIN_D1; arduinoPinState=PIND & _BV(1);
#elif defined ARDUINO_328
  arduinoInterruptedPin=ARDUINO_PIN_D3; arduinoPinState=PIND & _BV(3);
#endif
#endif // EI_ARDUINO_INTERRUPTED_PIN
  (*functionPointerArrayEXTERNAL[1])();
     348:	e0 91 ce 02 	lds	r30, 0x02CE	; 0x8002ce <functionPointerArrayEXTERNAL+0x2>
     34c:	f0 91 cf 02 	lds	r31, 0x02CF	; 0x8002cf <functionPointerArrayEXTERNAL+0x3>
     350:	09 95       	icall
#ifdef INTERRUPT_FLAG_PIN3
  INTERRUPT_FLAG_PIN3++;
#endif
#endif
#endif // NEEDFORSPEED
}/*}}}*/
     352:	ff 91       	pop	r31
     354:	ef 91       	pop	r30
     356:	bf 91       	pop	r27
     358:	af 91       	pop	r26
     35a:	9f 91       	pop	r25
     35c:	8f 91       	pop	r24
     35e:	7f 91       	pop	r23
     360:	6f 91       	pop	r22
     362:	5f 91       	pop	r21
     364:	4f 91       	pop	r20
     366:	3f 91       	pop	r19
     368:	2f 91       	pop	r18
     36a:	0f 90       	pop	r0
     36c:	0f be       	out	0x3f, r0	; 63
     36e:	0f 90       	pop	r0
     370:	1f 90       	pop	r1
     372:	18 95       	reti

00000374 <__vector_3>:
  // exitPORTBISR: PORTC &= ~(1 << PC5); // SIGNAL THAT WE ARE LEAVING THE INTERRUPT
}/*}}}*/
#endif // EI_NOTPORTA

#ifndef EI_NOTPORTB
ISR(PORTB_VECT) {/*{{{*/
     374:	1f 92       	push	r1
     376:	0f 92       	push	r0
     378:	0f b6       	in	r0, 0x3f	; 63
     37a:	0f 92       	push	r0
     37c:	11 24       	eor	r1, r1
     37e:	2f 93       	push	r18
     380:	3f 93       	push	r19
     382:	4f 93       	push	r20
     384:	5f 93       	push	r21
     386:	6f 93       	push	r22
     388:	7f 93       	push	r23
     38a:	8f 93       	push	r24
     38c:	9f 93       	push	r25
     38e:	af 93       	push	r26
     390:	bf 93       	push	r27
     392:	cf 93       	push	r28
     394:	ef 93       	push	r30
     396:	ff 93       	push	r31
  uint8_t current;
  uint8_t interruptMask;
  uint8_t changedPins;
  uint8_t tmp;

  current=PINB;
     398:	23 b1       	in	r18, 0x03	; 3
// If we trust the compiler to do this, it will use an extra register...
//  changedPins=(portSnapshotB ^ current) &
//                                       ((risingPinsPORTB & current) | (fallingPinsPORTB & ~current));
// ...so we do it ourselves:
  changedPins   = portSnapshotB ^ current;
     39a:	c0 91 a1 02 	lds	r28, 0x02A1	; 0x8002a1 <_ZL13portSnapshotB>
  tmp           = risingPinsPORTB & current;
     39e:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <risingPinsPORTB>
  interruptMask = fallingPinsPORTB & ~current;
     3a2:	90 91 a2 02 	lds	r25, 0x02A2	; 0x8002a2 <fallingPinsPORTB>
     3a6:	32 2f       	mov	r19, r18
     3a8:	30 95       	com	r19
     3aa:	93 23       	and	r25, r19
  interruptMask = interruptMask | tmp;
     3ac:	82 23       	and	r24, r18
     3ae:	89 2b       	or	r24, r25
  interruptMask = PCMSK1 & interruptMask;
#else
#ifdef EI_ATTINY25
  interruptMask = PCMSK & interruptMask;
#else
  interruptMask = PCMSK0 & interruptMask;
     3b0:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
     3b4:	c2 27       	eor	r28, r18
     3b6:	c9 23       	and	r28, r25
     3b8:	c8 23       	and	r28, r24
#endif
#endif

  portSnapshotB = current;
     3ba:	20 93 a1 02 	sts	0x02A1, r18	; 0x8002a1 <_ZL13portSnapshotB>
#ifdef NEEDFORSPEED
#include "utility/ei_portb_speed.h"
#else
  if (interruptMask == 0) goto exitPORTBISR; // get out quickly if not interested.
     3be:	cc 23       	and	r28, r28
     3c0:	51 f1       	breq	.+84     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
#if ! (defined ARDUINO_328) && ! (defined EI_ATTINY24) && ! (defined EI_ATTINY25)
  if (interruptMask & _BV(6)) { arduinoInterruptedPin=ARDUINO_PIN_B6; arduinoPinState=current & _BV(6); portBFunctions.pinSix(); }
  if (interruptMask & _BV(7)) { arduinoInterruptedPin=ARDUINO_PIN_B7; arduinoPinState=current & _BV(7); portBFunctions.pinSeven(); }
#endif
#else // EI_ARDUINO_INTERRUPTED_PIN
  if (interruptMask & _BV(0)) portBFunctions.pinZero();
     3c2:	c0 ff       	sbrs	r28, 0
     3c4:	05 c0       	rjmp	.+10     	; 0x3d0 <__vector_3+0x5c>
     3c6:	e0 91 c0 02 	lds	r30, 0x02C0	; 0x8002c0 <portBFunctions>
     3ca:	f0 91 c1 02 	lds	r31, 0x02C1	; 0x8002c1 <portBFunctions+0x1>
     3ce:	09 95       	icall
  if (interruptMask & _BV(1)) portBFunctions.pinOne();
     3d0:	c1 ff       	sbrs	r28, 1
     3d2:	05 c0       	rjmp	.+10     	; 0x3de <__vector_3+0x6a>
     3d4:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <portBFunctions+0x2>
     3d8:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <portBFunctions+0x3>
     3dc:	09 95       	icall
  if (interruptMask & _BV(2)) portBFunctions.pinTwo();
     3de:	c2 ff       	sbrs	r28, 2
     3e0:	05 c0       	rjmp	.+10     	; 0x3ec <__vector_3+0x78>
     3e2:	e0 91 c4 02 	lds	r30, 0x02C4	; 0x8002c4 <portBFunctions+0x4>
     3e6:	f0 91 c5 02 	lds	r31, 0x02C5	; 0x8002c5 <portBFunctions+0x5>
     3ea:	09 95       	icall
  if (interruptMask & _BV(3)) portBFunctions.pinThree();
     3ec:	c3 ff       	sbrs	r28, 3
     3ee:	05 c0       	rjmp	.+10     	; 0x3fa <__vector_3+0x86>
     3f0:	e0 91 c6 02 	lds	r30, 0x02C6	; 0x8002c6 <portBFunctions+0x6>
     3f4:	f0 91 c7 02 	lds	r31, 0x02C7	; 0x8002c7 <portBFunctions+0x7>
     3f8:	09 95       	icall
#if ! (defined EI_ATTINY24)
  if (interruptMask & _BV(4)) portBFunctions.pinFour();
     3fa:	c4 ff       	sbrs	r28, 4
     3fc:	05 c0       	rjmp	.+10     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     3fe:	e0 91 c8 02 	lds	r30, 0x02C8	; 0x8002c8 <portBFunctions+0x8>
     402:	f0 91 c9 02 	lds	r31, 0x02C9	; 0x8002c9 <portBFunctions+0x9>
     406:	09 95       	icall
  if (interruptMask & _BV(5)) portBFunctions.pinFive();
     408:	c5 ff       	sbrs	r28, 5
     40a:	05 c0       	rjmp	.+10     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     40c:	e0 91 ca 02 	lds	r30, 0x02CA	; 0x8002ca <portBFunctions+0xa>
     410:	f0 91 cb 02 	lds	r31, 0x02CB	; 0x8002cb <portBFunctions+0xb>
     414:	09 95       	icall
#endif // EI_ARDUINO_INTERRUPTED_PIN
  exitPORTBISR: return;
  // FOR MEASUREMENT ONLY
  // exitPORTBISR: PORTC &= ~(1 << PC5); // SIGNAL THAT WE ARE LEAVING THE INTERRUPT
#endif // NEEDFORSPEED
}/*}}}*/
     416:	ff 91       	pop	r31
     418:	ef 91       	pop	r30
     41a:	cf 91       	pop	r28
     41c:	bf 91       	pop	r27
     41e:	af 91       	pop	r26
     420:	9f 91       	pop	r25
     422:	8f 91       	pop	r24
     424:	7f 91       	pop	r23
     426:	6f 91       	pop	r22
     428:	5f 91       	pop	r21
     42a:	4f 91       	pop	r20
     42c:	3f 91       	pop	r19
     42e:	2f 91       	pop	r18
     430:	0f 90       	pop	r0
     432:	0f be       	out	0x3f, r0	; 63
     434:	0f 90       	pop	r0
     436:	1f 90       	pop	r1
     438:	18 95       	reti

0000043a <__vector_4>:
#endif // EI_NOTPORTB

#ifndef EI_NOTPORTC
ISR(PORTC_VECT) {/*{{{*/
     43a:	1f 92       	push	r1
     43c:	0f 92       	push	r0
     43e:	0f b6       	in	r0, 0x3f	; 63
     440:	0f 92       	push	r0
     442:	11 24       	eor	r1, r1
     444:	2f 93       	push	r18
     446:	3f 93       	push	r19
     448:	4f 93       	push	r20
     44a:	5f 93       	push	r21
     44c:	6f 93       	push	r22
     44e:	7f 93       	push	r23
     450:	8f 93       	push	r24
     452:	9f 93       	push	r25
     454:	af 93       	push	r26
     456:	bf 93       	push	r27
     458:	cf 93       	push	r28
     45a:	ef 93       	push	r30
     45c:	ff 93       	push	r31
  uint8_t current;
  uint8_t interruptMask;
  uint8_t changedPins;
  uint8_t tmp;

  current=PINC;
     45e:	26 b1       	in	r18, 0x06	; 6
// If we trust the compiler to do this, it will use an extra register...
//  changedPins=(portSnapshotB ^ current) &
//                                       ((risingPinsPORTB & current) | (fallingPinsPORTB & ~current));
// ...so we do it ourselves:
  changedPins   = portSnapshotC ^ current;
     460:	c0 91 9e 02 	lds	r28, 0x029E	; 0x80029e <_ZL13portSnapshotC>
  tmp           = risingPinsPORTC & current;
     464:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <risingPinsPORTC>
  interruptMask = fallingPinsPORTC & ~current;
     468:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <fallingPinsPORTC>
     46c:	32 2f       	mov	r19, r18
     46e:	30 95       	com	r19
     470:	93 23       	and	r25, r19
  interruptMask = interruptMask | tmp;
     472:	82 23       	and	r24, r18
     474:	89 2b       	or	r24, r25
  interruptMask = changedPins & interruptMask;
#if (defined MIGHTY1284)
  interruptMask = PCMSK2 & interruptMask;
#else
  interruptMask = PCMSK1 & interruptMask;
     476:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
     47a:	c2 27       	eor	r28, r18
     47c:	c9 23       	and	r28, r25
     47e:	c8 23       	and	r28, r24
#endif

  portSnapshotC = current;
     480:	20 93 9e 02 	sts	0x029E, r18	; 0x80029e <_ZL13portSnapshotC>
#ifdef NEEDFORSPEED
#include "utility/ei_portc_speed.h"
#else
  if (interruptMask == 0) goto exitPORTCISR; // get out quickly if not interested.
     484:	cc 23       	and	r28, r28
     486:	51 f1       	breq	.+84     	; 0x4dc <__vector_4+0xa2>
#ifdef MIGHTY1284
  if (interruptMask & _BV(6)) { arduinoInterruptedPin=ARDUINO_PIN_C6; arduinoPinState=current & _BV(6); portCFunctions.pinSix(); }
  if (interruptMask & _BV(7)) { arduinoInterruptedPin=ARDUINO_PIN_C7; arduinoPinState=current & _BV(7); portCFunctions.pinSeven(); }
#endif
#else
  if (interruptMask & _BV(0)) portCFunctions.pinZero();
     488:	c0 ff       	sbrs	r28, 0
     48a:	05 c0       	rjmp	.+10     	; 0x496 <__vector_4+0x5c>
     48c:	e0 91 b4 02 	lds	r30, 0x02B4	; 0x8002b4 <portCFunctions>
     490:	f0 91 b5 02 	lds	r31, 0x02B5	; 0x8002b5 <portCFunctions+0x1>
     494:	09 95       	icall
  if (interruptMask & _BV(1)) portCFunctions.pinOne();
     496:	c1 ff       	sbrs	r28, 1
     498:	05 c0       	rjmp	.+10     	; 0x4a4 <__vector_4+0x6a>
     49a:	e0 91 b6 02 	lds	r30, 0x02B6	; 0x8002b6 <portCFunctions+0x2>
     49e:	f0 91 b7 02 	lds	r31, 0x02B7	; 0x8002b7 <portCFunctions+0x3>
     4a2:	09 95       	icall
  if (interruptMask & _BV(2)) portCFunctions.pinTwo();
     4a4:	c2 ff       	sbrs	r28, 2
     4a6:	05 c0       	rjmp	.+10     	; 0x4b2 <__vector_4+0x78>
     4a8:	e0 91 b8 02 	lds	r30, 0x02B8	; 0x8002b8 <portCFunctions+0x4>
     4ac:	f0 91 b9 02 	lds	r31, 0x02B9	; 0x8002b9 <portCFunctions+0x5>
     4b0:	09 95       	icall
  if (interruptMask & _BV(3)) portCFunctions.pinThree();
     4b2:	c3 ff       	sbrs	r28, 3
     4b4:	05 c0       	rjmp	.+10     	; 0x4c0 <__vector_4+0x86>
     4b6:	e0 91 ba 02 	lds	r30, 0x02BA	; 0x8002ba <portCFunctions+0x6>
     4ba:	f0 91 bb 02 	lds	r31, 0x02BB	; 0x8002bb <portCFunctions+0x7>
     4be:	09 95       	icall
  if (interruptMask & _BV(4)) portCFunctions.pinFour();
     4c0:	c4 ff       	sbrs	r28, 4
     4c2:	05 c0       	rjmp	.+10     	; 0x4ce <__vector_4+0x94>
     4c4:	e0 91 bc 02 	lds	r30, 0x02BC	; 0x8002bc <portCFunctions+0x8>
     4c8:	f0 91 bd 02 	lds	r31, 0x02BD	; 0x8002bd <portCFunctions+0x9>
     4cc:	09 95       	icall
  if (interruptMask & _BV(5)) portCFunctions.pinFive();
     4ce:	c5 ff       	sbrs	r28, 5
     4d0:	05 c0       	rjmp	.+10     	; 0x4dc <__vector_4+0xa2>
     4d2:	e0 91 be 02 	lds	r30, 0x02BE	; 0x8002be <portCFunctions+0xa>
     4d6:	f0 91 bf 02 	lds	r31, 0x02BF	; 0x8002bf <portCFunctions+0xb>
     4da:	09 95       	icall
  if (interruptMask & _BV(7)) portCFunctions.pinSeven();
#endif
#endif // EI_ARDUINO_INTERRUPTED_PIN
  exitPORTCISR: return;
#endif // NEEDFORSPEED
}/*}}}*/
     4dc:	ff 91       	pop	r31
     4de:	ef 91       	pop	r30
     4e0:	cf 91       	pop	r28
     4e2:	bf 91       	pop	r27
     4e4:	af 91       	pop	r26
     4e6:	9f 91       	pop	r25
     4e8:	8f 91       	pop	r24
     4ea:	7f 91       	pop	r23
     4ec:	6f 91       	pop	r22
     4ee:	5f 91       	pop	r21
     4f0:	4f 91       	pop	r20
     4f2:	3f 91       	pop	r19
     4f4:	2f 91       	pop	r18
     4f6:	0f 90       	pop	r0
     4f8:	0f be       	out	0x3f, r0	; 63
     4fa:	0f 90       	pop	r0
     4fc:	1f 90       	pop	r1
     4fe:	18 95       	reti

00000500 <__vector_5>:
#endif // EI_NOTPORTC

#ifndef EI_NOTPORTD
ISR(PORTD_VECT) {/*{{{*/
     500:	1f 92       	push	r1
     502:	0f 92       	push	r0
     504:	0f b6       	in	r0, 0x3f	; 63
     506:	0f 92       	push	r0
     508:	11 24       	eor	r1, r1
     50a:	2f 93       	push	r18
     50c:	3f 93       	push	r19
     50e:	4f 93       	push	r20
     510:	5f 93       	push	r21
     512:	6f 93       	push	r22
     514:	7f 93       	push	r23
     516:	8f 93       	push	r24
     518:	9f 93       	push	r25
     51a:	af 93       	push	r26
     51c:	bf 93       	push	r27
     51e:	cf 93       	push	r28
     520:	ef 93       	push	r30
     522:	ff 93       	push	r31
  uint8_t current;
  uint8_t interruptMask;
  uint8_t changedPins;
  uint8_t tmp;

  current=PIND;
     524:	29 b1       	in	r18, 0x09	; 9
// If we trust the compiler to do this, it will use an extra register...
//  changedPins=(portSnapshotB ^ current) &
//                                       ((risingPinsPORTB & current) | (fallingPinsPORTB & ~current));
// ...so we do it ourselves:
  changedPins   = portSnapshotD ^ current;
     526:	c0 91 9b 02 	lds	r28, 0x029B	; 0x80029b <_ZL13portSnapshotD>
  tmp           = risingPinsPORTD & current;
     52a:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <risingPinsPORTD>
  interruptMask = fallingPinsPORTD & ~current;
     52e:	90 91 9c 02 	lds	r25, 0x029C	; 0x80029c <fallingPinsPORTD>
     532:	32 2f       	mov	r19, r18
     534:	30 95       	com	r19
     536:	93 23       	and	r25, r19
  interruptMask = interruptMask | tmp;
     538:	82 23       	and	r24, r18
     53a:	89 2b       	or	r24, r25
  interruptMask = changedPins & interruptMask;
#if (defined MIGHTY1284)
  interruptMask = PCMSK3 & interruptMask;
#else
  interruptMask = PCMSK2 & interruptMask;
     53c:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
     540:	c2 27       	eor	r28, r18
     542:	c9 23       	and	r28, r25
     544:	c8 23       	and	r28, r24
#endif

  portSnapshotD = current;
     546:	20 93 9b 02 	sts	0x029B, r18	; 0x80029b <_ZL13portSnapshotD>
#ifdef NEEDFORSPEED
#include "utility/ei_portd_speed.h"
#else
  if (interruptMask == 0) goto exitPORTDISR; // get out quickly if not interested.
     54a:	cc 23       	and	r28, r28
     54c:	c1 f1       	breq	.+112    	; 0x5be <__vector_5+0xbe>
  if (interruptMask & _BV(4)) { arduinoInterruptedPin=ARDUINO_PIN_D4; arduinoPinState=current & _BV(4); portDFunctions.pinFour(); }
  if (interruptMask & _BV(5)) { arduinoInterruptedPin=ARDUINO_PIN_D5; arduinoPinState=current & _BV(5); portDFunctions.pinFive(); }
  if (interruptMask & _BV(6)) { arduinoInterruptedPin=ARDUINO_PIN_D6; arduinoPinState=current & _BV(6); portDFunctions.pinSix(); }
  if (interruptMask & _BV(7)) { arduinoInterruptedPin=ARDUINO_PIN_D7; arduinoPinState=current & _BV(7); portDFunctions.pinSeven(); }
#else
  if (interruptMask & _BV(0)) portDFunctions.pinZero();
     54e:	c0 ff       	sbrs	r28, 0
     550:	05 c0       	rjmp	.+10     	; 0x55c <__vector_5+0x5c>
     552:	e0 91 a4 02 	lds	r30, 0x02A4	; 0x8002a4 <portDFunctions>
     556:	f0 91 a5 02 	lds	r31, 0x02A5	; 0x8002a5 <portDFunctions+0x1>
     55a:	09 95       	icall
  if (interruptMask & _BV(1)) portDFunctions.pinOne();
     55c:	c1 ff       	sbrs	r28, 1
     55e:	05 c0       	rjmp	.+10     	; 0x56a <__vector_5+0x6a>
     560:	e0 91 a6 02 	lds	r30, 0x02A6	; 0x8002a6 <portDFunctions+0x2>
     564:	f0 91 a7 02 	lds	r31, 0x02A7	; 0x8002a7 <portDFunctions+0x3>
     568:	09 95       	icall
  if (interruptMask & _BV(2)) portDFunctions.pinTwo();
     56a:	c2 ff       	sbrs	r28, 2
     56c:	05 c0       	rjmp	.+10     	; 0x578 <__vector_5+0x78>
     56e:	e0 91 a8 02 	lds	r30, 0x02A8	; 0x8002a8 <portDFunctions+0x4>
     572:	f0 91 a9 02 	lds	r31, 0x02A9	; 0x8002a9 <portDFunctions+0x5>
     576:	09 95       	icall
  if (interruptMask & _BV(3)) portDFunctions.pinThree();
     578:	c3 ff       	sbrs	r28, 3
     57a:	05 c0       	rjmp	.+10     	; 0x586 <__vector_5+0x86>
     57c:	e0 91 aa 02 	lds	r30, 0x02AA	; 0x8002aa <portDFunctions+0x6>
     580:	f0 91 ab 02 	lds	r31, 0x02AB	; 0x8002ab <portDFunctions+0x7>
     584:	09 95       	icall
  if (interruptMask & _BV(4)) portDFunctions.pinFour();
     586:	c4 ff       	sbrs	r28, 4
     588:	05 c0       	rjmp	.+10     	; 0x594 <__vector_5+0x94>
     58a:	e0 91 ac 02 	lds	r30, 0x02AC	; 0x8002ac <portDFunctions+0x8>
     58e:	f0 91 ad 02 	lds	r31, 0x02AD	; 0x8002ad <portDFunctions+0x9>
     592:	09 95       	icall
  if (interruptMask & _BV(5)) portDFunctions.pinFive();
     594:	c5 ff       	sbrs	r28, 5
     596:	05 c0       	rjmp	.+10     	; 0x5a2 <__vector_5+0xa2>
     598:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <portDFunctions+0xa>
     59c:	f0 91 af 02 	lds	r31, 0x02AF	; 0x8002af <portDFunctions+0xb>
     5a0:	09 95       	icall
  if (interruptMask & _BV(6)) portDFunctions.pinSix();
     5a2:	c6 ff       	sbrs	r28, 6
     5a4:	05 c0       	rjmp	.+10     	; 0x5b0 <__vector_5+0xb0>
     5a6:	e0 91 b0 02 	lds	r30, 0x02B0	; 0x8002b0 <portDFunctions+0xc>
     5aa:	f0 91 b1 02 	lds	r31, 0x02B1	; 0x8002b1 <portDFunctions+0xd>
     5ae:	09 95       	icall
  if (interruptMask & _BV(7)) portDFunctions.pinSeven();
     5b0:	c7 ff       	sbrs	r28, 7
     5b2:	05 c0       	rjmp	.+10     	; 0x5be <__vector_5+0xbe>
     5b4:	e0 91 b2 02 	lds	r30, 0x02B2	; 0x8002b2 <portDFunctions+0xe>
     5b8:	f0 91 b3 02 	lds	r31, 0x02B3	; 0x8002b3 <portDFunctions+0xf>
     5bc:	09 95       	icall
#endif // EI_ARDUINO_INTERRUPTED_PIN
  exitPORTDISR: return;
#endif // NEEDFORSPEED
}/*}}}*/
     5be:	ff 91       	pop	r31
     5c0:	ef 91       	pop	r30
     5c2:	cf 91       	pop	r28
     5c4:	bf 91       	pop	r27
     5c6:	af 91       	pop	r26
     5c8:	9f 91       	pop	r25
     5ca:	8f 91       	pop	r24
     5cc:	7f 91       	pop	r23
     5ce:	6f 91       	pop	r22
     5d0:	5f 91       	pop	r21
     5d2:	4f 91       	pop	r20
     5d4:	3f 91       	pop	r19
     5d6:	2f 91       	pop	r18
     5d8:	0f 90       	pop	r0
     5da:	0f be       	out	0x3f, r0	; 63
     5dc:	0f 90       	pop	r0
     5de:	1f 90       	pop	r1
     5e0:	18 95       	reti

000005e2 <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     5e2:	26 e0       	ldi	r18, 0x06	; 6
     5e4:	40 e8       	ldi	r20, 0x80	; 128
     5e6:	55 e2       	ldi	r21, 0x25	; 37
     5e8:	60 e0       	ldi	r22, 0x00	; 0
     5ea:	70 e0       	ldi	r23, 0x00	; 0
     5ec:	82 ed       	ldi	r24, 0xD2	; 210
     5ee:	92 e0       	ldi	r25, 0x02	; 2
     5f0:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <_ZN14HardwareSerial5beginEmh>
	
	// Initialise la liaison série à 9600 bauds
	Serial.begin(9600);
	
	// Configure l'entrée logique dédiée à la récupération du capteur de vitesse en entrée pull up (mise à 1 par défault)
	pinMode(INPUT_CAPTEUR_VITESSE, INPUT);
     5f4:	60 e0       	ldi	r22, 0x00	; 0
     5f6:	82 e0       	ldi	r24, 0x02	; 2
     5f8:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <pinMode>
	
	// Configure l'interruption qui se déclenchera à chaque fois que l'entrée capteur passe de l'état bas à l'état haut
	enableInterrupt(INPUT_CAPTEUR_VITESSE, CAPTEUR_INT, RISING);
     5fc:	43 e0       	ldi	r20, 0x03	; 3
     5fe:	66 e9       	ldi	r22, 0x96	; 150
     600:	70 e0       	ldi	r23, 0x00	; 0
     602:	82 e0       	ldi	r24, 0x02	; 2
     604:	0e 94 9c 00 	call	0x138	; 0x138 <_Z15enableInterrupthPFvvEh>
	
	// Configure les leds de feedback
	pinMode(FEEDBACK_TX, OUTPUT);
     608:	61 e0       	ldi	r22, 0x01	; 1
     60a:	83 e0       	ldi	r24, 0x03	; 3
     60c:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <pinMode>
	digitalWrite(FEEDBACK_TX, HIGH);
     610:	61 e0       	ldi	r22, 0x01	; 1
     612:	83 e0       	ldi	r24, 0x03	; 3
     614:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <digitalWrite>
	pinMode(FEEDBACK_RX, OUTPUT);
     618:	61 e0       	ldi	r22, 0x01	; 1
     61a:	84 e0       	ldi	r24, 0x04	; 4
     61c:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <pinMode>
	digitalWrite(FEEDBACK_RX, HIGH);
     620:	61 e0       	ldi	r22, 0x01	; 1
     622:	84 e0       	ldi	r24, 0x04	; 4
     624:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <digitalWrite>
	
	// Configure les sorties pour le pilotage des MAX6971
	pinMode(AFF_LAT, OUTPUT);
     628:	61 e0       	ldi	r22, 0x01	; 1
     62a:	8a e0       	ldi	r24, 0x0A	; 10
     62c:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <pinMode>
	pinMode(AFF_CLK, OUTPUT);
     630:	61 e0       	ldi	r22, 0x01	; 1
     632:	89 e0       	ldi	r24, 0x09	; 9
     634:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <pinMode>
	pinMode(AFF_DATA, OUTPUT);
     638:	61 e0       	ldi	r22, 0x01	; 1
     63a:	88 e0       	ldi	r24, 0x08	; 8
     63c:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <pinMode>
	
	pinMode(LUM_BAT, OUTPUT);
     640:	61 e0       	ldi	r22, 0x01	; 1
     642:	85 e0       	ldi	r24, 0x05	; 5
     644:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <pinMode>
	pinMode(LUM_V, OUTPUT);
     648:	61 e0       	ldi	r22, 0x01	; 1
     64a:	86 e0       	ldi	r24, 0x06	; 6
     64c:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <pinMode>
	analogWrite(LUM_BAT, LUMINOSITE_BARGRAPH);
     650:	6c ef       	ldi	r22, 0xFC	; 252
     652:	70 e0       	ldi	r23, 0x00	; 0
     654:	85 e0       	ldi	r24, 0x05	; 5
     656:	0e 94 8b 0c 	call	0x1916	; 0x1916 <analogWrite>
	analogWrite(LUM_V, LUMINOSITE_AFFICHEUR);
     65a:	6c ef       	ldi	r22, 0xFC	; 252
     65c:	70 e0       	ldi	r23, 0x00	; 0
     65e:	86 e0       	ldi	r24, 0x06	; 6
     660:	0c 94 8b 0c 	jmp	0x1916	; 0x1916 <analogWrite>

00000664 <_Z15Lecture_Vitessev>:
}

// Fonction permettant le calcul de la vitesse en fonction du nombre d'impulsion par secondes
void Lecture_Vitesse()
{
     664:	1f 93       	push	r17
     666:	cf 93       	push	r28
     668:	df 93       	push	r29
	char tempCount = 0;
	
	tempCount = Vitesse.CountDemiTour;
     66a:	cb e8       	ldi	r28, 0x8B	; 139
     66c:	d2 e0       	ldi	r29, 0x02	; 2
     66e:	1b 81       	ldd	r17, Y+3	; 0x03
	
	Vitesse.NbDetectionParSec = (tempCount - Vitesse.MemoCountDemiTour);
     670:	89 81       	ldd	r24, Y+1	; 0x01
     672:	61 2f       	mov	r22, r17
     674:	68 1b       	sub	r22, r24
     676:	6a 83       	std	Y+2, r22	; 0x02
	//NbTourParHeure = (NbTourParSec * 3600);   // tour/heure
	//Vitesse = NbTourParHeure * DIAMETRE_ROUE_M; // m/heure
	//Vitesse = Vitesse / 1000; //km/heure

	// Calcul optimisé
	Vitesse.Actuelle = (unsigned char) ((float) Vitesse.NbDetectionParSec * 1.8f * DIAMETRE_ROUE_M);
     678:	70 e0       	ldi	r23, 0x00	; 0
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	0e 94 f3 06 	call	0xde6	; 0xde6 <__floatunsisf>
     682:	26 e6       	ldi	r18, 0x66	; 102
     684:	36 e6       	ldi	r19, 0x66	; 102
     686:	46 ee       	ldi	r20, 0xE6	; 230
     688:	5f e3       	ldi	r21, 0x3F	; 63
     68a:	0e 94 aa 07 	call	0xf54	; 0xf54 <__mulsf3>
     68e:	2d e2       	ldi	r18, 0x2D	; 45
     690:	32 eb       	ldi	r19, 0xB2	; 178
     692:	4d e5       	ldi	r20, 0x5D	; 93
     694:	5f e3       	ldi	r21, 0x3F	; 63
     696:	0e 94 aa 07 	call	0xf54	; 0xf54 <__mulsf3>
     69a:	0e 94 c4 06 	call	0xd88	; 0xd88 <__fixunssfsi>
     69e:	68 83       	st	Y, r22

	Vitesse.MemoCountDemiTour = tempCount;
     6a0:	19 83       	std	Y+1, r17	; 0x01
}
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	1f 91       	pop	r17
     6a8:	08 95       	ret

000006aa <_Z15TensionBatteriev>:

// Fonction permettant de récupérer l'état des différentes batteries
void TensionBatterie()
{
     6aa:	7f 92       	push	r7
     6ac:	8f 92       	push	r8
     6ae:	9f 92       	push	r9
     6b0:	af 92       	push	r10
     6b2:	bf 92       	push	r11
     6b4:	cf 92       	push	r12
     6b6:	df 92       	push	r13
     6b8:	ef 92       	push	r14
     6ba:	ff 92       	push	r15
     6bc:	0f 93       	push	r16
     6be:	1f 93       	push	r17
     6c0:	cf 93       	push	r28
     6c2:	df 93       	push	r29
     6c4:	cb e5       	ldi	r28, 0x5B	; 91
     6c6:	d2 e0       	ldi	r29, 0x02	; 2
	float			Calcul;
	
	int				i;
	
	// On boucle sur les 4 batteries
	for (i = 0; i < 4; i ++)
     6c8:	00 e0       	ldi	r16, 0x00	; 0
     6ca:	10 e0       	ldi	r17, 0x00	; 0
		Batterie[i].Tension_lue = Batterie[i].Lecture_AN * 5.0f / 1023.0f;
		
		// Vérifie si la batterie est en-dessous du seuil critique
		if (Batterie[i].Tension_lue < TENSION_CRITIQUE_LUE)
		{
			Batterie[i].Critique = 1;
     6cc:	77 24       	eor	r7, r7
     6ce:	73 94       	inc	r7
		
		// Vérifie si la batterie est en surcharge
		if (Batterie[i].Tension_lue > TENSION_SURCHARGE_LUE)
		{
			Batterie[i].Surcharge = 1;
			Batterie[i].Pourcentage = 100.0f;
     6d0:	81 2c       	mov	r8, r1
     6d2:	91 2c       	mov	r9, r1
     6d4:	88 ec       	ldi	r24, 0xC8	; 200
     6d6:	a8 2e       	mov	r10, r24
     6d8:	82 e4       	ldi	r24, 0x42	; 66
     6da:	b8 2e       	mov	r11, r24
	int				i;
	
	// On boucle sur les 4 batteries
	for (i = 0; i < 4; i ++)
	{
		Batterie[i].Surcharge = 0;
     6dc:	1a 86       	std	Y+10, r1	; 0x0a
		Batterie[i].Critique = 0;
     6de:	1b 86       	std	Y+11, r1	; 0x0b

		// On récupére la valeur analogique correspondant à la batterie testée
		switch (i)
     6e0:	02 30       	cpi	r16, 0x02	; 2
     6e2:	11 05       	cpc	r17, r1
     6e4:	b1 f0       	breq	.+44     	; 0x712 <_Z15TensionBatteriev+0x68>
     6e6:	03 30       	cpi	r16, 0x03	; 3
     6e8:	11 05       	cpc	r17, r1
     6ea:	d9 f0       	breq	.+54     	; 0x722 <_Z15TensionBatteriev+0x78>
     6ec:	01 30       	cpi	r16, 0x01	; 1
     6ee:	11 05       	cpc	r17, r1
     6f0:	41 f0       	breq	.+16     	; 0x702 <_Z15TensionBatteriev+0x58>
		{
			case 0: Batterie[i].Lecture_AN = analogRead(ADC1); break;
     6f2:	8f e0       	ldi	r24, 0x0F	; 15
     6f4:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <analogRead>
     6f8:	90 93 5c 02 	sts	0x025C, r25	; 0x80025c <Batterie+0x1>
     6fc:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <Batterie>
     700:	17 c0       	rjmp	.+46     	; 0x730 <_Z15TensionBatteriev+0x86>
			case 1: Batterie[i].Lecture_AN = analogRead(ADC2); break;
     702:	80 e1       	ldi	r24, 0x10	; 16
     704:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <analogRead>
     708:	90 93 68 02 	sts	0x0268, r25	; 0x800268 <Batterie+0xd>
     70c:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <Batterie+0xc>
     710:	0f c0       	rjmp	.+30     	; 0x730 <_Z15TensionBatteriev+0x86>
			case 2: Batterie[i].Lecture_AN = analogRead(ADC3); break;
     712:	81 e1       	ldi	r24, 0x11	; 17
     714:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <analogRead>
     718:	90 93 74 02 	sts	0x0274, r25	; 0x800274 <Batterie+0x19>
     71c:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <Batterie+0x18>
     720:	07 c0       	rjmp	.+14     	; 0x730 <_Z15TensionBatteriev+0x86>
			case 3: Batterie[i].Lecture_AN = analogRead(ADC4); break;
     722:	81 e1       	ldi	r24, 0x11	; 17
     724:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <analogRead>
     728:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <Batterie+0x25>
     72c:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <Batterie+0x24>
		}
		
		// Conversion valeur digitale (0-1023) vers analogique (0-5V)
		Batterie[i].Tension_lue = Batterie[i].Lecture_AN * 5.0f / 1023.0f;
     730:	68 81       	ld	r22, Y
     732:	79 81       	ldd	r23, Y+1	; 0x01
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	0e 94 f3 06 	call	0xde6	; 0xde6 <__floatunsisf>
     73c:	20 e0       	ldi	r18, 0x00	; 0
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	40 ea       	ldi	r20, 0xA0	; 160
     742:	50 e4       	ldi	r21, 0x40	; 64
     744:	0e 94 aa 07 	call	0xf54	; 0xf54 <__mulsf3>
     748:	20 e0       	ldi	r18, 0x00	; 0
     74a:	30 ec       	ldi	r19, 0xC0	; 192
     74c:	4f e7       	ldi	r20, 0x7F	; 127
     74e:	54 e4       	ldi	r21, 0x44	; 68
     750:	0e 94 52 06 	call	0xca4	; 0xca4 <__divsf3>
     754:	6b 01       	movw	r12, r22
     756:	7c 01       	movw	r14, r24
     758:	6a 83       	std	Y+2, r22	; 0x02
     75a:	7b 83       	std	Y+3, r23	; 0x03
     75c:	8c 83       	std	Y+4, r24	; 0x04
     75e:	9d 83       	std	Y+5, r25	; 0x05
		
		// Vérifie si la batterie est en-dessous du seuil critique
		if (Batterie[i].Tension_lue < TENSION_CRITIQUE_LUE)
     760:	27 ed       	ldi	r18, 0xD7	; 215
     762:	33 ea       	ldi	r19, 0xA3	; 163
     764:	40 e9       	ldi	r20, 0x90	; 144
     766:	5f e3       	ldi	r21, 0x3F	; 63
     768:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__cmpsf2>
     76c:	87 ff       	sbrs	r24, 7
     76e:	05 c0       	rjmp	.+10     	; 0x77a <_Z15TensionBatteriev+0xd0>
		{
			Batterie[i].Critique = 1;
     770:	7b 86       	std	Y+11, r7	; 0x0b
			Batterie[i].Pourcentage = 0.0f;
     772:	1e 82       	std	Y+6, r1	; 0x06
     774:	1f 82       	std	Y+7, r1	; 0x07
     776:	18 86       	std	Y+8, r1	; 0x08
     778:	19 86       	std	Y+9, r1	; 0x09
		}
		
		// Vérifie si la batterie est en surcharge
		if (Batterie[i].Tension_lue > TENSION_SURCHARGE_LUE)
     77a:	20 e0       	ldi	r18, 0x00	; 0
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	40 ec       	ldi	r20, 0xC0	; 192
     780:	5f e3       	ldi	r21, 0x3F	; 63
     782:	c7 01       	movw	r24, r14
     784:	b6 01       	movw	r22, r12
     786:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__gesf2>
     78a:	18 16       	cp	r1, r24
     78c:	2c f4       	brge	.+10     	; 0x798 <_Z15TensionBatteriev+0xee>
		{
			Batterie[i].Surcharge = 1;
     78e:	7a 86       	std	Y+10, r7	; 0x0a
			Batterie[i].Pourcentage = 100.0f;
     790:	8e 82       	std	Y+6, r8	; 0x06
     792:	9f 82       	std	Y+7, r9	; 0x07
     794:	a8 86       	std	Y+8, r10	; 0x08
     796:	b9 86       	std	Y+9, r11	; 0x09
		}
		
		// Si la batterie n'est ni en surcharge ni au niveau critique on affiche le niveau en %
		if ((Batterie[i].Surcharge != 1) && (Batterie[i].Critique != 1))
     798:	8a 85       	ldd	r24, Y+10	; 0x0a
     79a:	81 11       	cpse	r24, r1
     79c:	1b c0       	rjmp	.+54     	; 0x7d4 <_Z15TensionBatteriev+0x12a>
     79e:	8b 85       	ldd	r24, Y+11	; 0x0b
     7a0:	81 11       	cpse	r24, r1
     7a2:	18 c0       	rjmp	.+48     	; 0x7d4 <_Z15TensionBatteriev+0x12a>
		{
			Calcul = Batterie[i].Tension_lue - TENSION_CRITIQUE_LUE;
     7a4:	27 ed       	ldi	r18, 0xD7	; 215
     7a6:	33 ea       	ldi	r19, 0xA3	; 163
     7a8:	40 e9       	ldi	r20, 0x90	; 144
     7aa:	5f e3       	ldi	r21, 0x3F	; 63
     7ac:	c7 01       	movw	r24, r14
     7ae:	b6 01       	movw	r22, r12
     7b0:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__subsf3>
			Calcul = Calcul / (TENSION_SURCHARGE_LUE - TENSION_CRITIQUE_LUE);
			Batterie[i].Pourcentage = Calcul * 100;
     7b4:	24 ea       	ldi	r18, 0xA4	; 164
     7b6:	30 e7       	ldi	r19, 0x70	; 112
     7b8:	4d eb       	ldi	r20, 0xBD	; 189
     7ba:	5e e3       	ldi	r21, 0x3E	; 62
     7bc:	0e 94 52 06 	call	0xca4	; 0xca4 <__divsf3>
     7c0:	20 e0       	ldi	r18, 0x00	; 0
     7c2:	30 e0       	ldi	r19, 0x00	; 0
     7c4:	48 ec       	ldi	r20, 0xC8	; 200
     7c6:	52 e4       	ldi	r21, 0x42	; 66
     7c8:	0e 94 aa 07 	call	0xf54	; 0xf54 <__mulsf3>
     7cc:	6e 83       	std	Y+6, r22	; 0x06
     7ce:	7f 83       	std	Y+7, r23	; 0x07
     7d0:	88 87       	std	Y+8, r24	; 0x08
     7d2:	99 87       	std	Y+9, r25	; 0x09
	float			Calcul;
	
	int				i;
	
	// On boucle sur les 4 batteries
	for (i = 0; i < 4; i ++)
     7d4:	0f 5f       	subi	r16, 0xFF	; 255
     7d6:	1f 4f       	sbci	r17, 0xFF	; 255
     7d8:	2c 96       	adiw	r28, 0x0c	; 12
     7da:	04 30       	cpi	r16, 0x04	; 4
     7dc:	11 05       	cpc	r17, r1
     7de:	09 f0       	breq	.+2      	; 0x7e2 <_Z15TensionBatteriev+0x138>
     7e0:	7d cf       	rjmp	.-262    	; 0x6dc <_Z15TensionBatteriev+0x32>
			Batterie[i].Pourcentage = Calcul * 100;
		}
	}
	
	// On prend le niveau minimum des 4 batteries pour l'état du bargraph
	PourcentageMini = min(Batterie[0].Pourcentage, Batterie[1].Pourcentage);
     7e2:	80 90 61 02 	lds	r8, 0x0261	; 0x800261 <Batterie+0x6>
     7e6:	90 90 62 02 	lds	r9, 0x0262	; 0x800262 <Batterie+0x7>
     7ea:	a0 90 63 02 	lds	r10, 0x0263	; 0x800263 <Batterie+0x8>
     7ee:	b0 90 64 02 	lds	r11, 0x0264	; 0x800264 <Batterie+0x9>
     7f2:	c0 90 6d 02 	lds	r12, 0x026D	; 0x80026d <Batterie+0x12>
     7f6:	d0 90 6e 02 	lds	r13, 0x026E	; 0x80026e <Batterie+0x13>
     7fa:	e0 90 6f 02 	lds	r14, 0x026F	; 0x80026f <Batterie+0x14>
     7fe:	f0 90 70 02 	lds	r15, 0x0270	; 0x800270 <Batterie+0x15>
     802:	a7 01       	movw	r20, r14
     804:	96 01       	movw	r18, r12
     806:	c5 01       	movw	r24, r10
     808:	b4 01       	movw	r22, r8
     80a:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__cmpsf2>
     80e:	87 ff       	sbrs	r24, 7
     810:	03 c0       	rjmp	.+6      	; 0x818 <_Z15TensionBatteriev+0x16e>
     812:	c5 01       	movw	r24, r10
     814:	b4 01       	movw	r22, r8
     816:	02 c0       	rjmp	.+4      	; 0x81c <_Z15TensionBatteriev+0x172>
     818:	c7 01       	movw	r24, r14
     81a:	b6 01       	movw	r22, r12
     81c:	0e 94 c4 06 	call	0xd88	; 0xd88 <__fixunssfsi>
     820:	c6 2f       	mov	r28, r22
	PourcentageMini = min(PourcentageMini, Batterie[2].Pourcentage);
     822:	c0 90 79 02 	lds	r12, 0x0279	; 0x800279 <Batterie+0x1e>
     826:	d0 90 7a 02 	lds	r13, 0x027A	; 0x80027a <Batterie+0x1f>
     82a:	e0 90 7b 02 	lds	r14, 0x027B	; 0x80027b <Batterie+0x20>
     82e:	f0 90 7c 02 	lds	r15, 0x027C	; 0x80027c <Batterie+0x21>
     832:	70 e0       	ldi	r23, 0x00	; 0
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	0e 94 f5 06 	call	0xdea	; 0xdea <__floatsisf>
     83c:	a7 01       	movw	r20, r14
     83e:	96 01       	movw	r18, r12
     840:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__cmpsf2>
     844:	87 fd       	sbrc	r24, 7
     846:	05 c0       	rjmp	.+10     	; 0x852 <_Z15TensionBatteriev+0x1a8>
     848:	c7 01       	movw	r24, r14
     84a:	b6 01       	movw	r22, r12
     84c:	0e 94 c4 06 	call	0xd88	; 0xd88 <__fixunssfsi>
     850:	c6 2f       	mov	r28, r22
	PourcentageMini = min(PourcentageMini, Batterie[3].Pourcentage);
     852:	c0 90 85 02 	lds	r12, 0x0285	; 0x800285 <Batterie+0x2a>
     856:	d0 90 86 02 	lds	r13, 0x0286	; 0x800286 <Batterie+0x2b>
     85a:	e0 90 87 02 	lds	r14, 0x0287	; 0x800287 <Batterie+0x2c>
     85e:	f0 90 88 02 	lds	r15, 0x0288	; 0x800288 <Batterie+0x2d>
     862:	6c 2f       	mov	r22, r28
     864:	70 e0       	ldi	r23, 0x00	; 0
     866:	80 e0       	ldi	r24, 0x00	; 0
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	0e 94 f5 06 	call	0xdea	; 0xdea <__floatsisf>
     86e:	a7 01       	movw	r20, r14
     870:	96 01       	movw	r18, r12
     872:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__cmpsf2>
     876:	87 fd       	sbrc	r24, 7
     878:	05 c0       	rjmp	.+10     	; 0x884 <_Z15TensionBatteriev+0x1da>
     87a:	c7 01       	movw	r24, r14
     87c:	b6 01       	movw	r22, r12
     87e:	0e 94 c4 06 	call	0xd88	; 0xd88 <__fixunssfsi>
     882:	c6 2f       	mov	r28, r22
     884:	c0 93 5a 02 	sts	0x025A, r28	; 0x80025a <PourcentageMini>
	
	
}
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
     88c:	1f 91       	pop	r17
     88e:	0f 91       	pop	r16
     890:	ff 90       	pop	r15
     892:	ef 90       	pop	r14
     894:	df 90       	pop	r13
     896:	cf 90       	pop	r12
     898:	bf 90       	pop	r11
     89a:	af 90       	pop	r10
     89c:	9f 90       	pop	r9
     89e:	8f 90       	pop	r8
     8a0:	7f 90       	pop	r7
     8a2:	08 95       	ret

000008a4 <_Z4Demov>:
// Fonction permettant de tester l'afficheur et le bargraph
void Demo()
{
	unsigned int temp;
	
	Vitesse.Actuelle = (unsigned int) (analogRead(A5) * 100.0f / 1023.0f);
     8a4:	83 e1       	ldi	r24, 0x13	; 19
     8a6:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <analogRead>
     8aa:	bc 01       	movw	r22, r24
     8ac:	99 0f       	add	r25, r25
     8ae:	88 0b       	sbc	r24, r24
     8b0:	99 0b       	sbc	r25, r25
     8b2:	0e 94 f5 06 	call	0xdea	; 0xdea <__floatsisf>
     8b6:	20 e0       	ldi	r18, 0x00	; 0
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	48 ec       	ldi	r20, 0xC8	; 200
     8bc:	52 e4       	ldi	r21, 0x42	; 66
     8be:	0e 94 aa 07 	call	0xf54	; 0xf54 <__mulsf3>
     8c2:	20 e0       	ldi	r18, 0x00	; 0
     8c4:	30 ec       	ldi	r19, 0xC0	; 192
     8c6:	4f e7       	ldi	r20, 0x7F	; 127
     8c8:	54 e4       	ldi	r21, 0x44	; 68
     8ca:	0e 94 52 06 	call	0xca4	; 0xca4 <__divsf3>
     8ce:	0e 94 c4 06 	call	0xd88	; 0xd88 <__fixunssfsi>
     8d2:	60 93 8b 02 	sts	0x028B, r22	; 0x80028b <Vitesse>
	
	PourcentageMini = (unsigned int) (analogRead(A5) * 100.0f / 1023.0f);
     8d6:	83 e1       	ldi	r24, 0x13	; 19
     8d8:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <analogRead>
     8dc:	bc 01       	movw	r22, r24
     8de:	99 0f       	add	r25, r25
     8e0:	88 0b       	sbc	r24, r24
     8e2:	99 0b       	sbc	r25, r25
     8e4:	0e 94 f5 06 	call	0xdea	; 0xdea <__floatsisf>
     8e8:	20 e0       	ldi	r18, 0x00	; 0
     8ea:	30 e0       	ldi	r19, 0x00	; 0
     8ec:	48 ec       	ldi	r20, 0xC8	; 200
     8ee:	52 e4       	ldi	r21, 0x42	; 66
     8f0:	0e 94 aa 07 	call	0xf54	; 0xf54 <__mulsf3>
     8f4:	20 e0       	ldi	r18, 0x00	; 0
     8f6:	30 ec       	ldi	r19, 0xC0	; 192
     8f8:	4f e7       	ldi	r20, 0x7F	; 127
     8fa:	54 e4       	ldi	r21, 0x44	; 68
     8fc:	0e 94 52 06 	call	0xca4	; 0xca4 <__divsf3>
     900:	0e 94 c4 06 	call	0xd88	; 0xd88 <__fixunssfsi>
     904:	60 93 5a 02 	sts	0x025A, r22	; 0x80025a <PourcentageMini>
     908:	08 95       	ret

0000090a <_Z12ConvertInfosv>:

// Fonction permettant de convertir les infos pour pouvoir les afficher
void ConvertInfos()
{
	// Convertit la vitesse en donnée pour les afficheurs 7 segments
	if (Vitesse.Actuelle >= 100)
     90a:	20 91 8b 02 	lds	r18, 0x028B	; 0x80028b <Vitesse>
     90e:	24 36       	cpi	r18, 0x64	; 100
     910:	20 f0       	brcs	.+8      	; 0x91a <_Z12ConvertInfosv+0x10>
	{
		// Premier Digit
		Affichage.Digit_1 = AFFICHEUR_7_SEGMENTS[9];
     912:	8f e6       	ldi	r24, 0x6F	; 111
     914:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <__data_end>
     918:	1e c0       	rjmp	.+60     	; 0x956 <_Z12ConvertInfosv+0x4c>
		Affichage.Digit_2 = AFFICHEUR_7_SEGMENTS[9];
	}
	else
	{
		// Premier Digit
		Affichage.Digit_1 = AFFICHEUR_7_SEGMENTS[(unsigned char) (Vitesse.Actuelle % 10)];
     91a:	82 2f       	mov	r24, r18
     91c:	6a e0       	ldi	r22, 0x0A	; 10
     91e:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <__udivmodqi4>
     922:	e9 2f       	mov	r30, r25
     924:	f0 e0       	ldi	r31, 0x00	; 0
     926:	eb 5d       	subi	r30, 0xDB	; 219
     928:	fd 4f       	sbci	r31, 0xFD	; 253
     92a:	80 81       	ld	r24, Z
     92c:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <__data_end>
			
		// Deuxième Digit
		Affichage.Digit_2 = AFFICHEUR_7_SEGMENTS[(unsigned char) (Vitesse.Actuelle / 10.0f)];
     930:	62 2f       	mov	r22, r18
     932:	70 e0       	ldi	r23, 0x00	; 0
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	0e 94 f5 06 	call	0xdea	; 0xdea <__floatsisf>
     93c:	20 e0       	ldi	r18, 0x00	; 0
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	40 e2       	ldi	r20, 0x20	; 32
     942:	51 e4       	ldi	r21, 0x41	; 65
     944:	0e 94 52 06 	call	0xca4	; 0xca4 <__divsf3>
     948:	0e 94 c4 06 	call	0xd88	; 0xd88 <__fixunssfsi>
     94c:	e6 2f       	mov	r30, r22
     94e:	f0 e0       	ldi	r31, 0x00	; 0
     950:	eb 5d       	subi	r30, 0xDB	; 219
     952:	fd 4f       	sbci	r31, 0xFD	; 253
     954:	80 81       	ld	r24, Z
     956:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <__data_end+0x1>
	}
	
	// Convertit l'information de la batterie la plsu faible pour le bargraph
	Affichage.Bargraph = BARGRAPH[PourcentageMini/10];
     95a:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <PourcentageMini>
     95e:	6a e0       	ldi	r22, 0x0A	; 10
     960:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <__udivmodqi4>
     964:	e8 2f       	mov	r30, r24
     966:	f0 e0       	ldi	r31, 0x00	; 0
     968:	ee 0f       	add	r30, r30
     96a:	ff 1f       	adc	r31, r31
     96c:	e1 5f       	subi	r30, 0xF1	; 241
     96e:	fd 4f       	sbci	r31, 0xFD	; 253
     970:	80 81       	ld	r24, Z
     972:	91 81       	ldd	r25, Z+1	; 0x01
     974:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <__data_end+0x3>
     978:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <__data_end+0x2>
     97c:	08 95       	ret

0000097e <_Z12writeMAX6971v>:
}

// Fonction permettant de modifier les registres du MAX6971
void writeMAX6971()
{
     97e:	cf 93       	push	r28
     980:	df 93       	push	r29
	unsigned char i;
	
	shiftOut(AFF_DATA, AFF_CLK, MSBFIRST, (unsigned char) (Affichage.Bargraph >> 8));
     982:	c6 e5       	ldi	r28, 0x56	; 86
     984:	d2 e0       	ldi	r29, 0x02	; 2
     986:	2b 81       	ldd	r18, Y+3	; 0x03
     988:	41 e0       	ldi	r20, 0x01	; 1
     98a:	69 e0       	ldi	r22, 0x09	; 9
     98c:	88 e0       	ldi	r24, 0x08	; 8
     98e:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <shiftOut>
	shiftOut(AFF_DATA, AFF_CLK, MSBFIRST, (unsigned char) Affichage.Bargraph);
     992:	2a 81       	ldd	r18, Y+2	; 0x02
     994:	41 e0       	ldi	r20, 0x01	; 1
     996:	69 e0       	ldi	r22, 0x09	; 9
     998:	88 e0       	ldi	r24, 0x08	; 8
     99a:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <shiftOut>
	shiftOut(AFF_DATA, AFF_CLK, MSBFIRST, Affichage.Digit_1);
     99e:	28 81       	ld	r18, Y
     9a0:	41 e0       	ldi	r20, 0x01	; 1
     9a2:	69 e0       	ldi	r22, 0x09	; 9
     9a4:	88 e0       	ldi	r24, 0x08	; 8
     9a6:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <shiftOut>
	shiftOut(AFF_DATA, AFF_CLK, MSBFIRST, Affichage.Digit_2);
     9aa:	29 81       	ldd	r18, Y+1	; 0x01
     9ac:	41 e0       	ldi	r20, 0x01	; 1
     9ae:	69 e0       	ldi	r22, 0x09	; 9
     9b0:	88 e0       	ldi	r24, 0x08	; 8
     9b2:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <shiftOut>
	
	digitalWrite(AFF_LAT, HIGH);
     9b6:	61 e0       	ldi	r22, 0x01	; 1
     9b8:	8a e0       	ldi	r24, 0x0A	; 10
     9ba:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <digitalWrite>
	digitalWrite(AFF_LAT, LOW);
     9be:	60 e0       	ldi	r22, 0x00	; 0
     9c0:	8a e0       	ldi	r24, 0x0A	; 10
}
     9c2:	df 91       	pop	r29
     9c4:	cf 91       	pop	r28
	shiftOut(AFF_DATA, AFF_CLK, MSBFIRST, (unsigned char) Affichage.Bargraph);
	shiftOut(AFF_DATA, AFF_CLK, MSBFIRST, Affichage.Digit_1);
	shiftOut(AFF_DATA, AFF_CLK, MSBFIRST, Affichage.Digit_2);
	
	digitalWrite(AFF_LAT, HIGH);
	digitalWrite(AFF_LAT, LOW);
     9c6:	0c 94 4f 0d 	jmp	0x1a9e	; 0x1a9e <digitalWrite>

000009ca <_Z17AfficheInfosSeriev>:
}

// Fonction permettant d'afficher les infos sur le port série
void AfficheInfosSerie()
{
     9ca:	0f 93       	push	r16
     9cc:	1f 93       	push	r17
     9ce:	cf 93       	push	r28
     9d0:	df 93       	push	r29
	int i;
	
	Serial.println("----------------------------------");
     9d2:	61 e0       	ldi	r22, 0x01	; 1
     9d4:	71 e0       	ldi	r23, 0x01	; 1
     9d6:	82 ed       	ldi	r24, 0xD2	; 210
     9d8:	92 e0       	ldi	r25, 0x02	; 2
     9da:	0e 94 3c 0a 	call	0x1478	; 0x1478 <_ZN5Print7printlnEPKc>
	Serial.print("Temps écoulé depuis le démarrage : ");
     9de:	64 e2       	ldi	r22, 0x24	; 36
     9e0:	71 e0       	ldi	r23, 0x01	; 1
     9e2:	82 ed       	ldi	r24, 0xD2	; 210
     9e4:	92 e0       	ldi	r25, 0x02	; 2
     9e6:	0e 94 2f 0a 	call	0x145e	; 0x145e <_ZN5Print5printEPKc>
	Serial.print(TempsEcoule);
     9ea:	40 91 97 02 	lds	r20, 0x0297	; 0x800297 <TempsEcoule>
     9ee:	50 91 98 02 	lds	r21, 0x0298	; 0x800298 <TempsEcoule+0x1>
     9f2:	60 91 99 02 	lds	r22, 0x0299	; 0x800299 <TempsEcoule+0x2>
     9f6:	70 91 9a 02 	lds	r23, 0x029A	; 0x80029a <TempsEcoule+0x3>
     9fa:	2a e0       	ldi	r18, 0x0A	; 10
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	82 ed       	ldi	r24, 0xD2	; 210
     a00:	92 e0       	ldi	r25, 0x02	; 2
     a02:	0e 94 97 0a 	call	0x152e	; 0x152e <_ZN5Print5printEmi>
	Serial.print("s");
     a06:	6b e4       	ldi	r22, 0x4B	; 75
     a08:	71 e0       	ldi	r23, 0x01	; 1
     a0a:	82 ed       	ldi	r24, 0xD2	; 210
     a0c:	92 e0       	ldi	r25, 0x02	; 2
     a0e:	0e 94 2f 0a 	call	0x145e	; 0x145e <_ZN5Print5printEPKc>
	Serial.println(",\n");
     a12:	6d e4       	ldi	r22, 0x4D	; 77
     a14:	71 e0       	ldi	r23, 0x01	; 1
     a16:	82 ed       	ldi	r24, 0xD2	; 210
     a18:	92 e0       	ldi	r25, 0x02	; 2
     a1a:	0e 94 3c 0a 	call	0x1478	; 0x1478 <_ZN5Print7printlnEPKc>
	
	Serial.print("Vitesse actuelle : ");
     a1e:	60 e5       	ldi	r22, 0x50	; 80
     a20:	71 e0       	ldi	r23, 0x01	; 1
     a22:	82 ed       	ldi	r24, 0xD2	; 210
     a24:	92 e0       	ldi	r25, 0x02	; 2
     a26:	0e 94 2f 0a 	call	0x145e	; 0x145e <_ZN5Print5printEPKc>
	Serial.print(Vitesse.Actuelle);
     a2a:	4a e0       	ldi	r20, 0x0A	; 10
     a2c:	50 e0       	ldi	r21, 0x00	; 0
     a2e:	60 91 8b 02 	lds	r22, 0x028B	; 0x80028b <Vitesse>
     a32:	82 ed       	ldi	r24, 0xD2	; 210
     a34:	92 e0       	ldi	r25, 0x02	; 2
     a36:	0e 94 a4 0a 	call	0x1548	; 0x1548 <_ZN5Print5printEhi>
	Serial.println(",\n");
     a3a:	6d e4       	ldi	r22, 0x4D	; 77
     a3c:	71 e0       	ldi	r23, 0x01	; 1
     a3e:	82 ed       	ldi	r24, 0xD2	; 210
     a40:	92 e0       	ldi	r25, 0x02	; 2
     a42:	0e 94 3c 0a 	call	0x1478	; 0x1478 <_ZN5Print7printlnEPKc>

	Serial.println("Niveaux Batteries :");
     a46:	64 e6       	ldi	r22, 0x64	; 100
     a48:	71 e0       	ldi	r23, 0x01	; 1
     a4a:	82 ed       	ldi	r24, 0xD2	; 210
     a4c:	92 e0       	ldi	r25, 0x02	; 2
     a4e:	0e 94 3c 0a 	call	0x1478	; 0x1478 <_ZN5Print7printlnEPKc>
     a52:	cb e5       	ldi	r28, 0x5B	; 91
     a54:	d2 e0       	ldi	r29, 0x02	; 2
	
	for (i = 0; i < 4; i ++)
     a56:	00 e0       	ldi	r16, 0x00	; 0
     a58:	10 e0       	ldi	r17, 0x00	; 0
	{
		Serial.print("La Batterie ");
     a5a:	68 e7       	ldi	r22, 0x78	; 120
     a5c:	71 e0       	ldi	r23, 0x01	; 1
     a5e:	82 ed       	ldi	r24, 0xD2	; 210
     a60:	92 e0       	ldi	r25, 0x02	; 2
     a62:	0e 94 2f 0a 	call	0x145e	; 0x145e <_ZN5Print5printEPKc>
		Serial.print(i + 1);
     a66:	0f 5f       	subi	r16, 0xFF	; 255
     a68:	1f 4f       	sbci	r17, 0xFF	; 255
     a6a:	4a e0       	ldi	r20, 0x0A	; 10
     a6c:	50 e0       	ldi	r21, 0x00	; 0
     a6e:	b8 01       	movw	r22, r16
     a70:	82 ed       	ldi	r24, 0xD2	; 210
     a72:	92 e0       	ldi	r25, 0x02	; 2
     a74:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <_ZN5Print5printEii>

		if (Batterie[i].Critique)		{	Serial.println(" a atteint un niveau critique! \nS'arreter d'urgence!!\n");	}
     a78:	8b 85       	ldd	r24, Y+11	; 0x0b
     a7a:	88 23       	and	r24, r24
     a7c:	19 f0       	breq	.+6      	; 0xa84 <_Z17AfficheInfosSeriev+0xba>
     a7e:	65 e8       	ldi	r22, 0x85	; 133
     a80:	71 e0       	ldi	r23, 0x01	; 1
     a82:	05 c0       	rjmp	.+10     	; 0xa8e <_Z17AfficheInfosSeriev+0xc4>
		else if (Batterie[i].Surcharge)	{	Serial.println(" a atteint sa charge max \nVeuillez stopper la charge\n");	}
     a84:	8a 85       	ldd	r24, Y+10	; 0x0a
     a86:	88 23       	and	r24, r24
     a88:	21 f1       	breq	.+72     	; 0xad2 <_Z17AfficheInfosSeriev+0x108>
     a8a:	6c eb       	ldi	r22, 0xBC	; 188
     a8c:	71 e0       	ldi	r23, 0x01	; 1
     a8e:	82 ed       	ldi	r24, 0xD2	; 210
     a90:	92 e0       	ldi	r25, 0x02	; 2
     a92:	0e 94 3c 0a 	call	0x1478	; 0x1478 <_ZN5Print7printlnEPKc>
     a96:	2c 96       	adiw	r28, 0x0c	; 12
	Serial.print(Vitesse.Actuelle);
	Serial.println(",\n");

	Serial.println("Niveaux Batteries :");
	
	for (i = 0; i < 4; i ++)
     a98:	04 30       	cpi	r16, 0x04	; 4
     a9a:	11 05       	cpc	r17, r1
     a9c:	f1 f6       	brne	.-68     	; 0xa5a <_Z17AfficheInfosSeriev+0x90>
			Serial.print(Batterie[i].Pourcentage);
			Serial.println("%\n");
		}
	}
	
	Serial.print("Etat Bargraph : ");
     a9e:	6e ef       	ldi	r22, 0xFE	; 254
     aa0:	71 e0       	ldi	r23, 0x01	; 1
     aa2:	82 ed       	ldi	r24, 0xD2	; 210
     aa4:	92 e0       	ldi	r25, 0x02	; 2
     aa6:	0e 94 2f 0a 	call	0x145e	; 0x145e <_ZN5Print5printEPKc>
	Serial.print(Affichage.Bargraph, BIN);
     aaa:	60 91 58 02 	lds	r22, 0x0258	; 0x800258 <__data_end+0x2>
     aae:	70 91 59 02 	lds	r23, 0x0259	; 0x800259 <__data_end+0x3>
     ab2:	42 e0       	ldi	r20, 0x02	; 2
     ab4:	50 e0       	ldi	r21, 0x00	; 0
     ab6:	82 ed       	ldi	r24, 0xD2	; 210
     ab8:	92 e0       	ldi	r25, 0x02	; 2
     aba:	0e 94 ab 0a 	call	0x1556	; 0x1556 <_ZN5Print5printEji>
	Serial.println("\n");
     abe:	68 e4       	ldi	r22, 0x48	; 72
     ac0:	72 e0       	ldi	r23, 0x02	; 2
     ac2:	82 ed       	ldi	r24, 0xD2	; 210
     ac4:	92 e0       	ldi	r25, 0x02	; 2
}
     ac6:	df 91       	pop	r29
     ac8:	cf 91       	pop	r28
     aca:	1f 91       	pop	r17
     acc:	0f 91       	pop	r16
		}
	}
	
	Serial.print("Etat Bargraph : ");
	Serial.print(Affichage.Bargraph, BIN);
	Serial.println("\n");
     ace:	0c 94 3c 0a 	jmp	0x1478	; 0x1478 <_ZN5Print7printlnEPKc>

		if (Batterie[i].Critique)		{	Serial.println(" a atteint un niveau critique! \nS'arreter d'urgence!!\n");	}
		else if (Batterie[i].Surcharge)	{	Serial.println(" a atteint sa charge max \nVeuillez stopper la charge\n");	}
		else
		{
			Serial.print(" est à ");
     ad2:	62 ef       	ldi	r22, 0xF2	; 242
     ad4:	71 e0       	ldi	r23, 0x01	; 1
     ad6:	82 ed       	ldi	r24, 0xD2	; 210
     ad8:	92 e0       	ldi	r25, 0x02	; 2
     ada:	0e 94 2f 0a 	call	0x145e	; 0x145e <_ZN5Print5printEPKc>
			Serial.print(Batterie[i].Pourcentage);
     ade:	4e 81       	ldd	r20, Y+6	; 0x06
     ae0:	5f 81       	ldd	r21, Y+7	; 0x07
     ae2:	68 85       	ldd	r22, Y+8	; 0x08
     ae4:	79 85       	ldd	r23, Y+9	; 0x09
     ae6:	22 e0       	ldi	r18, 0x02	; 2
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	82 ed       	ldi	r24, 0xD2	; 210
     aec:	92 e0       	ldi	r25, 0x02	; 2
     aee:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <_ZN5Print5printEdi>
			Serial.println("%\n");
     af2:	6b ef       	ldi	r22, 0xFB	; 251
     af4:	71 e0       	ldi	r23, 0x01	; 1
     af6:	cb cf       	rjmp	.-106    	; 0xa8e <_Z17AfficheInfosSeriev+0xc4>

00000af8 <loop>:
	Serial.println("\n");
}

// Equivalent au main sur Arduino
void loop ()
{
     af8:	0f 93       	push	r16
     afa:	1f 93       	push	r17
	if ((millis() - Count0) > 1000)
     afc:	0e 94 27 0c 	call	0x184e	; 0x184e <millis>
     b00:	00 91 93 02 	lds	r16, 0x0293	; 0x800293 <Count0>
     b04:	10 91 94 02 	lds	r17, 0x0294	; 0x800294 <Count0+0x1>
     b08:	20 91 95 02 	lds	r18, 0x0295	; 0x800295 <Count0+0x2>
     b0c:	30 91 96 02 	lds	r19, 0x0296	; 0x800296 <Count0+0x3>
     b10:	dc 01       	movw	r26, r24
     b12:	cb 01       	movw	r24, r22
     b14:	80 1b       	sub	r24, r16
     b16:	91 0b       	sbc	r25, r17
     b18:	a2 0b       	sbc	r26, r18
     b1a:	b3 0b       	sbc	r27, r19
     b1c:	89 3e       	cpi	r24, 0xE9	; 233
     b1e:	93 40       	sbci	r25, 0x03	; 3
     b20:	a1 05       	cpc	r26, r1
     b22:	b1 05       	cpc	r27, r1
     b24:	e8 f0       	brcs	.+58     	; 0xb60 <loop+0x68>
	{
		Count0 = millis();
     b26:	0e 94 27 0c 	call	0x184e	; 0x184e <millis>
     b2a:	60 93 93 02 	sts	0x0293, r22	; 0x800293 <Count0>
     b2e:	70 93 94 02 	sts	0x0294, r23	; 0x800294 <Count0+0x1>
     b32:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <Count0+0x2>
     b36:	90 93 96 02 	sts	0x0296, r25	; 0x800296 <Count0+0x3>
		TempsEcoule ++;
     b3a:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <TempsEcoule>
     b3e:	90 91 98 02 	lds	r25, 0x0298	; 0x800298 <TempsEcoule+0x1>
     b42:	a0 91 99 02 	lds	r26, 0x0299	; 0x800299 <TempsEcoule+0x2>
     b46:	b0 91 9a 02 	lds	r27, 0x029A	; 0x80029a <TempsEcoule+0x3>
     b4a:	01 96       	adiw	r24, 0x01	; 1
     b4c:	a1 1d       	adc	r26, r1
     b4e:	b1 1d       	adc	r27, r1
     b50:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <TempsEcoule>
     b54:	90 93 98 02 	sts	0x0298, r25	; 0x800298 <TempsEcoule+0x1>
     b58:	a0 93 99 02 	sts	0x0299, r26	; 0x800299 <TempsEcoule+0x2>
     b5c:	b0 93 9a 02 	sts	0x029A, r27	; 0x80029a <TempsEcoule+0x3>
	}
	
	if ((millis() - Count1) > 200)
     b60:	0e 94 27 0c 	call	0x184e	; 0x184e <millis>
     b64:	00 91 8f 02 	lds	r16, 0x028F	; 0x80028f <Count1>
     b68:	10 91 90 02 	lds	r17, 0x0290	; 0x800290 <Count1+0x1>
     b6c:	20 91 91 02 	lds	r18, 0x0291	; 0x800291 <Count1+0x2>
     b70:	30 91 92 02 	lds	r19, 0x0292	; 0x800292 <Count1+0x3>
     b74:	dc 01       	movw	r26, r24
     b76:	cb 01       	movw	r24, r22
     b78:	80 1b       	sub	r24, r16
     b7a:	91 0b       	sbc	r25, r17
     b7c:	a2 0b       	sbc	r26, r18
     b7e:	b3 0b       	sbc	r27, r19
     b80:	89 3c       	cpi	r24, 0xC9	; 201
     b82:	91 05       	cpc	r25, r1
     b84:	a1 05       	cpc	r26, r1
     b86:	b1 05       	cpc	r27, r1
     b88:	c0 f0       	brcs	.+48     	; 0xbba <loop+0xc2>
	{
		Count1 = millis();
     b8a:	0e 94 27 0c 	call	0x184e	; 0x184e <millis>
     b8e:	60 93 8f 02 	sts	0x028F, r22	; 0x80028f <Count1>
     b92:	70 93 90 02 	sts	0x0290, r23	; 0x800290 <Count1+0x1>
     b96:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <Count1+0x2>
     b9a:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <Count1+0x3>
		
		// Récupère info vitesse
		Lecture_Vitesse();
     b9e:	0e 94 32 03 	call	0x664	; 0x664 <_Z15Lecture_Vitessev>
		
		// Récupère info tension batterie
		TensionBatterie();
     ba2:	0e 94 55 03 	call	0x6aa	; 0x6aa <_Z15TensionBatteriev>
		
		// Mode Démo : permet de tester l'afficheur et le bargraph
		Demo();
     ba6:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_Z4Demov>
		
		// Convertit les infos pour pouvoir les afficher
		ConvertInfos();
     baa:	0e 94 85 04 	call	0x90a	; 0x90a <_Z12ConvertInfosv>
		
		// Affiche les infos sur l'afficheur 7 segments et le bargraph
		writeMAX6971();
     bae:	0e 94 bf 04 	call	0x97e	; 0x97e <_Z12writeMAX6971v>
		
		// Affiche les infos sur le port série
		AfficheInfosSerie();
	}
     bb2:	1f 91       	pop	r17
     bb4:	0f 91       	pop	r16
		
		// Affiche les infos sur l'afficheur 7 segments et le bargraph
		writeMAX6971();
		
		// Affiche les infos sur le port série
		AfficheInfosSerie();
     bb6:	0c 94 e5 04 	jmp	0x9ca	; 0x9ca <_Z17AfficheInfosSeriev>
	}
     bba:	1f 91       	pop	r17
     bbc:	0f 91       	pop	r16
     bbe:	08 95       	ret

00000bc0 <__subsf3>:
     bc0:	50 58       	subi	r21, 0x80	; 128

00000bc2 <__addsf3>:
     bc2:	bb 27       	eor	r27, r27
     bc4:	aa 27       	eor	r26, r26
     bc6:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__addsf3x>
     bca:	0c 94 6b 07 	jmp	0xed6	; 0xed6 <__fp_round>
     bce:	0e 94 5d 07 	call	0xeba	; 0xeba <__fp_pscA>
     bd2:	38 f0       	brcs	.+14     	; 0xbe2 <__addsf3+0x20>
     bd4:	0e 94 64 07 	call	0xec8	; 0xec8 <__fp_pscB>
     bd8:	20 f0       	brcs	.+8      	; 0xbe2 <__addsf3+0x20>
     bda:	39 f4       	brne	.+14     	; 0xbea <__addsf3+0x28>
     bdc:	9f 3f       	cpi	r25, 0xFF	; 255
     bde:	19 f4       	brne	.+6      	; 0xbe6 <__addsf3+0x24>
     be0:	26 f4       	brtc	.+8      	; 0xbea <__addsf3+0x28>
     be2:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <__fp_nan>
     be6:	0e f4       	brtc	.+2      	; 0xbea <__addsf3+0x28>
     be8:	e0 95       	com	r30
     bea:	e7 fb       	bst	r30, 7
     bec:	0c 94 54 07 	jmp	0xea8	; 0xea8 <__fp_inf>

00000bf0 <__addsf3x>:
     bf0:	e9 2f       	mov	r30, r25
     bf2:	0e 94 7c 07 	call	0xef8	; 0xef8 <__fp_split3>
     bf6:	58 f3       	brcs	.-42     	; 0xbce <__addsf3+0xc>
     bf8:	ba 17       	cp	r27, r26
     bfa:	62 07       	cpc	r22, r18
     bfc:	73 07       	cpc	r23, r19
     bfe:	84 07       	cpc	r24, r20
     c00:	95 07       	cpc	r25, r21
     c02:	20 f0       	brcs	.+8      	; 0xc0c <__addsf3x+0x1c>
     c04:	79 f4       	brne	.+30     	; 0xc24 <__addsf3x+0x34>
     c06:	a6 f5       	brtc	.+104    	; 0xc70 <__addsf3x+0x80>
     c08:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__fp_zero>
     c0c:	0e f4       	brtc	.+2      	; 0xc10 <__addsf3x+0x20>
     c0e:	e0 95       	com	r30
     c10:	0b 2e       	mov	r0, r27
     c12:	ba 2f       	mov	r27, r26
     c14:	a0 2d       	mov	r26, r0
     c16:	0b 01       	movw	r0, r22
     c18:	b9 01       	movw	r22, r18
     c1a:	90 01       	movw	r18, r0
     c1c:	0c 01       	movw	r0, r24
     c1e:	ca 01       	movw	r24, r20
     c20:	a0 01       	movw	r20, r0
     c22:	11 24       	eor	r1, r1
     c24:	ff 27       	eor	r31, r31
     c26:	59 1b       	sub	r21, r25
     c28:	99 f0       	breq	.+38     	; 0xc50 <__addsf3x+0x60>
     c2a:	59 3f       	cpi	r21, 0xF9	; 249
     c2c:	50 f4       	brcc	.+20     	; 0xc42 <__addsf3x+0x52>
     c2e:	50 3e       	cpi	r21, 0xE0	; 224
     c30:	68 f1       	brcs	.+90     	; 0xc8c <__addsf3x+0x9c>
     c32:	1a 16       	cp	r1, r26
     c34:	f0 40       	sbci	r31, 0x00	; 0
     c36:	a2 2f       	mov	r26, r18
     c38:	23 2f       	mov	r18, r19
     c3a:	34 2f       	mov	r19, r20
     c3c:	44 27       	eor	r20, r20
     c3e:	58 5f       	subi	r21, 0xF8	; 248
     c40:	f3 cf       	rjmp	.-26     	; 0xc28 <__addsf3x+0x38>
     c42:	46 95       	lsr	r20
     c44:	37 95       	ror	r19
     c46:	27 95       	ror	r18
     c48:	a7 95       	ror	r26
     c4a:	f0 40       	sbci	r31, 0x00	; 0
     c4c:	53 95       	inc	r21
     c4e:	c9 f7       	brne	.-14     	; 0xc42 <__addsf3x+0x52>
     c50:	7e f4       	brtc	.+30     	; 0xc70 <__addsf3x+0x80>
     c52:	1f 16       	cp	r1, r31
     c54:	ba 0b       	sbc	r27, r26
     c56:	62 0b       	sbc	r22, r18
     c58:	73 0b       	sbc	r23, r19
     c5a:	84 0b       	sbc	r24, r20
     c5c:	ba f0       	brmi	.+46     	; 0xc8c <__addsf3x+0x9c>
     c5e:	91 50       	subi	r25, 0x01	; 1
     c60:	a1 f0       	breq	.+40     	; 0xc8a <__addsf3x+0x9a>
     c62:	ff 0f       	add	r31, r31
     c64:	bb 1f       	adc	r27, r27
     c66:	66 1f       	adc	r22, r22
     c68:	77 1f       	adc	r23, r23
     c6a:	88 1f       	adc	r24, r24
     c6c:	c2 f7       	brpl	.-16     	; 0xc5e <__addsf3x+0x6e>
     c6e:	0e c0       	rjmp	.+28     	; 0xc8c <__addsf3x+0x9c>
     c70:	ba 0f       	add	r27, r26
     c72:	62 1f       	adc	r22, r18
     c74:	73 1f       	adc	r23, r19
     c76:	84 1f       	adc	r24, r20
     c78:	48 f4       	brcc	.+18     	; 0xc8c <__addsf3x+0x9c>
     c7a:	87 95       	ror	r24
     c7c:	77 95       	ror	r23
     c7e:	67 95       	ror	r22
     c80:	b7 95       	ror	r27
     c82:	f7 95       	ror	r31
     c84:	9e 3f       	cpi	r25, 0xFE	; 254
     c86:	08 f0       	brcs	.+2      	; 0xc8a <__addsf3x+0x9a>
     c88:	b0 cf       	rjmp	.-160    	; 0xbea <__addsf3+0x28>
     c8a:	93 95       	inc	r25
     c8c:	88 0f       	add	r24, r24
     c8e:	08 f0       	brcs	.+2      	; 0xc92 <__addsf3x+0xa2>
     c90:	99 27       	eor	r25, r25
     c92:	ee 0f       	add	r30, r30
     c94:	97 95       	ror	r25
     c96:	87 95       	ror	r24
     c98:	08 95       	ret

00000c9a <__cmpsf2>:
     c9a:	0e 94 30 07 	call	0xe60	; 0xe60 <__fp_cmp>
     c9e:	08 f4       	brcc	.+2      	; 0xca2 <__cmpsf2+0x8>
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	08 95       	ret

00000ca4 <__divsf3>:
     ca4:	0e 94 66 06 	call	0xccc	; 0xccc <__divsf3x>
     ca8:	0c 94 6b 07 	jmp	0xed6	; 0xed6 <__fp_round>
     cac:	0e 94 64 07 	call	0xec8	; 0xec8 <__fp_pscB>
     cb0:	58 f0       	brcs	.+22     	; 0xcc8 <__divsf3+0x24>
     cb2:	0e 94 5d 07 	call	0xeba	; 0xeba <__fp_pscA>
     cb6:	40 f0       	brcs	.+16     	; 0xcc8 <__divsf3+0x24>
     cb8:	29 f4       	brne	.+10     	; 0xcc4 <__divsf3+0x20>
     cba:	5f 3f       	cpi	r21, 0xFF	; 255
     cbc:	29 f0       	breq	.+10     	; 0xcc8 <__divsf3+0x24>
     cbe:	0c 94 54 07 	jmp	0xea8	; 0xea8 <__fp_inf>
     cc2:	51 11       	cpse	r21, r1
     cc4:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__fp_szero>
     cc8:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <__fp_nan>

00000ccc <__divsf3x>:
     ccc:	0e 94 7c 07 	call	0xef8	; 0xef8 <__fp_split3>
     cd0:	68 f3       	brcs	.-38     	; 0xcac <__divsf3+0x8>

00000cd2 <__divsf3_pse>:
     cd2:	99 23       	and	r25, r25
     cd4:	b1 f3       	breq	.-20     	; 0xcc2 <__divsf3+0x1e>
     cd6:	55 23       	and	r21, r21
     cd8:	91 f3       	breq	.-28     	; 0xcbe <__divsf3+0x1a>
     cda:	95 1b       	sub	r25, r21
     cdc:	55 0b       	sbc	r21, r21
     cde:	bb 27       	eor	r27, r27
     ce0:	aa 27       	eor	r26, r26
     ce2:	62 17       	cp	r22, r18
     ce4:	73 07       	cpc	r23, r19
     ce6:	84 07       	cpc	r24, r20
     ce8:	38 f0       	brcs	.+14     	; 0xcf8 <__divsf3_pse+0x26>
     cea:	9f 5f       	subi	r25, 0xFF	; 255
     cec:	5f 4f       	sbci	r21, 0xFF	; 255
     cee:	22 0f       	add	r18, r18
     cf0:	33 1f       	adc	r19, r19
     cf2:	44 1f       	adc	r20, r20
     cf4:	aa 1f       	adc	r26, r26
     cf6:	a9 f3       	breq	.-22     	; 0xce2 <__divsf3_pse+0x10>
     cf8:	35 d0       	rcall	.+106    	; 0xd64 <__divsf3_pse+0x92>
     cfa:	0e 2e       	mov	r0, r30
     cfc:	3a f0       	brmi	.+14     	; 0xd0c <__divsf3_pse+0x3a>
     cfe:	e0 e8       	ldi	r30, 0x80	; 128
     d00:	32 d0       	rcall	.+100    	; 0xd66 <__divsf3_pse+0x94>
     d02:	91 50       	subi	r25, 0x01	; 1
     d04:	50 40       	sbci	r21, 0x00	; 0
     d06:	e6 95       	lsr	r30
     d08:	00 1c       	adc	r0, r0
     d0a:	ca f7       	brpl	.-14     	; 0xcfe <__divsf3_pse+0x2c>
     d0c:	2b d0       	rcall	.+86     	; 0xd64 <__divsf3_pse+0x92>
     d0e:	fe 2f       	mov	r31, r30
     d10:	29 d0       	rcall	.+82     	; 0xd64 <__divsf3_pse+0x92>
     d12:	66 0f       	add	r22, r22
     d14:	77 1f       	adc	r23, r23
     d16:	88 1f       	adc	r24, r24
     d18:	bb 1f       	adc	r27, r27
     d1a:	26 17       	cp	r18, r22
     d1c:	37 07       	cpc	r19, r23
     d1e:	48 07       	cpc	r20, r24
     d20:	ab 07       	cpc	r26, r27
     d22:	b0 e8       	ldi	r27, 0x80	; 128
     d24:	09 f0       	breq	.+2      	; 0xd28 <__divsf3_pse+0x56>
     d26:	bb 0b       	sbc	r27, r27
     d28:	80 2d       	mov	r24, r0
     d2a:	bf 01       	movw	r22, r30
     d2c:	ff 27       	eor	r31, r31
     d2e:	93 58       	subi	r25, 0x83	; 131
     d30:	5f 4f       	sbci	r21, 0xFF	; 255
     d32:	3a f0       	brmi	.+14     	; 0xd42 <__divsf3_pse+0x70>
     d34:	9e 3f       	cpi	r25, 0xFE	; 254
     d36:	51 05       	cpc	r21, r1
     d38:	78 f0       	brcs	.+30     	; 0xd58 <__divsf3_pse+0x86>
     d3a:	0c 94 54 07 	jmp	0xea8	; 0xea8 <__fp_inf>
     d3e:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__fp_szero>
     d42:	5f 3f       	cpi	r21, 0xFF	; 255
     d44:	e4 f3       	brlt	.-8      	; 0xd3e <__divsf3_pse+0x6c>
     d46:	98 3e       	cpi	r25, 0xE8	; 232
     d48:	d4 f3       	brlt	.-12     	; 0xd3e <__divsf3_pse+0x6c>
     d4a:	86 95       	lsr	r24
     d4c:	77 95       	ror	r23
     d4e:	67 95       	ror	r22
     d50:	b7 95       	ror	r27
     d52:	f7 95       	ror	r31
     d54:	9f 5f       	subi	r25, 0xFF	; 255
     d56:	c9 f7       	brne	.-14     	; 0xd4a <__divsf3_pse+0x78>
     d58:	88 0f       	add	r24, r24
     d5a:	91 1d       	adc	r25, r1
     d5c:	96 95       	lsr	r25
     d5e:	87 95       	ror	r24
     d60:	97 f9       	bld	r25, 7
     d62:	08 95       	ret
     d64:	e1 e0       	ldi	r30, 0x01	; 1
     d66:	66 0f       	add	r22, r22
     d68:	77 1f       	adc	r23, r23
     d6a:	88 1f       	adc	r24, r24
     d6c:	bb 1f       	adc	r27, r27
     d6e:	62 17       	cp	r22, r18
     d70:	73 07       	cpc	r23, r19
     d72:	84 07       	cpc	r24, r20
     d74:	ba 07       	cpc	r27, r26
     d76:	20 f0       	brcs	.+8      	; 0xd80 <__divsf3_pse+0xae>
     d78:	62 1b       	sub	r22, r18
     d7a:	73 0b       	sbc	r23, r19
     d7c:	84 0b       	sbc	r24, r20
     d7e:	ba 0b       	sbc	r27, r26
     d80:	ee 1f       	adc	r30, r30
     d82:	88 f7       	brcc	.-30     	; 0xd66 <__divsf3_pse+0x94>
     d84:	e0 95       	com	r30
     d86:	08 95       	ret

00000d88 <__fixunssfsi>:
     d88:	0e 94 84 07 	call	0xf08	; 0xf08 <__fp_splitA>
     d8c:	88 f0       	brcs	.+34     	; 0xdb0 <__fixunssfsi+0x28>
     d8e:	9f 57       	subi	r25, 0x7F	; 127
     d90:	98 f0       	brcs	.+38     	; 0xdb8 <__fixunssfsi+0x30>
     d92:	b9 2f       	mov	r27, r25
     d94:	99 27       	eor	r25, r25
     d96:	b7 51       	subi	r27, 0x17	; 23
     d98:	b0 f0       	brcs	.+44     	; 0xdc6 <__fixunssfsi+0x3e>
     d9a:	e1 f0       	breq	.+56     	; 0xdd4 <__fixunssfsi+0x4c>
     d9c:	66 0f       	add	r22, r22
     d9e:	77 1f       	adc	r23, r23
     da0:	88 1f       	adc	r24, r24
     da2:	99 1f       	adc	r25, r25
     da4:	1a f0       	brmi	.+6      	; 0xdac <__fixunssfsi+0x24>
     da6:	ba 95       	dec	r27
     da8:	c9 f7       	brne	.-14     	; 0xd9c <__fixunssfsi+0x14>
     daa:	14 c0       	rjmp	.+40     	; 0xdd4 <__fixunssfsi+0x4c>
     dac:	b1 30       	cpi	r27, 0x01	; 1
     dae:	91 f0       	breq	.+36     	; 0xdd4 <__fixunssfsi+0x4c>
     db0:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__fp_zero>
     db4:	b1 e0       	ldi	r27, 0x01	; 1
     db6:	08 95       	ret
     db8:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__fp_zero>
     dbc:	67 2f       	mov	r22, r23
     dbe:	78 2f       	mov	r23, r24
     dc0:	88 27       	eor	r24, r24
     dc2:	b8 5f       	subi	r27, 0xF8	; 248
     dc4:	39 f0       	breq	.+14     	; 0xdd4 <__fixunssfsi+0x4c>
     dc6:	b9 3f       	cpi	r27, 0xF9	; 249
     dc8:	cc f3       	brlt	.-14     	; 0xdbc <__fixunssfsi+0x34>
     dca:	86 95       	lsr	r24
     dcc:	77 95       	ror	r23
     dce:	67 95       	ror	r22
     dd0:	b3 95       	inc	r27
     dd2:	d9 f7       	brne	.-10     	; 0xdca <__fixunssfsi+0x42>
     dd4:	3e f4       	brtc	.+14     	; 0xde4 <__fixunssfsi+0x5c>
     dd6:	90 95       	com	r25
     dd8:	80 95       	com	r24
     dda:	70 95       	com	r23
     ddc:	61 95       	neg	r22
     dde:	7f 4f       	sbci	r23, 0xFF	; 255
     de0:	8f 4f       	sbci	r24, 0xFF	; 255
     de2:	9f 4f       	sbci	r25, 0xFF	; 255
     de4:	08 95       	ret

00000de6 <__floatunsisf>:
     de6:	e8 94       	clt
     de8:	09 c0       	rjmp	.+18     	; 0xdfc <__floatsisf+0x12>

00000dea <__floatsisf>:
     dea:	97 fb       	bst	r25, 7
     dec:	3e f4       	brtc	.+14     	; 0xdfc <__floatsisf+0x12>
     dee:	90 95       	com	r25
     df0:	80 95       	com	r24
     df2:	70 95       	com	r23
     df4:	61 95       	neg	r22
     df6:	7f 4f       	sbci	r23, 0xFF	; 255
     df8:	8f 4f       	sbci	r24, 0xFF	; 255
     dfa:	9f 4f       	sbci	r25, 0xFF	; 255
     dfc:	99 23       	and	r25, r25
     dfe:	a9 f0       	breq	.+42     	; 0xe2a <__floatsisf+0x40>
     e00:	f9 2f       	mov	r31, r25
     e02:	96 e9       	ldi	r25, 0x96	; 150
     e04:	bb 27       	eor	r27, r27
     e06:	93 95       	inc	r25
     e08:	f6 95       	lsr	r31
     e0a:	87 95       	ror	r24
     e0c:	77 95       	ror	r23
     e0e:	67 95       	ror	r22
     e10:	b7 95       	ror	r27
     e12:	f1 11       	cpse	r31, r1
     e14:	f8 cf       	rjmp	.-16     	; 0xe06 <__floatsisf+0x1c>
     e16:	fa f4       	brpl	.+62     	; 0xe56 <__floatsisf+0x6c>
     e18:	bb 0f       	add	r27, r27
     e1a:	11 f4       	brne	.+4      	; 0xe20 <__floatsisf+0x36>
     e1c:	60 ff       	sbrs	r22, 0
     e1e:	1b c0       	rjmp	.+54     	; 0xe56 <__floatsisf+0x6c>
     e20:	6f 5f       	subi	r22, 0xFF	; 255
     e22:	7f 4f       	sbci	r23, 0xFF	; 255
     e24:	8f 4f       	sbci	r24, 0xFF	; 255
     e26:	9f 4f       	sbci	r25, 0xFF	; 255
     e28:	16 c0       	rjmp	.+44     	; 0xe56 <__floatsisf+0x6c>
     e2a:	88 23       	and	r24, r24
     e2c:	11 f0       	breq	.+4      	; 0xe32 <__floatsisf+0x48>
     e2e:	96 e9       	ldi	r25, 0x96	; 150
     e30:	11 c0       	rjmp	.+34     	; 0xe54 <__floatsisf+0x6a>
     e32:	77 23       	and	r23, r23
     e34:	21 f0       	breq	.+8      	; 0xe3e <__floatsisf+0x54>
     e36:	9e e8       	ldi	r25, 0x8E	; 142
     e38:	87 2f       	mov	r24, r23
     e3a:	76 2f       	mov	r23, r22
     e3c:	05 c0       	rjmp	.+10     	; 0xe48 <__floatsisf+0x5e>
     e3e:	66 23       	and	r22, r22
     e40:	71 f0       	breq	.+28     	; 0xe5e <__floatsisf+0x74>
     e42:	96 e8       	ldi	r25, 0x86	; 134
     e44:	86 2f       	mov	r24, r22
     e46:	70 e0       	ldi	r23, 0x00	; 0
     e48:	60 e0       	ldi	r22, 0x00	; 0
     e4a:	2a f0       	brmi	.+10     	; 0xe56 <__floatsisf+0x6c>
     e4c:	9a 95       	dec	r25
     e4e:	66 0f       	add	r22, r22
     e50:	77 1f       	adc	r23, r23
     e52:	88 1f       	adc	r24, r24
     e54:	da f7       	brpl	.-10     	; 0xe4c <__floatsisf+0x62>
     e56:	88 0f       	add	r24, r24
     e58:	96 95       	lsr	r25
     e5a:	87 95       	ror	r24
     e5c:	97 f9       	bld	r25, 7
     e5e:	08 95       	ret

00000e60 <__fp_cmp>:
     e60:	99 0f       	add	r25, r25
     e62:	00 08       	sbc	r0, r0
     e64:	55 0f       	add	r21, r21
     e66:	aa 0b       	sbc	r26, r26
     e68:	e0 e8       	ldi	r30, 0x80	; 128
     e6a:	fe ef       	ldi	r31, 0xFE	; 254
     e6c:	16 16       	cp	r1, r22
     e6e:	17 06       	cpc	r1, r23
     e70:	e8 07       	cpc	r30, r24
     e72:	f9 07       	cpc	r31, r25
     e74:	c0 f0       	brcs	.+48     	; 0xea6 <__fp_cmp+0x46>
     e76:	12 16       	cp	r1, r18
     e78:	13 06       	cpc	r1, r19
     e7a:	e4 07       	cpc	r30, r20
     e7c:	f5 07       	cpc	r31, r21
     e7e:	98 f0       	brcs	.+38     	; 0xea6 <__fp_cmp+0x46>
     e80:	62 1b       	sub	r22, r18
     e82:	73 0b       	sbc	r23, r19
     e84:	84 0b       	sbc	r24, r20
     e86:	95 0b       	sbc	r25, r21
     e88:	39 f4       	brne	.+14     	; 0xe98 <__fp_cmp+0x38>
     e8a:	0a 26       	eor	r0, r26
     e8c:	61 f0       	breq	.+24     	; 0xea6 <__fp_cmp+0x46>
     e8e:	23 2b       	or	r18, r19
     e90:	24 2b       	or	r18, r20
     e92:	25 2b       	or	r18, r21
     e94:	21 f4       	brne	.+8      	; 0xe9e <__fp_cmp+0x3e>
     e96:	08 95       	ret
     e98:	0a 26       	eor	r0, r26
     e9a:	09 f4       	brne	.+2      	; 0xe9e <__fp_cmp+0x3e>
     e9c:	a1 40       	sbci	r26, 0x01	; 1
     e9e:	a6 95       	lsr	r26
     ea0:	8f ef       	ldi	r24, 0xFF	; 255
     ea2:	81 1d       	adc	r24, r1
     ea4:	81 1d       	adc	r24, r1
     ea6:	08 95       	ret

00000ea8 <__fp_inf>:
     ea8:	97 f9       	bld	r25, 7
     eaa:	9f 67       	ori	r25, 0x7F	; 127
     eac:	80 e8       	ldi	r24, 0x80	; 128
     eae:	70 e0       	ldi	r23, 0x00	; 0
     eb0:	60 e0       	ldi	r22, 0x00	; 0
     eb2:	08 95       	ret

00000eb4 <__fp_nan>:
     eb4:	9f ef       	ldi	r25, 0xFF	; 255
     eb6:	80 ec       	ldi	r24, 0xC0	; 192
     eb8:	08 95       	ret

00000eba <__fp_pscA>:
     eba:	00 24       	eor	r0, r0
     ebc:	0a 94       	dec	r0
     ebe:	16 16       	cp	r1, r22
     ec0:	17 06       	cpc	r1, r23
     ec2:	18 06       	cpc	r1, r24
     ec4:	09 06       	cpc	r0, r25
     ec6:	08 95       	ret

00000ec8 <__fp_pscB>:
     ec8:	00 24       	eor	r0, r0
     eca:	0a 94       	dec	r0
     ecc:	12 16       	cp	r1, r18
     ece:	13 06       	cpc	r1, r19
     ed0:	14 06       	cpc	r1, r20
     ed2:	05 06       	cpc	r0, r21
     ed4:	08 95       	ret

00000ed6 <__fp_round>:
     ed6:	09 2e       	mov	r0, r25
     ed8:	03 94       	inc	r0
     eda:	00 0c       	add	r0, r0
     edc:	11 f4       	brne	.+4      	; 0xee2 <__fp_round+0xc>
     ede:	88 23       	and	r24, r24
     ee0:	52 f0       	brmi	.+20     	; 0xef6 <__fp_round+0x20>
     ee2:	bb 0f       	add	r27, r27
     ee4:	40 f4       	brcc	.+16     	; 0xef6 <__fp_round+0x20>
     ee6:	bf 2b       	or	r27, r31
     ee8:	11 f4       	brne	.+4      	; 0xeee <__fp_round+0x18>
     eea:	60 ff       	sbrs	r22, 0
     eec:	04 c0       	rjmp	.+8      	; 0xef6 <__fp_round+0x20>
     eee:	6f 5f       	subi	r22, 0xFF	; 255
     ef0:	7f 4f       	sbci	r23, 0xFF	; 255
     ef2:	8f 4f       	sbci	r24, 0xFF	; 255
     ef4:	9f 4f       	sbci	r25, 0xFF	; 255
     ef6:	08 95       	ret

00000ef8 <__fp_split3>:
     ef8:	57 fd       	sbrc	r21, 7
     efa:	90 58       	subi	r25, 0x80	; 128
     efc:	44 0f       	add	r20, r20
     efe:	55 1f       	adc	r21, r21
     f00:	59 f0       	breq	.+22     	; 0xf18 <__fp_splitA+0x10>
     f02:	5f 3f       	cpi	r21, 0xFF	; 255
     f04:	71 f0       	breq	.+28     	; 0xf22 <__fp_splitA+0x1a>
     f06:	47 95       	ror	r20

00000f08 <__fp_splitA>:
     f08:	88 0f       	add	r24, r24
     f0a:	97 fb       	bst	r25, 7
     f0c:	99 1f       	adc	r25, r25
     f0e:	61 f0       	breq	.+24     	; 0xf28 <__fp_splitA+0x20>
     f10:	9f 3f       	cpi	r25, 0xFF	; 255
     f12:	79 f0       	breq	.+30     	; 0xf32 <__fp_splitA+0x2a>
     f14:	87 95       	ror	r24
     f16:	08 95       	ret
     f18:	12 16       	cp	r1, r18
     f1a:	13 06       	cpc	r1, r19
     f1c:	14 06       	cpc	r1, r20
     f1e:	55 1f       	adc	r21, r21
     f20:	f2 cf       	rjmp	.-28     	; 0xf06 <__fp_split3+0xe>
     f22:	46 95       	lsr	r20
     f24:	f1 df       	rcall	.-30     	; 0xf08 <__fp_splitA>
     f26:	08 c0       	rjmp	.+16     	; 0xf38 <__fp_splitA+0x30>
     f28:	16 16       	cp	r1, r22
     f2a:	17 06       	cpc	r1, r23
     f2c:	18 06       	cpc	r1, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	f1 cf       	rjmp	.-30     	; 0xf14 <__fp_splitA+0xc>
     f32:	86 95       	lsr	r24
     f34:	71 05       	cpc	r23, r1
     f36:	61 05       	cpc	r22, r1
     f38:	08 94       	sec
     f3a:	08 95       	ret

00000f3c <__fp_zero>:
     f3c:	e8 94       	clt

00000f3e <__fp_szero>:
     f3e:	bb 27       	eor	r27, r27
     f40:	66 27       	eor	r22, r22
     f42:	77 27       	eor	r23, r23
     f44:	cb 01       	movw	r24, r22
     f46:	97 f9       	bld	r25, 7
     f48:	08 95       	ret

00000f4a <__gesf2>:
     f4a:	0e 94 30 07 	call	0xe60	; 0xe60 <__fp_cmp>
     f4e:	08 f4       	brcc	.+2      	; 0xf52 <__gesf2+0x8>
     f50:	8f ef       	ldi	r24, 0xFF	; 255
     f52:	08 95       	ret

00000f54 <__mulsf3>:
     f54:	0e 94 bd 07 	call	0xf7a	; 0xf7a <__mulsf3x>
     f58:	0c 94 6b 07 	jmp	0xed6	; 0xed6 <__fp_round>
     f5c:	0e 94 5d 07 	call	0xeba	; 0xeba <__fp_pscA>
     f60:	38 f0       	brcs	.+14     	; 0xf70 <__mulsf3+0x1c>
     f62:	0e 94 64 07 	call	0xec8	; 0xec8 <__fp_pscB>
     f66:	20 f0       	brcs	.+8      	; 0xf70 <__mulsf3+0x1c>
     f68:	95 23       	and	r25, r21
     f6a:	11 f0       	breq	.+4      	; 0xf70 <__mulsf3+0x1c>
     f6c:	0c 94 54 07 	jmp	0xea8	; 0xea8 <__fp_inf>
     f70:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <__fp_nan>
     f74:	11 24       	eor	r1, r1
     f76:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__fp_szero>

00000f7a <__mulsf3x>:
     f7a:	0e 94 7c 07 	call	0xef8	; 0xef8 <__fp_split3>
     f7e:	70 f3       	brcs	.-36     	; 0xf5c <__mulsf3+0x8>

00000f80 <__mulsf3_pse>:
     f80:	95 9f       	mul	r25, r21
     f82:	c1 f3       	breq	.-16     	; 0xf74 <__mulsf3+0x20>
     f84:	95 0f       	add	r25, r21
     f86:	50 e0       	ldi	r21, 0x00	; 0
     f88:	55 1f       	adc	r21, r21
     f8a:	62 9f       	mul	r22, r18
     f8c:	f0 01       	movw	r30, r0
     f8e:	72 9f       	mul	r23, r18
     f90:	bb 27       	eor	r27, r27
     f92:	f0 0d       	add	r31, r0
     f94:	b1 1d       	adc	r27, r1
     f96:	63 9f       	mul	r22, r19
     f98:	aa 27       	eor	r26, r26
     f9a:	f0 0d       	add	r31, r0
     f9c:	b1 1d       	adc	r27, r1
     f9e:	aa 1f       	adc	r26, r26
     fa0:	64 9f       	mul	r22, r20
     fa2:	66 27       	eor	r22, r22
     fa4:	b0 0d       	add	r27, r0
     fa6:	a1 1d       	adc	r26, r1
     fa8:	66 1f       	adc	r22, r22
     faa:	82 9f       	mul	r24, r18
     fac:	22 27       	eor	r18, r18
     fae:	b0 0d       	add	r27, r0
     fb0:	a1 1d       	adc	r26, r1
     fb2:	62 1f       	adc	r22, r18
     fb4:	73 9f       	mul	r23, r19
     fb6:	b0 0d       	add	r27, r0
     fb8:	a1 1d       	adc	r26, r1
     fba:	62 1f       	adc	r22, r18
     fbc:	83 9f       	mul	r24, r19
     fbe:	a0 0d       	add	r26, r0
     fc0:	61 1d       	adc	r22, r1
     fc2:	22 1f       	adc	r18, r18
     fc4:	74 9f       	mul	r23, r20
     fc6:	33 27       	eor	r19, r19
     fc8:	a0 0d       	add	r26, r0
     fca:	61 1d       	adc	r22, r1
     fcc:	23 1f       	adc	r18, r19
     fce:	84 9f       	mul	r24, r20
     fd0:	60 0d       	add	r22, r0
     fd2:	21 1d       	adc	r18, r1
     fd4:	82 2f       	mov	r24, r18
     fd6:	76 2f       	mov	r23, r22
     fd8:	6a 2f       	mov	r22, r26
     fda:	11 24       	eor	r1, r1
     fdc:	9f 57       	subi	r25, 0x7F	; 127
     fde:	50 40       	sbci	r21, 0x00	; 0
     fe0:	9a f0       	brmi	.+38     	; 0x1008 <__mulsf3_pse+0x88>
     fe2:	f1 f0       	breq	.+60     	; 0x1020 <__mulsf3_pse+0xa0>
     fe4:	88 23       	and	r24, r24
     fe6:	4a f0       	brmi	.+18     	; 0xffa <__mulsf3_pse+0x7a>
     fe8:	ee 0f       	add	r30, r30
     fea:	ff 1f       	adc	r31, r31
     fec:	bb 1f       	adc	r27, r27
     fee:	66 1f       	adc	r22, r22
     ff0:	77 1f       	adc	r23, r23
     ff2:	88 1f       	adc	r24, r24
     ff4:	91 50       	subi	r25, 0x01	; 1
     ff6:	50 40       	sbci	r21, 0x00	; 0
     ff8:	a9 f7       	brne	.-22     	; 0xfe4 <__mulsf3_pse+0x64>
     ffa:	9e 3f       	cpi	r25, 0xFE	; 254
     ffc:	51 05       	cpc	r21, r1
     ffe:	80 f0       	brcs	.+32     	; 0x1020 <__mulsf3_pse+0xa0>
    1000:	0c 94 54 07 	jmp	0xea8	; 0xea8 <__fp_inf>
    1004:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__fp_szero>
    1008:	5f 3f       	cpi	r21, 0xFF	; 255
    100a:	e4 f3       	brlt	.-8      	; 0x1004 <__mulsf3_pse+0x84>
    100c:	98 3e       	cpi	r25, 0xE8	; 232
    100e:	d4 f3       	brlt	.-12     	; 0x1004 <__mulsf3_pse+0x84>
    1010:	86 95       	lsr	r24
    1012:	77 95       	ror	r23
    1014:	67 95       	ror	r22
    1016:	b7 95       	ror	r27
    1018:	f7 95       	ror	r31
    101a:	e7 95       	ror	r30
    101c:	9f 5f       	subi	r25, 0xFF	; 255
    101e:	c1 f7       	brne	.-16     	; 0x1010 <__mulsf3_pse+0x90>
    1020:	fe 2b       	or	r31, r30
    1022:	88 0f       	add	r24, r24
    1024:	91 1d       	adc	r25, r1
    1026:	96 95       	lsr	r25
    1028:	87 95       	ror	r24
    102a:	97 f9       	bld	r25, 7
    102c:	08 95       	ret

0000102e <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    102e:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1030:	91 8d       	ldd	r25, Z+25	; 0x19
    1032:	22 8d       	ldd	r18, Z+26	; 0x1a
    1034:	89 2f       	mov	r24, r25
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	80 5c       	subi	r24, 0xC0	; 192
    103a:	9f 4f       	sbci	r25, 0xFF	; 255
    103c:	82 1b       	sub	r24, r18
    103e:	91 09       	sbc	r25, r1
}
    1040:	8f 73       	andi	r24, 0x3F	; 63
    1042:	99 27       	eor	r25, r25
    1044:	08 95       	ret

00001046 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1046:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1048:	91 8d       	ldd	r25, Z+25	; 0x19
    104a:	82 8d       	ldd	r24, Z+26	; 0x1a
    104c:	98 17       	cp	r25, r24
    104e:	31 f0       	breq	.+12     	; 0x105c <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1050:	82 8d       	ldd	r24, Z+26	; 0x1a
    1052:	e8 0f       	add	r30, r24
    1054:	f1 1d       	adc	r31, r1
    1056:	85 8d       	ldd	r24, Z+29	; 0x1d
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    105c:	8f ef       	ldi	r24, 0xFF	; 255
    105e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1060:	08 95       	ret

00001062 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1062:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1064:	91 8d       	ldd	r25, Z+25	; 0x19
    1066:	82 8d       	ldd	r24, Z+26	; 0x1a
    1068:	98 17       	cp	r25, r24
    106a:	61 f0       	breq	.+24     	; 0x1084 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    106c:	82 8d       	ldd	r24, Z+26	; 0x1a
    106e:	df 01       	movw	r26, r30
    1070:	a8 0f       	add	r26, r24
    1072:	b1 1d       	adc	r27, r1
    1074:	5d 96       	adiw	r26, 0x1d	; 29
    1076:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1078:	92 8d       	ldd	r25, Z+26	; 0x1a
    107a:	9f 5f       	subi	r25, 0xFF	; 255
    107c:	9f 73       	andi	r25, 0x3F	; 63
    107e:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1084:	8f ef       	ldi	r24, 0xFF	; 255
    1086:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1088:	08 95       	ret

0000108a <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    108a:	fc 01       	movw	r30, r24
    108c:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
    108e:	44 8d       	ldd	r20, Z+28	; 0x1c
    1090:	25 2f       	mov	r18, r21
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	84 2f       	mov	r24, r20
    1096:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1098:	82 1b       	sub	r24, r18
    109a:	93 0b       	sbc	r25, r19
    109c:	54 17       	cp	r21, r20
    109e:	10 f0       	brcs	.+4      	; 0x10a4 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    10a0:	cf 96       	adiw	r24, 0x3f	; 63
    10a2:	08 95       	ret
  return tail - head - 1;
    10a4:	01 97       	sbiw	r24, 0x01	; 1
}
    10a6:	08 95       	ret

000010a8 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    10a8:	89 ea       	ldi	r24, 0xA9	; 169
    10aa:	99 e0       	ldi	r25, 0x09	; 9
    10ac:	89 2b       	or	r24, r25
    10ae:	49 f0       	breq	.+18     	; 0x10c2 <_Z14serialEventRunv+0x1a>
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	89 2b       	or	r24, r25
    10b6:	29 f0       	breq	.+10     	; 0x10c2 <_Z14serialEventRunv+0x1a>
    10b8:	0e 94 a9 09 	call	0x1352	; 0x1352 <_Z17Serial0_availablev>
    10bc:	81 11       	cpse	r24, r1
    10be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    10c2:	08 95       	ret

000010c4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    10c4:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    10c6:	84 8d       	ldd	r24, Z+28	; 0x1c
    10c8:	df 01       	movw	r26, r30
    10ca:	a8 0f       	add	r26, r24
    10cc:	b1 1d       	adc	r27, r1
    10ce:	a3 5a       	subi	r26, 0xA3	; 163
    10d0:	bf 4f       	sbci	r27, 0xFF	; 255
    10d2:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    10d4:	84 8d       	ldd	r24, Z+28	; 0x1c
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	01 96       	adiw	r24, 0x01	; 1
    10da:	8f 73       	andi	r24, 0x3F	; 63
    10dc:	99 27       	eor	r25, r25
    10de:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    10e0:	a6 89       	ldd	r26, Z+22	; 0x16
    10e2:	b7 89       	ldd	r27, Z+23	; 0x17
    10e4:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    10e6:	a0 89       	ldd	r26, Z+16	; 0x10
    10e8:	b1 89       	ldd	r27, Z+17	; 0x11
    10ea:	8c 91       	ld	r24, X
    10ec:	80 64       	ori	r24, 0x40	; 64
    10ee:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    10f0:	93 8d       	ldd	r25, Z+27	; 0x1b
    10f2:	84 8d       	ldd	r24, Z+28	; 0x1c
    10f4:	98 13       	cpse	r25, r24
    10f6:	06 c0       	rjmp	.+12     	; 0x1104 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    10f8:	02 88       	ldd	r0, Z+18	; 0x12
    10fa:	f3 89       	ldd	r31, Z+19	; 0x13
    10fc:	e0 2d       	mov	r30, r0
    10fe:	80 81       	ld	r24, Z
    1100:	8f 7d       	andi	r24, 0xDF	; 223
    1102:	80 83       	st	Z, r24
    1104:	08 95       	ret

00001106 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    1106:	ef 92       	push	r14
    1108:	ff 92       	push	r15
    110a:	0f 93       	push	r16
    110c:	1f 93       	push	r17
    110e:	cf 93       	push	r28
    1110:	df 93       	push	r29
    1112:	ec 01       	movw	r28, r24
  _written = true;
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1118:	9b 8d       	ldd	r25, Y+27	; 0x1b
    111a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    111c:	98 13       	cpse	r25, r24
    111e:	05 c0       	rjmp	.+10     	; 0x112a <_ZN14HardwareSerial5writeEh+0x24>
    1120:	e8 89       	ldd	r30, Y+16	; 0x10
    1122:	f9 89       	ldd	r31, Y+17	; 0x11
    1124:	80 81       	ld	r24, Z
    1126:	85 fd       	sbrc	r24, 5
    1128:	24 c0       	rjmp	.+72     	; 0x1172 <_ZN14HardwareSerial5writeEh+0x6c>
    112a:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    112c:	0b 8d       	ldd	r16, Y+27	; 0x1b
    112e:	10 e0       	ldi	r17, 0x00	; 0
    1130:	0f 5f       	subi	r16, 0xFF	; 255
    1132:	1f 4f       	sbci	r17, 0xFF	; 255
    1134:	0f 73       	andi	r16, 0x3F	; 63
    1136:	11 27       	eor	r17, r17
    1138:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    113a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    113c:	e8 12       	cpse	r14, r24
    113e:	0c c0       	rjmp	.+24     	; 0x1158 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    1140:	0f b6       	in	r0, 0x3f	; 63
    1142:	07 fc       	sbrc	r0, 7
    1144:	fa cf       	rjmp	.-12     	; 0x113a <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1146:	e8 89       	ldd	r30, Y+16	; 0x10
    1148:	f9 89       	ldd	r31, Y+17	; 0x11
    114a:	80 81       	ld	r24, Z
    114c:	85 ff       	sbrs	r24, 5
    114e:	f5 cf       	rjmp	.-22     	; 0x113a <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1150:	ce 01       	movw	r24, r28
    1152:	0e 94 62 08 	call	0x10c4	; 0x10c4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1156:	f1 cf       	rjmp	.-30     	; 0x113a <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1158:	8b 8d       	ldd	r24, Y+27	; 0x1b
    115a:	fe 01       	movw	r30, r28
    115c:	e8 0f       	add	r30, r24
    115e:	f1 1d       	adc	r31, r1
    1160:	e3 5a       	subi	r30, 0xA3	; 163
    1162:	ff 4f       	sbci	r31, 0xFF	; 255
    1164:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    1166:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    1168:	ea 89       	ldd	r30, Y+18	; 0x12
    116a:	fb 89       	ldd	r31, Y+19	; 0x13
    116c:	80 81       	ld	r24, Z
    116e:	80 62       	ori	r24, 0x20	; 32
    1170:	07 c0       	rjmp	.+14     	; 0x1180 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    1172:	ee 89       	ldd	r30, Y+22	; 0x16
    1174:	ff 89       	ldd	r31, Y+23	; 0x17
    1176:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    1178:	e8 89       	ldd	r30, Y+16	; 0x10
    117a:	f9 89       	ldd	r31, Y+17	; 0x11
    117c:	80 81       	ld	r24, Z
    117e:	80 64       	ori	r24, 0x40	; 64
    1180:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	df 91       	pop	r29
    1188:	cf 91       	pop	r28
    118a:	1f 91       	pop	r17
    118c:	0f 91       	pop	r16
    118e:	ff 90       	pop	r15
    1190:	ef 90       	pop	r14
    1192:	08 95       	ret

00001194 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1194:	cf 93       	push	r28
    1196:	df 93       	push	r29
    1198:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    119a:	88 8d       	ldd	r24, Y+24	; 0x18
    119c:	88 23       	and	r24, r24
    119e:	c9 f0       	breq	.+50     	; 0x11d2 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    11a0:	ea 89       	ldd	r30, Y+18	; 0x12
    11a2:	fb 89       	ldd	r31, Y+19	; 0x13
    11a4:	80 81       	ld	r24, Z
    11a6:	85 fd       	sbrc	r24, 5
    11a8:	05 c0       	rjmp	.+10     	; 0x11b4 <_ZN14HardwareSerial5flushEv+0x20>
    11aa:	a8 89       	ldd	r26, Y+16	; 0x10
    11ac:	b9 89       	ldd	r27, Y+17	; 0x11
    11ae:	8c 91       	ld	r24, X
    11b0:	86 fd       	sbrc	r24, 6
    11b2:	0f c0       	rjmp	.+30     	; 0x11d2 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	07 fc       	sbrc	r0, 7
    11b8:	f5 cf       	rjmp	.-22     	; 0x11a4 <_ZN14HardwareSerial5flushEv+0x10>
    11ba:	80 81       	ld	r24, Z
    11bc:	85 ff       	sbrs	r24, 5
    11be:	f2 cf       	rjmp	.-28     	; 0x11a4 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    11c0:	a8 89       	ldd	r26, Y+16	; 0x10
    11c2:	b9 89       	ldd	r27, Y+17	; 0x11
    11c4:	8c 91       	ld	r24, X
    11c6:	85 ff       	sbrs	r24, 5
    11c8:	ed cf       	rjmp	.-38     	; 0x11a4 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    11ca:	ce 01       	movw	r24, r28
    11cc:	0e 94 62 08 	call	0x10c4	; 0x10c4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    11d0:	e7 cf       	rjmp	.-50     	; 0x11a0 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    11d2:	df 91       	pop	r29
    11d4:	cf 91       	pop	r28
    11d6:	08 95       	ret

000011d8 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    11d8:	cf 92       	push	r12
    11da:	df 92       	push	r13
    11dc:	ef 92       	push	r14
    11de:	ff 92       	push	r15
    11e0:	1f 93       	push	r17
    11e2:	cf 93       	push	r28
    11e4:	df 93       	push	r29
    11e6:	ec 01       	movw	r28, r24
    11e8:	6a 01       	movw	r12, r20
    11ea:	7b 01       	movw	r14, r22
    11ec:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    11ee:	e8 89       	ldd	r30, Y+16	; 0x10
    11f0:	f9 89       	ldd	r31, Y+17	; 0x11
    11f2:	82 e0       	ldi	r24, 0x02	; 2
    11f4:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    11f6:	41 15       	cp	r20, r1
    11f8:	51 4e       	sbci	r21, 0xE1	; 225
    11fa:	61 05       	cpc	r22, r1
    11fc:	71 05       	cpc	r23, r1
    11fe:	b1 f0       	breq	.+44     	; 0x122c <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1200:	60 e0       	ldi	r22, 0x00	; 0
    1202:	79 e0       	ldi	r23, 0x09	; 9
    1204:	8d e3       	ldi	r24, 0x3D	; 61
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	a7 01       	movw	r20, r14
    120a:	96 01       	movw	r18, r12
    120c:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <__udivmodsi4>
    1210:	da 01       	movw	r26, r20
    1212:	c9 01       	movw	r24, r18
    1214:	01 97       	sbiw	r24, 0x01	; 1
    1216:	a1 09       	sbc	r26, r1
    1218:	b1 09       	sbc	r27, r1
    121a:	b6 95       	lsr	r27
    121c:	a7 95       	ror	r26
    121e:	97 95       	ror	r25
    1220:	87 95       	ror	r24
    1222:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1224:	21 15       	cp	r18, r1
    1226:	80 e1       	ldi	r24, 0x10	; 16
    1228:	38 07       	cpc	r19, r24
    122a:	a8 f0       	brcs	.+42     	; 0x1256 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    122c:	e8 89       	ldd	r30, Y+16	; 0x10
    122e:	f9 89       	ldd	r31, Y+17	; 0x11
    1230:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1232:	60 e8       	ldi	r22, 0x80	; 128
    1234:	74 e8       	ldi	r23, 0x84	; 132
    1236:	8e e1       	ldi	r24, 0x1E	; 30
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	a7 01       	movw	r20, r14
    123c:	96 01       	movw	r18, r12
    123e:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <__udivmodsi4>
    1242:	da 01       	movw	r26, r20
    1244:	c9 01       	movw	r24, r18
    1246:	01 97       	sbiw	r24, 0x01	; 1
    1248:	a1 09       	sbc	r26, r1
    124a:	b1 09       	sbc	r27, r1
    124c:	b6 95       	lsr	r27
    124e:	a7 95       	ror	r26
    1250:	97 95       	ror	r25
    1252:	87 95       	ror	r24
    1254:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1256:	ec 85       	ldd	r30, Y+12	; 0x0c
    1258:	fd 85       	ldd	r31, Y+13	; 0x0d
    125a:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    125c:	ee 85       	ldd	r30, Y+14	; 0x0e
    125e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1260:	20 83       	st	Z, r18

  _written = false;
    1262:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1264:	ec 89       	ldd	r30, Y+20	; 0x14
    1266:	fd 89       	ldd	r31, Y+21	; 0x15
    1268:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    126a:	ea 89       	ldd	r30, Y+18	; 0x12
    126c:	fb 89       	ldd	r31, Y+19	; 0x13
    126e:	80 81       	ld	r24, Z
    1270:	80 61       	ori	r24, 0x10	; 16
    1272:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1274:	ea 89       	ldd	r30, Y+18	; 0x12
    1276:	fb 89       	ldd	r31, Y+19	; 0x13
    1278:	80 81       	ld	r24, Z
    127a:	88 60       	ori	r24, 0x08	; 8
    127c:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    127e:	ea 89       	ldd	r30, Y+18	; 0x12
    1280:	fb 89       	ldd	r31, Y+19	; 0x13
    1282:	80 81       	ld	r24, Z
    1284:	80 68       	ori	r24, 0x80	; 128
    1286:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1288:	ea 89       	ldd	r30, Y+18	; 0x12
    128a:	fb 89       	ldd	r31, Y+19	; 0x13
    128c:	80 81       	ld	r24, Z
    128e:	8f 7d       	andi	r24, 0xDF	; 223
    1290:	80 83       	st	Z, r24
}
    1292:	df 91       	pop	r29
    1294:	cf 91       	pop	r28
    1296:	1f 91       	pop	r17
    1298:	ff 90       	pop	r15
    129a:	ef 90       	pop	r14
    129c:	df 90       	pop	r13
    129e:	cf 90       	pop	r12
    12a0:	08 95       	ret

000012a2 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    12a2:	1f 92       	push	r1
    12a4:	0f 92       	push	r0
    12a6:	0f b6       	in	r0, 0x3f	; 63
    12a8:	0f 92       	push	r0
    12aa:	11 24       	eor	r1, r1
    12ac:	2f 93       	push	r18
    12ae:	8f 93       	push	r24
    12b0:	9f 93       	push	r25
    12b2:	ef 93       	push	r30
    12b4:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    12b6:	e0 91 e2 02 	lds	r30, 0x02E2	; 0x8002e2 <Serial+0x10>
    12ba:	f0 91 e3 02 	lds	r31, 0x02E3	; 0x8002e3 <Serial+0x11>
    12be:	80 81       	ld	r24, Z
    12c0:	e0 91 e8 02 	lds	r30, 0x02E8	; 0x8002e8 <Serial+0x16>
    12c4:	f0 91 e9 02 	lds	r31, 0x02E9	; 0x8002e9 <Serial+0x17>
    12c8:	82 fd       	sbrc	r24, 2
    12ca:	12 c0       	rjmp	.+36     	; 0x12f0 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    12cc:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    12ce:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <Serial+0x19>
    12d2:	8f 5f       	subi	r24, 0xFF	; 255
    12d4:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    12d6:	20 91 ec 02 	lds	r18, 0x02EC	; 0x8002ec <Serial+0x1a>
    12da:	82 17       	cp	r24, r18
    12dc:	51 f0       	breq	.+20     	; 0x12f2 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    12de:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <Serial+0x19>
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	ee 52       	subi	r30, 0x2E	; 46
    12e6:	fd 4f       	sbci	r31, 0xFD	; 253
    12e8:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    12ea:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <Serial+0x19>
    12ee:	01 c0       	rjmp	.+2      	; 0x12f2 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    12f0:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    12f2:	ff 91       	pop	r31
    12f4:	ef 91       	pop	r30
    12f6:	9f 91       	pop	r25
    12f8:	8f 91       	pop	r24
    12fa:	2f 91       	pop	r18
    12fc:	0f 90       	pop	r0
    12fe:	0f be       	out	0x3f, r0	; 63
    1300:	0f 90       	pop	r0
    1302:	1f 90       	pop	r1
    1304:	18 95       	reti

00001306 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1306:	1f 92       	push	r1
    1308:	0f 92       	push	r0
    130a:	0f b6       	in	r0, 0x3f	; 63
    130c:	0f 92       	push	r0
    130e:	11 24       	eor	r1, r1
    1310:	2f 93       	push	r18
    1312:	3f 93       	push	r19
    1314:	4f 93       	push	r20
    1316:	5f 93       	push	r21
    1318:	6f 93       	push	r22
    131a:	7f 93       	push	r23
    131c:	8f 93       	push	r24
    131e:	9f 93       	push	r25
    1320:	af 93       	push	r26
    1322:	bf 93       	push	r27
    1324:	ef 93       	push	r30
    1326:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1328:	82 ed       	ldi	r24, 0xD2	; 210
    132a:	92 e0       	ldi	r25, 0x02	; 2
    132c:	0e 94 62 08 	call	0x10c4	; 0x10c4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1330:	ff 91       	pop	r31
    1332:	ef 91       	pop	r30
    1334:	bf 91       	pop	r27
    1336:	af 91       	pop	r26
    1338:	9f 91       	pop	r25
    133a:	8f 91       	pop	r24
    133c:	7f 91       	pop	r23
    133e:	6f 91       	pop	r22
    1340:	5f 91       	pop	r21
    1342:	4f 91       	pop	r20
    1344:	3f 91       	pop	r19
    1346:	2f 91       	pop	r18
    1348:	0f 90       	pop	r0
    134a:	0f be       	out	0x3f, r0	; 63
    134c:	0f 90       	pop	r0
    134e:	1f 90       	pop	r1
    1350:	18 95       	reti

00001352 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1352:	82 ed       	ldi	r24, 0xD2	; 210
    1354:	92 e0       	ldi	r25, 0x02	; 2
    1356:	0e 94 17 08 	call	0x102e	; 0x102e <_ZN14HardwareSerial9availableEv>
    135a:	21 e0       	ldi	r18, 0x01	; 1
    135c:	89 2b       	or	r24, r25
    135e:	09 f4       	brne	.+2      	; 0x1362 <_Z17Serial0_availablev+0x10>
    1360:	20 e0       	ldi	r18, 0x00	; 0
}
    1362:	82 2f       	mov	r24, r18
    1364:	08 95       	ret

00001366 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1366:	e2 ed       	ldi	r30, 0xD2	; 210
    1368:	f2 e0       	ldi	r31, 0x02	; 2
    136a:	13 82       	std	Z+3, r1	; 0x03
    136c:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    136e:	88 ee       	ldi	r24, 0xE8	; 232
    1370:	93 e0       	ldi	r25, 0x03	; 3
    1372:	a0 e0       	ldi	r26, 0x00	; 0
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	84 83       	std	Z+4, r24	; 0x04
    1378:	95 83       	std	Z+5, r25	; 0x05
    137a:	a6 83       	std	Z+6, r26	; 0x06
    137c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    137e:	89 e3       	ldi	r24, 0x39	; 57
    1380:	92 e0       	ldi	r25, 0x02	; 2
    1382:	91 83       	std	Z+1, r25	; 0x01
    1384:	80 83       	st	Z, r24
    1386:	85 ec       	ldi	r24, 0xC5	; 197
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	95 87       	std	Z+13, r25	; 0x0d
    138c:	84 87       	std	Z+12, r24	; 0x0c
    138e:	84 ec       	ldi	r24, 0xC4	; 196
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	97 87       	std	Z+15, r25	; 0x0f
    1394:	86 87       	std	Z+14, r24	; 0x0e
    1396:	80 ec       	ldi	r24, 0xC0	; 192
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	91 8b       	std	Z+17, r25	; 0x11
    139c:	80 8b       	std	Z+16, r24	; 0x10
    139e:	81 ec       	ldi	r24, 0xC1	; 193
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	93 8b       	std	Z+19, r25	; 0x13
    13a4:	82 8b       	std	Z+18, r24	; 0x12
    13a6:	82 ec       	ldi	r24, 0xC2	; 194
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	95 8b       	std	Z+21, r25	; 0x15
    13ac:	84 8b       	std	Z+20, r24	; 0x14
    13ae:	86 ec       	ldi	r24, 0xC6	; 198
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	97 8b       	std	Z+23, r25	; 0x17
    13b4:	86 8b       	std	Z+22, r24	; 0x16
    13b6:	11 8e       	std	Z+25, r1	; 0x19
    13b8:	12 8e       	std	Z+26, r1	; 0x1a
    13ba:	13 8e       	std	Z+27, r1	; 0x1b
    13bc:	14 8e       	std	Z+28, r1	; 0x1c
    13be:	08 95       	ret

000013c0 <initVariant>:
    13c0:	08 95       	ret

000013c2 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    13c2:	0e 94 33 0c 	call	0x1866	; 0x1866 <init>

	initVariant();
    13c6:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    13ca:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    13ce:	c4 e5       	ldi	r28, 0x54	; 84
    13d0:	d8 e0       	ldi	r29, 0x08	; 8
#endif
	
	setup();
    
	for (;;) {
		loop();
    13d2:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <loop>
		if (serialEventRun) serialEventRun();
    13d6:	20 97       	sbiw	r28, 0x00	; 0
    13d8:	e1 f3       	breq	.-8      	; 0x13d2 <main+0x10>
    13da:	0e 94 54 08 	call	0x10a8	; 0x10a8 <_Z14serialEventRunv>
    13de:	f9 cf       	rjmp	.-14     	; 0x13d2 <main+0x10>

000013e0 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    13e0:	cf 92       	push	r12
    13e2:	df 92       	push	r13
    13e4:	ef 92       	push	r14
    13e6:	ff 92       	push	r15
    13e8:	0f 93       	push	r16
    13ea:	1f 93       	push	r17
    13ec:	cf 93       	push	r28
    13ee:	df 93       	push	r29
    13f0:	6c 01       	movw	r12, r24
    13f2:	7a 01       	movw	r14, r20
    13f4:	8b 01       	movw	r16, r22
    13f6:	c0 e0       	ldi	r28, 0x00	; 0
    13f8:	d0 e0       	ldi	r29, 0x00	; 0
    13fa:	ce 15       	cp	r28, r14
    13fc:	df 05       	cpc	r29, r15
    13fe:	81 f0       	breq	.+32     	; 0x1420 <_ZN5Print5writeEPKhj+0x40>
    1400:	d8 01       	movw	r26, r16
    1402:	6d 91       	ld	r22, X+
    1404:	8d 01       	movw	r16, r26
    1406:	d6 01       	movw	r26, r12
    1408:	ed 91       	ld	r30, X+
    140a:	fc 91       	ld	r31, X
    140c:	01 90       	ld	r0, Z+
    140e:	f0 81       	ld	r31, Z
    1410:	e0 2d       	mov	r30, r0
    1412:	c6 01       	movw	r24, r12
    1414:	09 95       	icall
    1416:	89 2b       	or	r24, r25
    1418:	11 f0       	breq	.+4      	; 0x141e <_ZN5Print5writeEPKhj+0x3e>
    141a:	21 96       	adiw	r28, 0x01	; 1
    141c:	ee cf       	rjmp	.-36     	; 0x13fa <_ZN5Print5writeEPKhj+0x1a>
    141e:	7e 01       	movw	r14, r28
    1420:	c7 01       	movw	r24, r14
    1422:	df 91       	pop	r29
    1424:	cf 91       	pop	r28
    1426:	1f 91       	pop	r17
    1428:	0f 91       	pop	r16
    142a:	ff 90       	pop	r15
    142c:	ef 90       	pop	r14
    142e:	df 90       	pop	r13
    1430:	cf 90       	pop	r12
    1432:	08 95       	ret

00001434 <_ZN5Print5writeEPKc>:
    1434:	61 15       	cp	r22, r1
    1436:	71 05       	cpc	r23, r1
    1438:	79 f0       	breq	.+30     	; 0x1458 <_ZN5Print5writeEPKc+0x24>
    143a:	fb 01       	movw	r30, r22
    143c:	01 90       	ld	r0, Z+
    143e:	00 20       	and	r0, r0
    1440:	e9 f7       	brne	.-6      	; 0x143c <_ZN5Print5writeEPKc+0x8>
    1442:	31 97       	sbiw	r30, 0x01	; 1
    1444:	af 01       	movw	r20, r30
    1446:	46 1b       	sub	r20, r22
    1448:	57 0b       	sbc	r21, r23
    144a:	dc 01       	movw	r26, r24
    144c:	ed 91       	ld	r30, X+
    144e:	fc 91       	ld	r31, X
    1450:	02 80       	ldd	r0, Z+2	; 0x02
    1452:	f3 81       	ldd	r31, Z+3	; 0x03
    1454:	e0 2d       	mov	r30, r0
    1456:	09 94       	ijmp
    1458:	80 e0       	ldi	r24, 0x00	; 0
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	08 95       	ret

0000145e <_ZN5Print5printEPKc>:
    145e:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <_ZN5Print5writeEPKc>

00001462 <_ZN5Print5printEc>:
    1462:	dc 01       	movw	r26, r24
    1464:	ed 91       	ld	r30, X+
    1466:	fc 91       	ld	r31, X
    1468:	01 90       	ld	r0, Z+
    146a:	f0 81       	ld	r31, Z
    146c:	e0 2d       	mov	r30, r0
    146e:	09 94       	ijmp

00001470 <_ZN5Print7printlnEv>:
    1470:	67 e4       	ldi	r22, 0x47	; 71
    1472:	72 e0       	ldi	r23, 0x02	; 2
    1474:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <_ZN5Print5writeEPKc>

00001478 <_ZN5Print7printlnEPKc>:
    1478:	0f 93       	push	r16
    147a:	1f 93       	push	r17
    147c:	cf 93       	push	r28
    147e:	df 93       	push	r29
    1480:	ec 01       	movw	r28, r24
    1482:	0e 94 1a 0a 	call	0x1434	; 0x1434 <_ZN5Print5writeEPKc>
    1486:	8c 01       	movw	r16, r24
    1488:	ce 01       	movw	r24, r28
    148a:	0e 94 38 0a 	call	0x1470	; 0x1470 <_ZN5Print7printlnEv>
    148e:	80 0f       	add	r24, r16
    1490:	91 1f       	adc	r25, r17
    1492:	df 91       	pop	r29
    1494:	cf 91       	pop	r28
    1496:	1f 91       	pop	r17
    1498:	0f 91       	pop	r16
    149a:	08 95       	ret

0000149c <_ZN5Print11printNumberEmh>:
    149c:	8f 92       	push	r8
    149e:	9f 92       	push	r9
    14a0:	af 92       	push	r10
    14a2:	bf 92       	push	r11
    14a4:	ef 92       	push	r14
    14a6:	ff 92       	push	r15
    14a8:	0f 93       	push	r16
    14aa:	1f 93       	push	r17
    14ac:	cf 93       	push	r28
    14ae:	df 93       	push	r29
    14b0:	cd b7       	in	r28, 0x3d	; 61
    14b2:	de b7       	in	r29, 0x3e	; 62
    14b4:	a1 97       	sbiw	r28, 0x21	; 33
    14b6:	0f b6       	in	r0, 0x3f	; 63
    14b8:	f8 94       	cli
    14ba:	de bf       	out	0x3e, r29	; 62
    14bc:	0f be       	out	0x3f, r0	; 63
    14be:	cd bf       	out	0x3d, r28	; 61
    14c0:	7c 01       	movw	r14, r24
    14c2:	fa 01       	movw	r30, r20
    14c4:	cb 01       	movw	r24, r22
    14c6:	19 a2       	std	Y+33, r1	; 0x21
    14c8:	22 30       	cpi	r18, 0x02	; 2
    14ca:	08 f4       	brcc	.+2      	; 0x14ce <_ZN5Print11printNumberEmh+0x32>
    14cc:	2a e0       	ldi	r18, 0x0A	; 10
    14ce:	8e 01       	movw	r16, r28
    14d0:	0f 5d       	subi	r16, 0xDF	; 223
    14d2:	1f 4f       	sbci	r17, 0xFF	; 255
    14d4:	82 2e       	mov	r8, r18
    14d6:	91 2c       	mov	r9, r1
    14d8:	a1 2c       	mov	r10, r1
    14da:	b1 2c       	mov	r11, r1
    14dc:	bf 01       	movw	r22, r30
    14de:	a5 01       	movw	r20, r10
    14e0:	94 01       	movw	r18, r8
    14e2:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <__udivmodsi4>
    14e6:	f9 01       	movw	r30, r18
    14e8:	ca 01       	movw	r24, r20
    14ea:	01 50       	subi	r16, 0x01	; 1
    14ec:	11 09       	sbc	r17, r1
    14ee:	6a 30       	cpi	r22, 0x0A	; 10
    14f0:	10 f4       	brcc	.+4      	; 0x14f6 <_ZN5Print11printNumberEmh+0x5a>
    14f2:	60 5d       	subi	r22, 0xD0	; 208
    14f4:	01 c0       	rjmp	.+2      	; 0x14f8 <_ZN5Print11printNumberEmh+0x5c>
    14f6:	69 5c       	subi	r22, 0xC9	; 201
    14f8:	d8 01       	movw	r26, r16
    14fa:	6c 93       	st	X, r22
    14fc:	23 2b       	or	r18, r19
    14fe:	24 2b       	or	r18, r20
    1500:	25 2b       	or	r18, r21
    1502:	61 f7       	brne	.-40     	; 0x14dc <_ZN5Print11printNumberEmh+0x40>
    1504:	b8 01       	movw	r22, r16
    1506:	c7 01       	movw	r24, r14
    1508:	0e 94 1a 0a 	call	0x1434	; 0x1434 <_ZN5Print5writeEPKc>
    150c:	a1 96       	adiw	r28, 0x21	; 33
    150e:	0f b6       	in	r0, 0x3f	; 63
    1510:	f8 94       	cli
    1512:	de bf       	out	0x3e, r29	; 62
    1514:	0f be       	out	0x3f, r0	; 63
    1516:	cd bf       	out	0x3d, r28	; 61
    1518:	df 91       	pop	r29
    151a:	cf 91       	pop	r28
    151c:	1f 91       	pop	r17
    151e:	0f 91       	pop	r16
    1520:	ff 90       	pop	r15
    1522:	ef 90       	pop	r14
    1524:	bf 90       	pop	r11
    1526:	af 90       	pop	r10
    1528:	9f 90       	pop	r9
    152a:	8f 90       	pop	r8
    152c:	08 95       	ret

0000152e <_ZN5Print5printEmi>:
    152e:	21 15       	cp	r18, r1
    1530:	31 05       	cpc	r19, r1
    1532:	41 f4       	brne	.+16     	; 0x1544 <_ZN5Print5printEmi+0x16>
    1534:	dc 01       	movw	r26, r24
    1536:	ed 91       	ld	r30, X+
    1538:	fc 91       	ld	r31, X
    153a:	01 90       	ld	r0, Z+
    153c:	f0 81       	ld	r31, Z
    153e:	e0 2d       	mov	r30, r0
    1540:	64 2f       	mov	r22, r20
    1542:	09 94       	ijmp
    1544:	0c 94 4e 0a 	jmp	0x149c	; 0x149c <_ZN5Print11printNumberEmh>

00001548 <_ZN5Print5printEhi>:
    1548:	9a 01       	movw	r18, r20
    154a:	46 2f       	mov	r20, r22
    154c:	50 e0       	ldi	r21, 0x00	; 0
    154e:	60 e0       	ldi	r22, 0x00	; 0
    1550:	70 e0       	ldi	r23, 0x00	; 0
    1552:	0c 94 97 0a 	jmp	0x152e	; 0x152e <_ZN5Print5printEmi>

00001556 <_ZN5Print5printEji>:
    1556:	9a 01       	movw	r18, r20
    1558:	ab 01       	movw	r20, r22
    155a:	60 e0       	ldi	r22, 0x00	; 0
    155c:	70 e0       	ldi	r23, 0x00	; 0
    155e:	0c 94 97 0a 	jmp	0x152e	; 0x152e <_ZN5Print5printEmi>

00001562 <_ZN5Print5printEli>:
    1562:	cf 92       	push	r12
    1564:	df 92       	push	r13
    1566:	ef 92       	push	r14
    1568:	ff 92       	push	r15
    156a:	0f 93       	push	r16
    156c:	1f 93       	push	r17
    156e:	cf 93       	push	r28
    1570:	df 93       	push	r29
    1572:	21 15       	cp	r18, r1
    1574:	31 05       	cpc	r19, r1
    1576:	81 f4       	brne	.+32     	; 0x1598 <_ZN5Print5printEli+0x36>
    1578:	dc 01       	movw	r26, r24
    157a:	ed 91       	ld	r30, X+
    157c:	fc 91       	ld	r31, X
    157e:	01 90       	ld	r0, Z+
    1580:	f0 81       	ld	r31, Z
    1582:	e0 2d       	mov	r30, r0
    1584:	64 2f       	mov	r22, r20
    1586:	df 91       	pop	r29
    1588:	cf 91       	pop	r28
    158a:	1f 91       	pop	r17
    158c:	0f 91       	pop	r16
    158e:	ff 90       	pop	r15
    1590:	ef 90       	pop	r14
    1592:	df 90       	pop	r13
    1594:	cf 90       	pop	r12
    1596:	09 94       	ijmp
    1598:	2a 30       	cpi	r18, 0x0A	; 10
    159a:	31 05       	cpc	r19, r1
    159c:	01 f5       	brne	.+64     	; 0x15de <_ZN5Print5printEli+0x7c>
    159e:	77 ff       	sbrs	r23, 7
    15a0:	1d c0       	rjmp	.+58     	; 0x15dc <_ZN5Print5printEli+0x7a>
    15a2:	6a 01       	movw	r12, r20
    15a4:	7b 01       	movw	r14, r22
    15a6:	ec 01       	movw	r28, r24
    15a8:	6d e2       	ldi	r22, 0x2D	; 45
    15aa:	0e 94 31 0a 	call	0x1462	; 0x1462 <_ZN5Print5printEc>
    15ae:	8c 01       	movw	r16, r24
    15b0:	44 27       	eor	r20, r20
    15b2:	55 27       	eor	r21, r21
    15b4:	ba 01       	movw	r22, r20
    15b6:	4c 19       	sub	r20, r12
    15b8:	5d 09       	sbc	r21, r13
    15ba:	6e 09       	sbc	r22, r14
    15bc:	7f 09       	sbc	r23, r15
    15be:	2a e0       	ldi	r18, 0x0A	; 10
    15c0:	ce 01       	movw	r24, r28
    15c2:	0e 94 4e 0a 	call	0x149c	; 0x149c <_ZN5Print11printNumberEmh>
    15c6:	80 0f       	add	r24, r16
    15c8:	91 1f       	adc	r25, r17
    15ca:	df 91       	pop	r29
    15cc:	cf 91       	pop	r28
    15ce:	1f 91       	pop	r17
    15d0:	0f 91       	pop	r16
    15d2:	ff 90       	pop	r15
    15d4:	ef 90       	pop	r14
    15d6:	df 90       	pop	r13
    15d8:	cf 90       	pop	r12
    15da:	08 95       	ret
    15dc:	2a e0       	ldi	r18, 0x0A	; 10
    15de:	df 91       	pop	r29
    15e0:	cf 91       	pop	r28
    15e2:	1f 91       	pop	r17
    15e4:	0f 91       	pop	r16
    15e6:	ff 90       	pop	r15
    15e8:	ef 90       	pop	r14
    15ea:	df 90       	pop	r13
    15ec:	cf 90       	pop	r12
    15ee:	0c 94 4e 0a 	jmp	0x149c	; 0x149c <_ZN5Print11printNumberEmh>

000015f2 <_ZN5Print5printEii>:
    15f2:	9a 01       	movw	r18, r20
    15f4:	ab 01       	movw	r20, r22
    15f6:	77 0f       	add	r23, r23
    15f8:	66 0b       	sbc	r22, r22
    15fa:	77 0b       	sbc	r23, r23
    15fc:	0c 94 b1 0a 	jmp	0x1562	; 0x1562 <_ZN5Print5printEli>

00001600 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    1600:	7f 92       	push	r7
    1602:	8f 92       	push	r8
    1604:	9f 92       	push	r9
    1606:	af 92       	push	r10
    1608:	bf 92       	push	r11
    160a:	cf 92       	push	r12
    160c:	df 92       	push	r13
    160e:	ef 92       	push	r14
    1610:	ff 92       	push	r15
    1612:	0f 93       	push	r16
    1614:	1f 93       	push	r17
    1616:	cf 93       	push	r28
    1618:	df 93       	push	r29
    161a:	8c 01       	movw	r16, r24
    161c:	6a 01       	movw	r12, r20
    161e:	7b 01       	movw	r14, r22
    1620:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    1622:	9a 01       	movw	r18, r20
    1624:	ab 01       	movw	r20, r22
    1626:	c7 01       	movw	r24, r14
    1628:	b6 01       	movw	r22, r12
    162a:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__unordsf2>
    162e:	88 23       	and	r24, r24
    1630:	19 f0       	breq	.+6      	; 0x1638 <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1632:	6a e4       	ldi	r22, 0x4A	; 74
    1634:	72 e0       	ldi	r23, 0x02	; 2
    1636:	27 c0       	rjmp	.+78     	; 0x1686 <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    1638:	46 01       	movw	r8, r12
    163a:	57 01       	movw	r10, r14
    163c:	e8 94       	clt
    163e:	b7 f8       	bld	r11, 7
    1640:	2f ef       	ldi	r18, 0xFF	; 255
    1642:	3f ef       	ldi	r19, 0xFF	; 255
    1644:	4f e7       	ldi	r20, 0x7F	; 127
    1646:	5f e7       	ldi	r21, 0x7F	; 127
    1648:	c5 01       	movw	r24, r10
    164a:	b4 01       	movw	r22, r8
    164c:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__unordsf2>
    1650:	81 11       	cpse	r24, r1
    1652:	0d c0       	rjmp	.+26     	; 0x166e <_ZN5Print10printFloatEdh+0x6e>
    1654:	2f ef       	ldi	r18, 0xFF	; 255
    1656:	3f ef       	ldi	r19, 0xFF	; 255
    1658:	4f e7       	ldi	r20, 0x7F	; 127
    165a:	5f e7       	ldi	r21, 0x7F	; 127
    165c:	c5 01       	movw	r24, r10
    165e:	b4 01       	movw	r22, r8
    1660:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__cmpsf2>
    1664:	18 16       	cp	r1, r24
    1666:	1c f4       	brge	.+6      	; 0x166e <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1668:	6e e4       	ldi	r22, 0x4E	; 78
    166a:	72 e0       	ldi	r23, 0x02	; 2
    166c:	0c c0       	rjmp	.+24     	; 0x1686 <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    166e:	2f ef       	ldi	r18, 0xFF	; 255
    1670:	3f ef       	ldi	r19, 0xFF	; 255
    1672:	4f e7       	ldi	r20, 0x7F	; 127
    1674:	5f e4       	ldi	r21, 0x4F	; 79
    1676:	c7 01       	movw	r24, r14
    1678:	b6 01       	movw	r22, r12
    167a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__gesf2>
    167e:	18 16       	cp	r1, r24
    1680:	94 f4       	brge	.+36     	; 0x16a6 <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1682:	62 e5       	ldi	r22, 0x52	; 82
    1684:	72 e0       	ldi	r23, 0x02	; 2
    1686:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    1688:	df 91       	pop	r29
    168a:	cf 91       	pop	r28
    168c:	1f 91       	pop	r17
    168e:	0f 91       	pop	r16
    1690:	ff 90       	pop	r15
    1692:	ef 90       	pop	r14
    1694:	df 90       	pop	r13
    1696:	cf 90       	pop	r12
    1698:	bf 90       	pop	r11
    169a:	af 90       	pop	r10
    169c:	9f 90       	pop	r9
    169e:	8f 90       	pop	r8
    16a0:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    16a2:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    16a6:	2f ef       	ldi	r18, 0xFF	; 255
    16a8:	3f ef       	ldi	r19, 0xFF	; 255
    16aa:	4f e7       	ldi	r20, 0x7F	; 127
    16ac:	5f ec       	ldi	r21, 0xCF	; 207
    16ae:	c7 01       	movw	r24, r14
    16b0:	b6 01       	movw	r22, r12
    16b2:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__cmpsf2>
    16b6:	87 fd       	sbrc	r24, 7
    16b8:	e4 cf       	rjmp	.-56     	; 0x1682 <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    16ba:	20 e0       	ldi	r18, 0x00	; 0
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	a9 01       	movw	r20, r18
    16c0:	c7 01       	movw	r24, r14
    16c2:	b6 01       	movw	r22, r12
    16c4:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__cmpsf2>
    16c8:	87 ff       	sbrs	r24, 7
    16ca:	0a c0       	rjmp	.+20     	; 0x16e0 <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    16cc:	6d e2       	ldi	r22, 0x2D	; 45
    16ce:	c8 01       	movw	r24, r16
    16d0:	0e 94 31 0a 	call	0x1462	; 0x1462 <_ZN5Print5printEc>
    16d4:	ec 01       	movw	r28, r24
     number = -number;
    16d6:	f7 fa       	bst	r15, 7
    16d8:	f0 94       	com	r15
    16da:	f7 f8       	bld	r15, 7
    16dc:	f0 94       	com	r15
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    16e0:	c0 e0       	ldi	r28, 0x00	; 0
    16e2:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    16e4:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    16e6:	60 e0       	ldi	r22, 0x00	; 0
    16e8:	70 e0       	ldi	r23, 0x00	; 0
    16ea:	80 e0       	ldi	r24, 0x00	; 0
    16ec:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    16ee:	7b 14       	cp	r7, r11
    16f0:	41 f0       	breq	.+16     	; 0x1702 <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	40 e2       	ldi	r20, 0x20	; 32
    16f8:	51 e4       	ldi	r21, 0x41	; 65
    16fa:	0e 94 52 06 	call	0xca4	; 0xca4 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    16fe:	b3 94       	inc	r11
    1700:	f6 cf       	rjmp	.-20     	; 0x16ee <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    1702:	a7 01       	movw	r20, r14
    1704:	96 01       	movw	r18, r12
    1706:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__addsf3>
    170a:	6b 01       	movw	r12, r22
    170c:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    170e:	0e 94 c4 06 	call	0xd88	; 0xd88 <__fixunssfsi>
    1712:	4b 01       	movw	r8, r22
    1714:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    1716:	2a e0       	ldi	r18, 0x0A	; 10
    1718:	ab 01       	movw	r20, r22
    171a:	bc 01       	movw	r22, r24
    171c:	c8 01       	movw	r24, r16
    171e:	0e 94 4e 0a 	call	0x149c	; 0x149c <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    1722:	c8 0f       	add	r28, r24
    1724:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    1726:	77 20       	and	r7, r7
    1728:	b9 f1       	breq	.+110    	; 0x1798 <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    172a:	c5 01       	movw	r24, r10
    172c:	b4 01       	movw	r22, r8
    172e:	0e 94 f3 06 	call	0xde6	; 0xde6 <__floatunsisf>
    1732:	9b 01       	movw	r18, r22
    1734:	ac 01       	movw	r20, r24
    1736:	c7 01       	movw	r24, r14
    1738:	b6 01       	movw	r22, r12
    173a:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__subsf3>
    173e:	6b 01       	movw	r12, r22
    1740:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    1742:	6e e2       	ldi	r22, 0x2E	; 46
    1744:	c8 01       	movw	r24, r16
    1746:	0e 94 31 0a 	call	0x1462	; 0x1462 <_ZN5Print5printEc>
    174a:	c8 0f       	add	r28, r24
    174c:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    174e:	20 e0       	ldi	r18, 0x00	; 0
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	40 e2       	ldi	r20, 0x20	; 32
    1754:	51 e4       	ldi	r21, 0x41	; 65
    1756:	c7 01       	movw	r24, r14
    1758:	b6 01       	movw	r22, r12
    175a:	0e 94 aa 07 	call	0xf54	; 0xf54 <__mulsf3>
    175e:	4b 01       	movw	r8, r22
    1760:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    1762:	0e 94 c4 06 	call	0xd88	; 0xd88 <__fixunssfsi>
    1766:	6b 01       	movw	r12, r22
    1768:	7c 01       	movw	r14, r24
    n += print(toPrint);
    176a:	4a e0       	ldi	r20, 0x0A	; 10
    176c:	50 e0       	ldi	r21, 0x00	; 0
    176e:	c8 01       	movw	r24, r16
    1770:	0e 94 ab 0a 	call	0x1556	; 0x1556 <_ZN5Print5printEji>
    1774:	c8 0f       	add	r28, r24
    1776:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    1778:	b6 01       	movw	r22, r12
    177a:	80 e0       	ldi	r24, 0x00	; 0
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	0e 94 f3 06 	call	0xde6	; 0xde6 <__floatunsisf>
    1782:	9b 01       	movw	r18, r22
    1784:	ac 01       	movw	r20, r24
    1786:	c5 01       	movw	r24, r10
    1788:	b4 01       	movw	r22, r8
    178a:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__subsf3>
    178e:	6b 01       	movw	r12, r22
    1790:	7c 01       	movw	r14, r24
    1792:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    1794:	71 10       	cpse	r7, r1
    1796:	db cf       	rjmp	.-74     	; 0x174e <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    1798:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    179a:	df 91       	pop	r29
    179c:	cf 91       	pop	r28
    179e:	1f 91       	pop	r17
    17a0:	0f 91       	pop	r16
    17a2:	ff 90       	pop	r15
    17a4:	ef 90       	pop	r14
    17a6:	df 90       	pop	r13
    17a8:	cf 90       	pop	r12
    17aa:	bf 90       	pop	r11
    17ac:	af 90       	pop	r10
    17ae:	9f 90       	pop	r9
    17b0:	8f 90       	pop	r8
    17b2:	7f 90       	pop	r7
    17b4:	08 95       	ret

000017b6 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    17b6:	0c 94 00 0b 	jmp	0x1600	; 0x1600 <_ZN5Print10printFloatEdh>

000017ba <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    17ba:	1f 92       	push	r1
    17bc:	0f 92       	push	r0
    17be:	0f b6       	in	r0, 0x3f	; 63
    17c0:	0f 92       	push	r0
    17c2:	11 24       	eor	r1, r1
    17c4:	2f 93       	push	r18
    17c6:	3f 93       	push	r19
    17c8:	8f 93       	push	r24
    17ca:	9f 93       	push	r25
    17cc:	af 93       	push	r26
    17ce:	bf 93       	push	r27
    17d0:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <timer0_millis>
    17d4:	90 91 71 03 	lds	r25, 0x0371	; 0x800371 <timer0_millis+0x1>
    17d8:	a0 91 72 03 	lds	r26, 0x0372	; 0x800372 <timer0_millis+0x2>
    17dc:	b0 91 73 03 	lds	r27, 0x0373	; 0x800373 <timer0_millis+0x3>
    17e0:	30 91 6f 03 	lds	r19, 0x036F	; 0x80036f <timer0_fract>
    17e4:	23 e0       	ldi	r18, 0x03	; 3
    17e6:	23 0f       	add	r18, r19
    17e8:	2d 37       	cpi	r18, 0x7D	; 125
    17ea:	20 f4       	brcc	.+8      	; 0x17f4 <__vector_16+0x3a>
    17ec:	01 96       	adiw	r24, 0x01	; 1
    17ee:	a1 1d       	adc	r26, r1
    17f0:	b1 1d       	adc	r27, r1
    17f2:	05 c0       	rjmp	.+10     	; 0x17fe <__vector_16+0x44>
    17f4:	26 e8       	ldi	r18, 0x86	; 134
    17f6:	23 0f       	add	r18, r19
    17f8:	02 96       	adiw	r24, 0x02	; 2
    17fa:	a1 1d       	adc	r26, r1
    17fc:	b1 1d       	adc	r27, r1
    17fe:	20 93 6f 03 	sts	0x036F, r18	; 0x80036f <timer0_fract>
    1802:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <timer0_millis>
    1806:	90 93 71 03 	sts	0x0371, r25	; 0x800371 <timer0_millis+0x1>
    180a:	a0 93 72 03 	sts	0x0372, r26	; 0x800372 <timer0_millis+0x2>
    180e:	b0 93 73 03 	sts	0x0373, r27	; 0x800373 <timer0_millis+0x3>
    1812:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <timer0_overflow_count>
    1816:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <timer0_overflow_count+0x1>
    181a:	a0 91 76 03 	lds	r26, 0x0376	; 0x800376 <timer0_overflow_count+0x2>
    181e:	b0 91 77 03 	lds	r27, 0x0377	; 0x800377 <timer0_overflow_count+0x3>
    1822:	01 96       	adiw	r24, 0x01	; 1
    1824:	a1 1d       	adc	r26, r1
    1826:	b1 1d       	adc	r27, r1
    1828:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <timer0_overflow_count>
    182c:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <timer0_overflow_count+0x1>
    1830:	a0 93 76 03 	sts	0x0376, r26	; 0x800376 <timer0_overflow_count+0x2>
    1834:	b0 93 77 03 	sts	0x0377, r27	; 0x800377 <timer0_overflow_count+0x3>
    1838:	bf 91       	pop	r27
    183a:	af 91       	pop	r26
    183c:	9f 91       	pop	r25
    183e:	8f 91       	pop	r24
    1840:	3f 91       	pop	r19
    1842:	2f 91       	pop	r18
    1844:	0f 90       	pop	r0
    1846:	0f be       	out	0x3f, r0	; 63
    1848:	0f 90       	pop	r0
    184a:	1f 90       	pop	r1
    184c:	18 95       	reti

0000184e <millis>:
    184e:	2f b7       	in	r18, 0x3f	; 63
    1850:	f8 94       	cli
    1852:	60 91 70 03 	lds	r22, 0x0370	; 0x800370 <timer0_millis>
    1856:	70 91 71 03 	lds	r23, 0x0371	; 0x800371 <timer0_millis+0x1>
    185a:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <timer0_millis+0x2>
    185e:	90 91 73 03 	lds	r25, 0x0373	; 0x800373 <timer0_millis+0x3>
    1862:	2f bf       	out	0x3f, r18	; 63
    1864:	08 95       	ret

00001866 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1866:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1868:	84 b5       	in	r24, 0x24	; 36
    186a:	82 60       	ori	r24, 0x02	; 2
    186c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    186e:	84 b5       	in	r24, 0x24	; 36
    1870:	81 60       	ori	r24, 0x01	; 1
    1872:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1874:	85 b5       	in	r24, 0x25	; 37
    1876:	82 60       	ori	r24, 0x02	; 2
    1878:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    187a:	85 b5       	in	r24, 0x25	; 37
    187c:	81 60       	ori	r24, 0x01	; 1
    187e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1880:	ee e6       	ldi	r30, 0x6E	; 110
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	80 81       	ld	r24, Z
    1886:	81 60       	ori	r24, 0x01	; 1
    1888:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    188a:	e1 e8       	ldi	r30, 0x81	; 129
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1890:	80 81       	ld	r24, Z
    1892:	82 60       	ori	r24, 0x02	; 2
    1894:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1896:	80 81       	ld	r24, Z
    1898:	81 60       	ori	r24, 0x01	; 1
    189a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    189c:	e0 e8       	ldi	r30, 0x80	; 128
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	81 60       	ori	r24, 0x01	; 1
    18a4:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    18a6:	e1 eb       	ldi	r30, 0xB1	; 177
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	84 60       	ori	r24, 0x04	; 4
    18ae:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    18b0:	e0 eb       	ldi	r30, 0xB0	; 176
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	81 60       	ori	r24, 0x01	; 1
    18b8:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    18ba:	ea e7       	ldi	r30, 0x7A	; 122
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	84 60       	ori	r24, 0x04	; 4
    18c2:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    18c4:	80 81       	ld	r24, Z
    18c6:	82 60       	ori	r24, 0x02	; 2
    18c8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    18ca:	80 81       	ld	r24, Z
    18cc:	81 60       	ori	r24, 0x01	; 1
    18ce:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    18d0:	80 81       	ld	r24, Z
    18d2:	80 68       	ori	r24, 0x80	; 128
    18d4:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    18d6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    18da:	08 95       	ret

000018dc <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    18dc:	8e 30       	cpi	r24, 0x0E	; 14
    18de:	08 f0       	brcs	.+2      	; 0x18e2 <analogRead+0x6>
    18e0:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    18e2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    18e6:	90 e4       	ldi	r25, 0x40	; 64
    18e8:	29 9f       	mul	r18, r25
    18ea:	90 01       	movw	r18, r0
    18ec:	11 24       	eor	r1, r1
    18ee:	87 70       	andi	r24, 0x07	; 7
    18f0:	82 2b       	or	r24, r18
    18f2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    18f6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    18fa:	80 64       	ori	r24, 0x40	; 64
    18fc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    1900:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1904:	86 fd       	sbrc	r24, 6
    1906:	fc cf       	rjmp	.-8      	; 0x1900 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    1908:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    190c:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    1910:	90 e0       	ldi	r25, 0x00	; 0
}
    1912:	92 2b       	or	r25, r18
    1914:	08 95       	ret

00001916 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    1916:	1f 93       	push	r17
    1918:	cf 93       	push	r28
    191a:	df 93       	push	r29
    191c:	18 2f       	mov	r17, r24
    191e:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    1920:	61 e0       	ldi	r22, 0x01	; 1
    1922:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <pinMode>
	if (val == 0)
    1926:	20 97       	sbiw	r28, 0x00	; 0
    1928:	11 f4       	brne	.+4      	; 0x192e <analogWrite+0x18>
	{
		digitalWrite(pin, LOW);
    192a:	60 e0       	ldi	r22, 0x00	; 0
    192c:	04 c0       	rjmp	.+8      	; 0x1936 <analogWrite+0x20>
	}
	else if (val == 255)
    192e:	cf 3f       	cpi	r28, 0xFF	; 255
    1930:	d1 05       	cpc	r29, r1
    1932:	39 f4       	brne	.+14     	; 0x1942 <analogWrite+0x2c>
	{
		digitalWrite(pin, HIGH);
    1934:	61 e0       	ldi	r22, 0x01	; 1
    1936:	81 2f       	mov	r24, r17
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    1938:	df 91       	pop	r29
    193a:	cf 91       	pop	r28
    193c:	1f 91       	pop	r17
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
    193e:	0c 94 4f 0d 	jmp	0x1a9e	; 0x1a9e <digitalWrite>
	}
	else
	{
		switch(digitalPinToTimer(pin))
    1942:	e1 2f       	mov	r30, r17
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	e4 58       	subi	r30, 0x84	; 132
    1948:	ff 4f       	sbci	r31, 0xFF	; 255
    194a:	e4 91       	lpm	r30, Z
    194c:	e3 30       	cpi	r30, 0x03	; 3
    194e:	f9 f0       	breq	.+62     	; 0x198e <analogWrite+0x78>
    1950:	48 f4       	brcc	.+18     	; 0x1964 <analogWrite+0x4e>
    1952:	e1 30       	cpi	r30, 0x01	; 1
    1954:	b9 f0       	breq	.+46     	; 0x1984 <analogWrite+0x6e>
    1956:	e2 30       	cpi	r30, 0x02	; 2
    1958:	a1 f5       	brne	.+104    	; 0x19c2 <analogWrite+0xac>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    195a:	84 b5       	in	r24, 0x24	; 36
    195c:	80 62       	ori	r24, 0x20	; 32
    195e:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    1960:	c8 bd       	out	0x28, r28	; 40
				break;
    1962:	34 c0       	rjmp	.+104    	; 0x19cc <analogWrite+0xb6>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
    1964:	e7 30       	cpi	r30, 0x07	; 7
    1966:	e9 f0       	breq	.+58     	; 0x19a2 <analogWrite+0x8c>
    1968:	e8 30       	cpi	r30, 0x08	; 8
    196a:	19 f1       	breq	.+70     	; 0x19b2 <analogWrite+0x9c>
    196c:	e4 30       	cpi	r30, 0x04	; 4
    196e:	49 f5       	brne	.+82     	; 0x19c2 <analogWrite+0xac>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    1970:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1974:	80 62       	ori	r24, 0x20	; 32
    1976:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1B = val; // set pwm duty
    197a:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    197e:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				break;
    1982:	24 c0       	rjmp	.+72     	; 0x19cc <analogWrite+0xb6>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    1984:	84 b5       	in	r24, 0x24	; 36
    1986:	80 68       	ori	r24, 0x80	; 128
    1988:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    198a:	c7 bd       	out	0x27, r28	; 39
				break;
    198c:	1f c0       	rjmp	.+62     	; 0x19cc <analogWrite+0xb6>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    198e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1992:	80 68       	ori	r24, 0x80	; 128
    1994:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1A = val; // set pwm duty
    1998:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    199c:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
				break;
    19a0:	15 c0       	rjmp	.+42     	; 0x19cc <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    19a2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    19a6:	80 68       	ori	r24, 0x80	; 128
    19a8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				OCR2A = val; // set pwm duty
    19ac:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
				break;
    19b0:	0d c0       	rjmp	.+26     	; 0x19cc <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    19b2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    19b6:	80 62       	ori	r24, 0x20	; 32
    19b8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				OCR2B = val; // set pwm duty
    19bc:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
				break;
    19c0:	05 c0       	rjmp	.+10     	; 0x19cc <analogWrite+0xb6>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    19c2:	c0 38       	cpi	r28, 0x80	; 128
    19c4:	d1 05       	cpc	r29, r1
    19c6:	0c f0       	brlt	.+2      	; 0x19ca <analogWrite+0xb4>
    19c8:	b5 cf       	rjmp	.-150    	; 0x1934 <analogWrite+0x1e>
    19ca:	af cf       	rjmp	.-162    	; 0x192a <analogWrite+0x14>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    19cc:	df 91       	pop	r29
    19ce:	cf 91       	pop	r28
    19d0:	1f 91       	pop	r17
    19d2:	08 95       	ret

000019d4 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    19d4:	83 30       	cpi	r24, 0x03	; 3
    19d6:	81 f0       	breq	.+32     	; 0x19f8 <turnOffPWM+0x24>
    19d8:	28 f4       	brcc	.+10     	; 0x19e4 <turnOffPWM+0x10>
    19da:	81 30       	cpi	r24, 0x01	; 1
    19dc:	99 f0       	breq	.+38     	; 0x1a04 <turnOffPWM+0x30>
    19de:	82 30       	cpi	r24, 0x02	; 2
    19e0:	a1 f0       	breq	.+40     	; 0x1a0a <turnOffPWM+0x36>
    19e2:	08 95       	ret
    19e4:	87 30       	cpi	r24, 0x07	; 7
    19e6:	a9 f0       	breq	.+42     	; 0x1a12 <turnOffPWM+0x3e>
    19e8:	88 30       	cpi	r24, 0x08	; 8
    19ea:	b9 f0       	breq	.+46     	; 0x1a1a <turnOffPWM+0x46>
    19ec:	84 30       	cpi	r24, 0x04	; 4
    19ee:	d1 f4       	brne	.+52     	; 0x1a24 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    19f0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    19f4:	8f 7d       	andi	r24, 0xDF	; 223
    19f6:	03 c0       	rjmp	.+6      	; 0x19fe <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    19f8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    19fc:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    19fe:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1a02:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1a04:	84 b5       	in	r24, 0x24	; 36
    1a06:	8f 77       	andi	r24, 0x7F	; 127
    1a08:	02 c0       	rjmp	.+4      	; 0x1a0e <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1a0a:	84 b5       	in	r24, 0x24	; 36
    1a0c:	8f 7d       	andi	r24, 0xDF	; 223
    1a0e:	84 bd       	out	0x24, r24	; 36
    1a10:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1a12:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1a16:	8f 77       	andi	r24, 0x7F	; 127
    1a18:	03 c0       	rjmp	.+6      	; 0x1a20 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1a1a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1a1e:	8f 7d       	andi	r24, 0xDF	; 223
    1a20:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1a24:	08 95       	ret

00001a26 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1a26:	cf 93       	push	r28
    1a28:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	fc 01       	movw	r30, r24
    1a2e:	e0 57       	subi	r30, 0x70	; 112
    1a30:	ff 4f       	sbci	r31, 0xFF	; 255
    1a32:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1a34:	fc 01       	movw	r30, r24
    1a36:	ec 55       	subi	r30, 0x5C	; 92
    1a38:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3a:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1a3c:	88 23       	and	r24, r24
    1a3e:	61 f1       	breq	.+88     	; 0x1a98 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	88 0f       	add	r24, r24
    1a44:	99 1f       	adc	r25, r25
    1a46:	fc 01       	movw	r30, r24
    1a48:	e4 53       	subi	r30, 0x34	; 52
    1a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4c:	c5 91       	lpm	r28, Z+
    1a4e:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1a50:	fc 01       	movw	r30, r24
    1a52:	ee 53       	subi	r30, 0x3E	; 62
    1a54:	ff 4f       	sbci	r31, 0xFF	; 255
    1a56:	a5 91       	lpm	r26, Z+
    1a58:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1a5a:	61 11       	cpse	r22, r1
    1a5c:	09 c0       	rjmp	.+18     	; 0x1a70 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1a5e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1a60:	f8 94       	cli
		*reg &= ~bit;
    1a62:	88 81       	ld	r24, Y
    1a64:	20 95       	com	r18
    1a66:	82 23       	and	r24, r18
    1a68:	88 83       	st	Y, r24
		*out &= ~bit;
    1a6a:	ec 91       	ld	r30, X
    1a6c:	2e 23       	and	r18, r30
    1a6e:	0b c0       	rjmp	.+22     	; 0x1a86 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1a70:	62 30       	cpi	r22, 0x02	; 2
    1a72:	61 f4       	brne	.+24     	; 0x1a8c <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1a74:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1a76:	f8 94       	cli
		*reg &= ~bit;
    1a78:	88 81       	ld	r24, Y
    1a7a:	32 2f       	mov	r19, r18
    1a7c:	30 95       	com	r19
    1a7e:	83 23       	and	r24, r19
    1a80:	88 83       	st	Y, r24
		*out |= bit;
    1a82:	ec 91       	ld	r30, X
    1a84:	2e 2b       	or	r18, r30
    1a86:	2c 93       	st	X, r18
		SREG = oldSREG;
    1a88:	9f bf       	out	0x3f, r25	; 63
    1a8a:	06 c0       	rjmp	.+12     	; 0x1a98 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1a8c:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1a8e:	f8 94       	cli
		*reg |= bit;
    1a90:	e8 81       	ld	r30, Y
    1a92:	2e 2b       	or	r18, r30
    1a94:	28 83       	st	Y, r18
		SREG = oldSREG;
    1a96:	8f bf       	out	0x3f, r24	; 63
	}
}
    1a98:	df 91       	pop	r29
    1a9a:	cf 91       	pop	r28
    1a9c:	08 95       	ret

00001a9e <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1a9e:	1f 93       	push	r17
    1aa0:	cf 93       	push	r28
    1aa2:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1aa4:	28 2f       	mov	r18, r24
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	f9 01       	movw	r30, r18
    1aaa:	e4 58       	subi	r30, 0x84	; 132
    1aac:	ff 4f       	sbci	r31, 0xFF	; 255
    1aae:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1ab0:	f9 01       	movw	r30, r18
    1ab2:	e0 57       	subi	r30, 0x70	; 112
    1ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab6:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1ab8:	f9 01       	movw	r30, r18
    1aba:	ec 55       	subi	r30, 0x5C	; 92
    1abc:	ff 4f       	sbci	r31, 0xFF	; 255
    1abe:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1ac0:	cc 23       	and	r28, r28
    1ac2:	c1 f0       	breq	.+48     	; 0x1af4 <digitalWrite+0x56>
    1ac4:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1ac6:	81 11       	cpse	r24, r1
    1ac8:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <turnOffPWM>

	out = portOutputRegister(port);
    1acc:	ec 2f       	mov	r30, r28
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	ee 0f       	add	r30, r30
    1ad2:	ff 1f       	adc	r31, r31
    1ad4:	ee 53       	subi	r30, 0x3E	; 62
    1ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad8:	a5 91       	lpm	r26, Z+
    1ada:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1adc:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1ade:	f8 94       	cli

	if (val == LOW) {
    1ae0:	11 11       	cpse	r17, r1
    1ae2:	04 c0       	rjmp	.+8      	; 0x1aec <digitalWrite+0x4e>
		*out &= ~bit;
    1ae4:	8c 91       	ld	r24, X
    1ae6:	d0 95       	com	r29
    1ae8:	d8 23       	and	r29, r24
    1aea:	02 c0       	rjmp	.+4      	; 0x1af0 <digitalWrite+0x52>
	} else {
		*out |= bit;
    1aec:	ec 91       	ld	r30, X
    1aee:	de 2b       	or	r29, r30
    1af0:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1af2:	9f bf       	out	0x3f, r25	; 63
}
    1af4:	df 91       	pop	r29
    1af6:	cf 91       	pop	r28
    1af8:	1f 91       	pop	r17
    1afa:	08 95       	ret

00001afc <shiftOut>:
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
    1afc:	bf 92       	push	r11
    1afe:	cf 92       	push	r12
    1b00:	df 92       	push	r13
    1b02:	ef 92       	push	r14
    1b04:	ff 92       	push	r15
    1b06:	0f 93       	push	r16
    1b08:	1f 93       	push	r17
    1b0a:	cf 93       	push	r28
    1b0c:	df 93       	push	r29
    1b0e:	c8 2e       	mov	r12, r24
    1b10:	d6 2e       	mov	r13, r22
    1b12:	b4 2e       	mov	r11, r20
    1b14:	c7 e0       	ldi	r28, 0x07	; 7
    1b16:	d0 e0       	ldi	r29, 0x00	; 0
    1b18:	02 2f       	mov	r16, r18
    1b1a:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
			digitalWrite(dataPin, !!(val & (1 << i)));
    1b1c:	87 e0       	ldi	r24, 0x07	; 7
    1b1e:	e8 2e       	mov	r14, r24
    1b20:	f1 2c       	mov	r15, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
    1b22:	b1 10       	cpse	r11, r1
    1b24:	05 c0       	rjmp	.+10     	; 0x1b30 <shiftOut+0x34>
			digitalWrite(dataPin, !!(val & (1 << i)));
    1b26:	c7 01       	movw	r24, r14
    1b28:	8c 1b       	sub	r24, r28
    1b2a:	9d 0b       	sbc	r25, r29
    1b2c:	b8 01       	movw	r22, r16
    1b2e:	02 c0       	rjmp	.+4      	; 0x1b34 <shiftOut+0x38>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    1b30:	b8 01       	movw	r22, r16
    1b32:	8c 2f       	mov	r24, r28
    1b34:	02 c0       	rjmp	.+4      	; 0x1b3a <shiftOut+0x3e>
    1b36:	75 95       	asr	r23
    1b38:	67 95       	ror	r22
    1b3a:	8a 95       	dec	r24
    1b3c:	e2 f7       	brpl	.-8      	; 0x1b36 <shiftOut+0x3a>
    1b3e:	61 70       	andi	r22, 0x01	; 1
    1b40:	8c 2d       	mov	r24, r12
    1b42:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <digitalWrite>
			
		digitalWrite(clockPin, LOW);
    1b46:	60 e0       	ldi	r22, 0x00	; 0
    1b48:	8d 2d       	mov	r24, r13
    1b4a:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <digitalWrite>
		digitalWrite(clockPin, HIGH);		
    1b4e:	61 e0       	ldi	r22, 0x01	; 1
    1b50:	8d 2d       	mov	r24, r13
    1b52:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <digitalWrite>
    1b56:	21 97       	sbiw	r28, 0x01	; 1
    1b58:	20 f7       	brcc	.-56     	; 0x1b22 <shiftOut+0x26>
	}
}
    1b5a:	df 91       	pop	r29
    1b5c:	cf 91       	pop	r28
    1b5e:	1f 91       	pop	r17
    1b60:	0f 91       	pop	r16
    1b62:	ff 90       	pop	r15
    1b64:	ef 90       	pop	r14
    1b66:	df 90       	pop	r13
    1b68:	cf 90       	pop	r12
    1b6a:	bf 90       	pop	r11
    1b6c:	08 95       	ret

00001b6e <__unordsf2>:
    1b6e:	0e 94 30 07 	call	0xe60	; 0xe60 <__fp_cmp>
    1b72:	88 0b       	sbc	r24, r24
    1b74:	99 0b       	sbc	r25, r25
    1b76:	08 95       	ret

00001b78 <__udivmodqi4>:
    1b78:	99 1b       	sub	r25, r25
    1b7a:	79 e0       	ldi	r23, 0x09	; 9
    1b7c:	04 c0       	rjmp	.+8      	; 0x1b86 <__udivmodqi4_ep>

00001b7e <__udivmodqi4_loop>:
    1b7e:	99 1f       	adc	r25, r25
    1b80:	96 17       	cp	r25, r22
    1b82:	08 f0       	brcs	.+2      	; 0x1b86 <__udivmodqi4_ep>
    1b84:	96 1b       	sub	r25, r22

00001b86 <__udivmodqi4_ep>:
    1b86:	88 1f       	adc	r24, r24
    1b88:	7a 95       	dec	r23
    1b8a:	c9 f7       	brne	.-14     	; 0x1b7e <__udivmodqi4_loop>
    1b8c:	80 95       	com	r24
    1b8e:	08 95       	ret

00001b90 <__udivmodsi4>:
    1b90:	a1 e2       	ldi	r26, 0x21	; 33
    1b92:	1a 2e       	mov	r1, r26
    1b94:	aa 1b       	sub	r26, r26
    1b96:	bb 1b       	sub	r27, r27
    1b98:	fd 01       	movw	r30, r26
    1b9a:	0d c0       	rjmp	.+26     	; 0x1bb6 <__udivmodsi4_ep>

00001b9c <__udivmodsi4_loop>:
    1b9c:	aa 1f       	adc	r26, r26
    1b9e:	bb 1f       	adc	r27, r27
    1ba0:	ee 1f       	adc	r30, r30
    1ba2:	ff 1f       	adc	r31, r31
    1ba4:	a2 17       	cp	r26, r18
    1ba6:	b3 07       	cpc	r27, r19
    1ba8:	e4 07       	cpc	r30, r20
    1baa:	f5 07       	cpc	r31, r21
    1bac:	20 f0       	brcs	.+8      	; 0x1bb6 <__udivmodsi4_ep>
    1bae:	a2 1b       	sub	r26, r18
    1bb0:	b3 0b       	sbc	r27, r19
    1bb2:	e4 0b       	sbc	r30, r20
    1bb4:	f5 0b       	sbc	r31, r21

00001bb6 <__udivmodsi4_ep>:
    1bb6:	66 1f       	adc	r22, r22
    1bb8:	77 1f       	adc	r23, r23
    1bba:	88 1f       	adc	r24, r24
    1bbc:	99 1f       	adc	r25, r25
    1bbe:	1a 94       	dec	r1
    1bc0:	69 f7       	brne	.-38     	; 0x1b9c <__udivmodsi4_loop>
    1bc2:	60 95       	com	r22
    1bc4:	70 95       	com	r23
    1bc6:	80 95       	com	r24
    1bc8:	90 95       	com	r25
    1bca:	9b 01       	movw	r18, r22
    1bcc:	ac 01       	movw	r20, r24
    1bce:	bd 01       	movw	r22, r26
    1bd0:	cf 01       	movw	r24, r30
    1bd2:	08 95       	ret

00001bd4 <__tablejump2__>:
    1bd4:	ee 0f       	add	r30, r30
    1bd6:	ff 1f       	adc	r31, r31
    1bd8:	05 90       	lpm	r0, Z+
    1bda:	f4 91       	lpm	r31, Z
    1bdc:	e0 2d       	mov	r30, r0
    1bde:	09 94       	ijmp

00001be0 <_exit>:
    1be0:	f8 94       	cli

00001be2 <__stop_program>:
    1be2:	ff cf       	rjmp	.-2      	; 0x1be2 <__stop_program>
